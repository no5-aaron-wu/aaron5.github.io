<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AI数据集 [1]：COCO</title>
      <link href="/2021/11/16/AI-Dataset-1-coco/"/>
      <url>/2021/11/16/AI-Dataset-1-coco/</url>
      
        <content type="html"><![CDATA[<h1>COCO数据集</h1><h2 id="简介">简介</h2><ul><li>MS COCO的全称是Microsoft Common Objects in Context，起源于微软于2014年出资标注的Microsoft COCO数据集，与ImageNet竞赛一样，被视为是计算机视觉领域最受关注和最权威的比赛之一。</li><li>COCO数据集是一个大型的、丰富的物体检测，分割和字幕数据集。这个数据集以scene understanding为目标，主要从复杂的日常场景中截取，图像中的目标通过精确的segmentation进行位置的标定。图像包括91类目标，328,000影像和2,500,000个label。目前为止有语义分割的最大数据集，提供的类别有80 类，有超过33 万张图片，其中20 万张有标注，整个数据集中个体的数目超过150 万个。</li></ul><h2 id="COCO-API">COCO API</h2><h3 id="install">install</h3><h4 id="clone">clone</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;workdir&gt;</span><br><span class="line">git <span class="built_in">clone</span> https://hub.fastgit.org/cocodataset/cocoapi.git</span><br></pre></td></tr></table></figure><h4 id="setup">setup</h4><ul><li>编译并安装到本地：</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> cocoapi/PythonAPI/</span><br><span class="line">python setup.py build_ext --inplace</span><br></pre></td></tr></table></figure><ul><li>报错如下：</li></ul><blockquote><p>cl: 命令行 error D8021 :无效的数值参数“/Wno-cpp”</p></blockquote><ul><li><a href="http://xn--setup-hr2j95q.py">打开setup.py</a>，将下面一行注释掉：</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">extra_compile_args=[<span class="string">&#x27;-Wno-cpp&#x27;</span>, <span class="string">&#x27;-Wno-unused-function&#x27;</span>, <span class="string">&#x27;-std=c99&#x27;</span>],</span><br></pre></td></tr></table></figure><ul><li>再次执行，报错如下：</li></ul><blockquote><p>c1: fatal error C1083: 无法打开源文件: “pycocotools/_mask.c”: No such file or directory</p></blockquote><ul><li>搜索得知编译依赖库：Cython</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install Cython</span><br></pre></td></tr></table></figure><ul><li>再次执行，成功，继续执行如下指令，安装库到pyhton site-packages：</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python setup.py build_ext install</span><br></pre></td></tr></table></figure><ul><li>如遇到依赖的某个库没有安装，则会默认从https://pypi.org/下载，会很慢，可以Ctrl+C中止，自己执行pip install（假设自己已经配置过国内源）<br>安装成功后，用jupyter notebook 打开 pycocoDemo.ipynb，执行第一段import库操作，没有报错则说明安装成功。</li></ul><h3 id="COCO-DataSet-Download">COCO DataSet Download</h3><h4 id="官网下载数据集没反应">官网下载数据集没反应</h4><p><img src="1.png" alt="1.png"></p><ul><li>F12打开网页调试，转到Console，可以看到错误信息，意思是原链接地址是个不安全的地址，HTTP要改成HTTPS，复制链接修改后拷贝到浏览器便可成功下载（炒鸡慢）。</li><li>好像直接点击console里面的网址也可以下载？</li><li>网页下载太慢了，试了下面的方法：</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -c https://images.cocodataset.org/zips/val2017.zip --no-check-certificate</span><br></pre></td></tr></table></figure><ul><li><code>-c</code> 断点续传；</li><li><code>--no-check-certificate</code> 对非安全网址不检查验证</li><li>0.5-1M/s，也不是很快，但可以接受了（ ：</li></ul><h4 id="解压">解压</h4><ul><li>在cocoapi根目录下新建两个文件夹images和annotations，将图片和标注分别拷贝到这两个目录下，解压，图片保留<code>val2017</code>这一级子目录，注释的json文件则直接放在annotations文件夹下；</li><li>数据准备完毕，pycocoDemo.ipynb可以一路执行下去，观察API的功能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据集 </tag>
            
            <tag> coco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [3]：mAP</title>
      <link href="/2021/11/15/AI-Algorithm-3-mAP/"/>
      <url>/2021/11/15/AI-Algorithm-3-mAP/</url>
      
        <content type="html"><![CDATA[<h1>mAP（mean Average Precision）</h1><ul><li><p><code>AP（Average Precision，平均精度）</code>是衡量目标检测算法好坏的常用指标，在Faster R-CNN，SSD等算法中作为评估指标。</p></li><li><p>AP等于<code>召回率（Recall）</code>值取0-1时，准确率（precision）值的平均值。</p></li></ul><h3 id="1-Precision">1. Precision</h3><ul><li>正确预测结果占所有预测正例的百分比</li><li>比如你预测100个图片是苹果，其中80个真的是苹果，则Precision=0.8<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Precision=\frac{TP} {TP+FP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">rec</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2757em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">TP</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">FP</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">TP</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h3 id="2-Recall">2. Recall</h3><ul><li>正确预测结果占所有事实正例的百分比</li><li>比如总共有100个图片是苹果，你成功预测了50个，则Recall=0.5<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>e</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Recall=\frac{TP} {TP+FN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2757em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">TP</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">FN</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">TP</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h3 id="IoU">IoU</h3><ul><li>参见<a href="https://no5-aaron-wu.github.io/2021/11/11/AI-Algorithm-1-mIoU/">mIoU</a>笔记</li></ul><h3 id="AP">AP</h3><p>下面的例子演示AP怎么计算的<br><img src="1.png" alt="1.png"></p><ul><li>共进行10次预测，直到recall为1为止；</li><li>第二列表示预测是否正确，标准就是IoU≥0.5；</li><li>随着预测进行，recall值会一直增加，但precision会具有锯齿形状（FP下降，TP上升）</li><li>如下图所示；<br><img src="2.png" alt="2.png"></li><li>AP一般就定义为以上锯齿形所包含的面积 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>P</mi><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mi>p</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mtext>d</mtext><mi>r</mi></mrow><annotation encoding="application/x-tex">AP=\int_{0}^{1}p(r)\text{d}r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3648em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.009em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord text"><span class="mord">d</span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>；</li><li>precision 和 recall 总是在0-1之间，所以AP也是在0-1之间；</li><li>通常会首先对锯齿形进行平滑，将每个precision值替换为其右侧最大的precision值，从而使得曲线单调递减而不是呈现锯齿形，这样做的目的是减少因为TP出现的先后次序的差异导致的波动；</li><li>如下绿线所示：<br><img src="3.png" alt="3.png"></li><li>用公式表示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>p</mi></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><msub><mi>x</mi><mrow><mover accent="true"><mi>r</mi><mo stretchy="true">~</mo></mover><mo>≥</mo><mi>r</mi></mrow></msub><mrow><mi>p</mi><mo stretchy="false">(</mo><mover accent="true"><mi>r</mi><mo stretchy="true">~</mo></mover><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">p_{interp}(r)=max_{\widetilde{r}\geq{r}}{p(\widetilde{r})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3334em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6906em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span><span class="svg-align" style="width:calc(100% - 0.1111em);margin-left:0.1111em;top:-3.1306em;"><span class="pstrut" style="height:2.7em;"></span><span class="mtight" style="height:0.26em;"><svg xmlns="http://www.w3.org/2000/svg" width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="mrel mtight">≥</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2452em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6906em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span><span class="svg-align" style="width:calc(100% - 0.1111em);margin-left:0.1111em;top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg xmlns="http://www.w3.org/2000/svg" width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></li><li>进一步可以用<strong>11点插值</strong>方式计算AP：<br><img src="4.png" alt="4.png"></li><li>公式表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>P</mi><mo>=</mo><mfrac><mn>1</mn><mn>11</mn></mfrac><msub><mo>∑</mo><mrow><mi>r</mi><mo>∈</mo><mrow><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>0.1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">}</mo></mrow></mrow></msub><mrow><msub><mi>p</mi><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>p</mi></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">AP={\frac {1} {11}}\sum_{r\in{\{0,0.1,...,1\}}}{p_{interp}(r)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3198em;vertical-align:-0.4747em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2253em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mopen mtight">{</span><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0.1</span><span class="mpunct mtight">,</span><span class="mord mtight">...</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span><span class="mclose mtight">}</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4747em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span></span></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [2]：NC4HW4排布</title>
      <link href="/2021/11/14/AI-Algorithm-2-NC4HW4/"/>
      <url>/2021/11/14/AI-Algorithm-2-NC4HW4/</url>
      
        <content type="html"><![CDATA[<h1>NC4HW4数据排布</h1><ul><li>NC4HW4的数据排布其实就是和RGBA这种交织的数据排布类似</li></ul><h2 id="NCHW-NC4HW4">NCHW-&gt;NC4HW4</h2><ul><li>首先batch维度就是N不变</li><li>然后把每个样本所有feature map按每四个通道为一组分成C/4个组，如果通道数不能整除4则补齐到4的倍数，补上的feature map全填0</li><li>然后把每组内的4个feature map按照RGBA交织的形式重新排列一下就得到NC4HW4的数据了。<br><img src="1.png" alt="1.png"></li></ul><h2 id="优点">优点</h2><ul><li>以卷积操作举例，此处只讨论暴力方法，不涉及im2col，gemm， winograd等方法。</li><li>对于卷积操作, 根据计算机内存排布特点，按行进行处理，处理完一个通道的数据，转入下一个通道继续按行处理。下图是一个通道内卷积的操作：<br><img src="2.png" alt="2.png"></li><li>对于一个nchw格式的Tensor来说，其在计算机中的内存排布是这样的：<br><img src="3.png" alt="3.png"></li><li>当一条指令处理一个数据时，卷积操作需要做循环乘累加，如下图所示，与kernel对应的featuremap中的数据不是连续分布的。如果feature map空间size很大的话，这样跳通道取数据，就会造成<a href="https://www.cnblogs.com/jokerjason/p/10711022.html">cache miss</a>严重影响运行性能。<br><img src="4.jpg" alt="4.jpeg"></li><li>除此之外，当kernel size 不为4的倍数时，想使用诸如x86结构的sse指令,arm的neon指令.以及GPU的OpenGL和OpenCL等可以单指令处理4组数据的指令集时，使用nchw内存排布同样不方便：<br><img src="5.jpg" alt="5.jpeg"></li><li>而NC/4HW4则可以解决上面的问题，4个通道合并成一个通道，通道数不足4的情况下进行补0：<br><img src="6.png" alt="6.png"><br><img src="7.png" alt="7.png"></li><li>经过NC4HW4重排后在内存中的排布情况如下：<br><img src="8.png" alt="8.png"></li><li>此时进行单指令处理4组数据（SIMD）操作就没有问题了<br><img src="9.jpg" alt="9.jpeg"></li><li>注意此时如果想让输出也为NC/4HW4排布，则需要在以4组kernel为单位循环操作featuremap数据，以实现输出channel的pack。</li></ul><h2 id="总结">总结</h2><h4 id="优点-2">优点</h4><ul><li>进行NC4HW4重排后，可以充分利用cpu指令集的特性，实现对卷积等操作进行加速。同时可以较少cache miss.</li></ul><h4 id="缺点">缺点</h4><p>对于较大的feature，如果其channel不是4的倍数，则会导致补充0过多，导致内存占用过高，同时也相应的增加些许计算量。</p><h2 id="参考">参考</h2><ol><li><a href="https://www.zhihu.com/question/337513515">https://www.zhihu.com/question/337513515</a></li><li><a href="http://giantpandacv.com/project/Msnhnet/%E5%9B%BE%E8%A7%A3%E7%A5%9E%E7%A7%98%E7%9A%84NC4HW4/">http://giantpandacv.com/project/Msnhnet/图解神秘的NC4HW4/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MNN </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之类与对象 [1]: 多态</title>
      <link href="/2021/11/11/cpp-class-1/"/>
      <url>/2021/11/11/cpp-class-1/</url>
      
        <content type="html"><![CDATA[<h1>多态性</h1><ul><li>目的：不同对象在接收到相同消息时(操作/函数)做不同响应</li><li>现象：对应同样成员函数名称，执行不同函数体</li></ul><h1>多态性的实现</h1><ul><li>虚函数：使用<code>virtual</code>关键字声明成员函数</li><li>声明格式： <code>virtual 函数返回值 函数名称(参数列表);</code> (派生类重新实现时加不加virtual都行)</li><li>指向派生类的基类指针会调用对应派生类实现的虚函数</li><li>如果派生类不实现虚函数，则继承基类的虚函数实现</li><li>当类中有虚函数的时候，会维持一个虚表指针，虚表指针指向虚表中对应到该类的虚函数的函数入口地址(运行时确定)，这叫做函数的动态绑定（非虚函数是静态绑定）<ul><li><p>静态类型：对象在声明时采用的类型，在编译期既已确定；</p></li><li><p>动态类型：通常是指一个指针或引用目前所指对象的类型，是在运行期决定的；</p></li><li><p>静态绑定：绑定的是静态类型，所对应的函数或属性依赖于对象的静态类型，发生在编译期；</p></li><li><p>动态绑定：绑定的是动态类型，所对应的函数或属性依赖于对象的动态类型，发生在运行期；</p></li><li><p>对象的动态类型可以更改，但是静态类型无法更改；</p></li><li><p>要想实现多态，必须使用动态绑定；</p></li><li><p>在继承体系中只有虚函数使用的是动态绑定，其他的全部是静态绑定；</p></li><li><p>建议：绝对不要重新定义继承而来的非虚(non-virtual)函数（《Effective C++ 第三版》条款36），因为这样导致函数调用由对象声明时的静态类型确定了，而和对象本身脱离了关系，没有多态，也这将给程序留下不可预知的隐患和莫名其妙的BUG；</p></li></ul>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*virtual*/</span> <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; std::cout &lt;&lt; <span class="string">&quot;A::func()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; std::cout &lt;&lt; <span class="string">&quot;B::func()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; std::cout &lt;&lt; <span class="string">&quot;C::func()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">C* pc = <span class="keyword">new</span> <span class="built_in">C</span>(); <span class="comment">//pc的静态类型是它声明的类型C*，动态类型也是C*；</span></span><br><span class="line">B* pb = <span class="keyword">new</span> <span class="built_in">B</span>(); <span class="comment">//pb的静态类型和动态类型也都是B*；</span></span><br><span class="line">A* pa = pc;      <span class="comment">//pa的静态类型是它声明的类型A*，动态类型是pa所指向的对象pc的类型C*；</span></span><br><span class="line">pa = pb;         <span class="comment">//pa的动态类型可以更改，现在它的动态类型是B*，但其静态类型仍是声明时候的A*；</span></span><br><span class="line">C *pnull = <span class="literal">NULL</span>; <span class="comment">//pnull的静态类型是它声明的类型C*,没有动态类型，因为它指向了NULL；</span></span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pa-&gt;<span class="built_in">func</span>();      <span class="comment">//A::func() pa的静态类型永远都是A*，不管其指向的是哪个子类，都是直接调用A::func()；</span></span><br><span class="line">pc-&gt;<span class="built_in">func</span>();      <span class="comment">//C::func() pc的动、静态类型都是C*，因此调用C::func()；</span></span><br><span class="line">pnull-&gt;<span class="built_in">func</span>();   <span class="comment">//C::func() 不用奇怪为什么空指针也可以调用函数，因为这在编译期就确定了，和指针空不空没关系；</span></span><br></pre></td></tr></table></figure><ul><li>如果注释掉类C中的func函数定义，其他不变，即</li></ul>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pa-&gt;<span class="built_in">func</span>();      <span class="comment">//A::func() 理由同上；</span></span><br><span class="line">pc-&gt;<span class="built_in">func</span>();      <span class="comment">//A::func() pc在类C中找不到func的定义，因此到其基类中寻找；</span></span><br><span class="line">pnull-&gt;<span class="built_in">func</span>();   <span class="comment">//A::func() 原因也解释过了；</span></span><br></pre></td></tr></table></figure><ul><li>如果为A中的void func()函数添加virtual特性，其他不变，即</li></ul>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; std::cout &lt;&lt; <span class="string">&quot;A::func()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pa-&gt;<span class="built_in">func</span>();      <span class="comment">//B::func() 因为有了virtual虚函数特性，pa的动态类型指向B*，因此先在B中查找，找到后直接调用；</span></span><br><span class="line">pc-&gt;<span class="built_in">func</span>();      <span class="comment">//C::func() pc的动、静态类型都是C*，因此也是先在C中查找；</span></span><br><span class="line">pnull-&gt;<span class="built_in">func</span>();   <span class="comment">//空指针异常，因为是func是virtual函数，因此对func的调用只能等到运行期才能确定，然后才发现pnull是空指针；</span></span><br></pre></td></tr></table></figure><ul><li>建议：绝对不要重新定义一个继承而来的virtual函数的缺省参数值，因为缺省参数值都是静态绑定（为了执行效率），而virtual函数却是动态绑定。</li></ul>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;E::func()\t&quot;</span>&lt;&lt; i &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span> :</span> <span class="keyword">public</span> E</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;F::func()\t&quot;</span> &lt;&lt; i &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    F* pf = <span class="keyword">new</span> <span class="built_in">F</span>();</span><br><span class="line">    E* pe = pf;</span><br><span class="line">    pf-&gt;<span class="built_in">func</span>(); <span class="comment">//F::func() 1  正常，就该如此；</span></span><br><span class="line">    pe-&gt;<span class="built_in">func</span>(); <span class="comment">//F::func() 0  哇哦，这是什么情况，调用了子类的函数，却使用了基类中参数的默认值！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1>纯虚函数</h1><ul><li>充当占位函数，没有任何实现</li><li>派生类负责实现其具体功能</li><li>声明格式： <code>virtual 函数返回值 函数名称(参数列表) = 0;</code></li><li>纯虚函数的虚表指针是存在的，只不过该指针指向0地址</li></ul><h1>抽象类（纯虚类）</h1><ul><li>带有纯虚函数的类</li><li>作为类继承层次的上层</li><li>不能构造抽象类的对象，但可以存在抽象类的指针或引用</li></ul><h1>虚析构函数</h1><ul><li>保持多态性需要虚析构函数，以保证能够正确释放对象</li><li>当一个类有子类时，该类的析构函数必须是虚函数，否则可能会有资源释放不完全的情况（因为非虚函数是静态绑定的）；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123; std::cout &lt;&lt; <span class="string">&quot;~A()!&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">B</span>()&#123; std::cout &lt;&lt; <span class="string">&quot;~B()!&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">C</span>()&#123; std::cout &lt;&lt; <span class="string">&quot;~C()!&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A* pa1 = <span class="keyword">new</span> <span class="built_in">B</span>();</span><br><span class="line">A* pa2 = <span class="keyword">new</span> <span class="built_in">C</span>();</span><br><span class="line"><span class="keyword">delete</span> pa1;</span><br><span class="line"><span class="keyword">delete</span> pa2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只会调用父类的析构函数，如果这时子类的析构函数中有关于内存释放的操作，将会造成内存泄露。</span></span><br><span class="line"><span class="comment">//~A()!</span></span><br><span class="line"><span class="comment">//~A()!</span></span><br></pre></td></tr></table></figure><ul><li>需要给父类的析构函数加上virtual</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>()&#123; std::cout &lt;&lt; <span class="string">&quot;~A()!&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出如下</span></span><br><span class="line"><span class="comment">//~B()!</span></span><br><span class="line"><span class="comment">//~A()!</span></span><br><span class="line"><span class="comment">//~C()!</span></span><br><span class="line"><span class="comment">//~A()!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [1]：mIoU</title>
      <link href="/2021/11/11/AI-Algorithm-1-mIoU/"/>
      <url>/2021/11/11/AI-Algorithm-1-mIoU/</url>
      
        <content type="html"><![CDATA[<h1>1. IoU(Intersection over Union 交并比)</h1><ul><li>就是矩形框A、B的重叠面积占A、B并集的面积比例。<br><code>IoU=Area(A∩B)/Area(A∪B)</code><br><img src="1.png" alt="fig1"></li><li>预测的结果往往就是四种情况：<ul><li>true positive（TP） 真正 被判定为正样本，事实上也是正样本</li><li>false positive（FP） 假正 被判定为正样本，但事实上是负样本</li><li>true negative（TN） 真负 被判定为负样本，事实上也是负样本</li><li>false negative（FN） 假负 被判定为负样本，但事实上是正样本</li></ul></li></ul><blockquote><p>第二个字母：What’s your judgement about the sample?<br>第一个字母：Is your judgement right(true) or not(false)?</p></blockquote><p><img src="2.png" alt="fig2"><br>基于以上定义：<code>IoU=TP/(FP+FN+TP)</code></p><h1>2. mIoU（Mean Intersection over Union 均交并比</h1><p>即对每个类别计算出的IoU求平均。<br><img src="3.png" alt="fig3"><br>其中，i表示真实值，j表示预测值，pij表示将i预测成j的数量，故上式等价于<br><img src="4.png" alt="fig4"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
