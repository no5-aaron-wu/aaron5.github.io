<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Effective C++ 读书笔记07</title>
      <link href="/2022/11/01/EffectiveC-7-ReadNote07/"/>
      <url>/2022/11/01/EffectiveC-7-ReadNote07/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>本文是阅读《Effective C++ 改善程序与设计的55个具体做法（第三版）》的心得笔记第七部分，文章也会按照原书的顺序依次记录各个条款。</p><p>第一部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/04/25/EffectiveC-1-ReadNote01/">effective C++ 读书笔记01</a>。</p><p>第二部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/05/06/EffectiveC-2-ReadNote02/">effective C++ 读书笔记02</a>。</p><p>第三部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/05/24/EffectiveC-3-ReadNote03/">effective C++ 读书笔记03</a>。</p><p>第四部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/06/20/EffectiveC-4-ReadNote04/">effective C++ 读书笔记04</a>。</p><p>第五部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/08/31/EffectiveC-5-ReadNote05/">effective C++ 读书笔记05</a>。</p><p>第六部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/09/25/EffectiveC-6-ReadNote06/">effective C++ 读书笔记06</a>。</p><h1>定制 new 和 delete</h1><h2 id="条款49：了解-new-handler-的行为">条款49：了解 new-handler 的行为</h2><p>当 <code>operator new</code> 无法满足某个内存分配需求时，一般会抛出 <code>std::bad_alloc</code> 异常。比如如下程序在VS x86环境下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0x1fffffff</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 <code>std::nothrow</code> 修饰 <code>new</code> 操作符，可以使<strong>内存分配阶段不会抛异常</strong>，失败了就返回 null 指针（但不能保证new 一个对象时，后续的构造函数不抛异常，比如构造函数中又new了一些内存）：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="built_in"><span class="keyword">new</span></span> (std::nothrow) <span class="keyword">int</span>[<span class="number">0x1fffffff</span>];<span class="comment">// p为NULL</span></span><br></pre></td></tr></table></figure><p>而当用户使用<code>std::set_new_handler</code>函数为<code>new</code>操作符指定一个<code>new_handler</code>函数时，<code>operator new</code> 无法满足某个内存分配需求，则会<strong>不断</strong>调用<code>new_handler</code>函数，直到找到足够的内存。其函数原型如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*new_handler)</span><span class="params">()</span></span>;<span class="comment">// typedef 函数指针</span></span><br><span class="line">    <span class="comment">// throw()表示不会抛出异常，现在已经使用noexcept代替</span></span><br><span class="line">    <span class="comment">// 输入参数为新的handler函数，返回原handler函数</span></span><br><span class="line">    <span class="function">new_handler <span class="title">set_new_handler</span><span class="params">(new_handler p)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个使用示例如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutOfMem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Unable to satisfy request for memory\n&quot;</span>;</span><br><span class="line">    std::<span class="built_in">abort</span>();<span class="comment">// 终止程序，若VS Debug模式会有弹窗提示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::<span class="built_in">set_new_handler</span>(OutOfMem);</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0x1fffffff</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个设计良好的<code>new_handler</code>可以为使用者提供极大的设计弹性，例如：</p><ul><li>让更多的内存可被使用：提前申请内存，让<code>new_handler</code>触发下一次的返还分配；</li><li>安装另一个<code>new_handler</code>：调用<code>set_new_handler</code>让下一次调用新的<code>new_handler</code>，以期新的<code>new_handler</code>可以解决问题；</li><li>卸载<code>new_handler</code>：将<code>null</code>指针传递给<code>set_new_handler</code>，<code>operator new</code>会在内存分配不成功时抛出异常；</li><li>手动抛出<code>std::bad_alloc</code>或其派生的异常，这样的异常不会被<code>operator new</code>捕获，因此会被传播到内存申请处；</li><li>不返回，通常调用<code>std::abort()</code>或<code>std::exit()</code>;</li></ul><p>现在考虑一个问题：是否可以给每一个C++类定值专属的<code>new-handler</code>呢？答案是C++标准机制没有提供，但我们可以自己实现，方法有以下两种：</p><ol><li>针对每个特定类，<strong>类内重载static类型的<code>operator new</code>和<code>set_new_handler</code>方法</strong>，为了能够恢复原本的<code>new-handler</code>，还需实现一个资源管理类<code>NewhandlerHolder</code>。具体实现如下：</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewHandlerHolder</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 保存目前的new-handler</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">NewHandlerHolder</span><span class="params">(std::new_handler nh)</span> : nh_(nh) &#123;</span>  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 析构时恢复new-handler</span></span><br><span class="line">    ~<span class="built_in">NewHandlerHolder</span>() &#123;</span><br><span class="line">        std::<span class="built_in">set_new_handler</span>(nh_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::new_handler nh_;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NewHandlerHolder</span>(<span class="keyword">const</span> NewHandlerHolder&amp;);                  <span class="comment">// 禁止copy操作</span></span><br><span class="line"></span><br><span class="line">    NewHandlerHolder&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> NewHandlerHolder&amp;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> std::new_handler <span class="title">set_new_handler</span><span class="params">(std::new_handler p)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> std::new_handler currentHandler;</span><br><span class="line">    <span class="keyword">int</span> data[<span class="number">0x1fffffff</span>];<span class="comment">// large data to cause out of memory</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::new_handler Widget::currentHandler = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::new_handler <span class="title">Widget::set_new_handler</span><span class="params">(std::new_handler p)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::new_handler oldHandler = currentHandler;</span><br><span class="line">    currentHandler = p;</span><br><span class="line">    <span class="keyword">return</span> oldHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* Widget::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span> </span>&#123;</span><br><span class="line">    <span class="function">NewHandlerHolder <span class="title">h</span><span class="params">(std::set_new_handler(currentHandler))</span></span>;</span><br><span class="line">    <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="built_in"><span class="keyword">new</span></span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutOfMem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Unable to satisfy request for memory\n&quot;</span>;</span><br><span class="line">    std::<span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Widget::<span class="built_in">set_new_handler</span>(OutOfMem);</span><br><span class="line">    Widget* pw1 = <span class="keyword">new</span> Widget;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法有个明显的缺点，就是你得为每一个类都重载一份static类型的<code>operator new</code>和<code>set_new_handler</code>方法，但实质上重载的代码是基本相同的，这会导致代码冗余。</p><ol start="2"><li>将上述方法1封装进一个模板类中，需要专属new-handler的类只需继承该模板基类即可，具体实现如下：</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewHandlerHolder</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 保存目前的new-handler</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">NewHandlerHolder</span><span class="params">(std::new_handler nh)</span> : nh_(nh) &#123;</span>  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 析构时恢复new-handler</span></span><br><span class="line">    ~<span class="built_in">NewHandlerHolder</span>() &#123;</span><br><span class="line">        std::<span class="built_in">set_new_handler</span>(nh_);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::new_handler nh_;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NewHandlerHolder</span>(<span class="keyword">const</span> NewHandlerHolder&amp;);  <span class="comment">// 禁止copy操作</span></span><br><span class="line"></span><br><span class="line">    NewHandlerHolder&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> NewHandlerHolder&amp;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewHandlerSupport</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> std::new_handler <span class="title">set_new_handler</span><span class="params">(std::new_handler p)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> std::new_handler currentHandler;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">std::new_handler NewHandlerSupport&lt;T&gt;::currentHandler = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">std::new_handler NewHandlerSupport&lt;T&gt;::<span class="built_in">set_new_handler</span>(std::new_handler p) <span class="keyword">throw</span>() &#123;</span><br><span class="line">    std::new_handler oldHandler = currentHandler;</span><br><span class="line">    currentHandler = p;</span><br><span class="line">    <span class="keyword">return</span> oldHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span>* NewHandlerSupport&lt;T&gt;::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span> </span>&#123;</span><br><span class="line">    <span class="function">NewHandlerHolder <span class="title">h</span><span class="params">(std::set_new_handler(currentHandler))</span></span>;</span><br><span class="line">    <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="built_in"><span class="keyword">new</span></span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> :</span> <span class="keyword">public</span> NewHandlerSupport&lt;Widget&gt;&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> data[<span class="number">0x1fffffff</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutOfMem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Unable to satisfy request for memory\n&quot;</span>;</span><br><span class="line">    std::<span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Widget::<span class="built_in">set_new_handler</span>(OutOfMem);</span><br><span class="line"></span><br><span class="line">    Widget* pw1 = <span class="keyword">new</span> Widget;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>Widget</code>类继承自<code>NewHandlerSupport&lt;Widget&gt;</code>，而且<code>NewHandlerSupport</code>模板类的类型参数<code>T</code>从未使用，这可能会让你感到困惑。</p><p>其实，将<code>NewHandlerSupport</code>设计成模板类主要是为了让每一个继承自<code>NewHandlerSupport</code>的类，都拥有实体互异的<code>NewHandlerSupport</code>副本，更明确的说，是为了让每个类拥有一份专属的static成员变量<code>currentHandler</code>。这种派生类继承自一个模板化的基类，而后者又以派生类作为类型参数的技术被称为<strong>怪异的循环模板模式（CRTP，curiously recurring template pattern）</strong>。</p><h2 id="条款50：了解new和delete的合理替换时机">条款50：了解new和delete的合理替换时机</h2><p>替换编译器提供的<code>operator new</code>和<code>operator delete</code>有以下常见理由：</p><ol><li><strong>用来检测运用上的错误</strong>。自定义的new/delete可以比较容易地检测到内存越界行为，比如在new时超额申请内存，在真正使用的内存区块前后的额外空间中写入特定的数值，即内存签名，在delete时检查这些内存签名是否被改写，以监测越界写行为。</li><li><strong>为了强化效能</strong>。编译器提供的new/delete为了适用于各种各样的内存分配场景，在内存碎片、额外空间开销和时间性能上都是保持中庸的水平。对于特定的需求和场景，使用定制化的内存管理会有更好的性能表现。</li><li><strong>为了收集使用上的统计数据</strong>。例如，内存分配的时空分布，内存块的申请和归还的次序（FIFO、LIFO或随机），内存峰值等。</li><li><strong>为了弥补缺省分配器中的非最佳对齐</strong>。例如，在X86体系结构下，double类型在内存地址8-byte齐位的情况访问最快。如果编译器自带的<code>operator new</code>不保证动态分配的double类型采用8-byte齐位，则可以自行实现一个，以提高程序效率。</li><li><strong>为了将相关对象成簇集中</strong>。比如已知某个数据结构往往一起使用，那么分配的时候应该尽量让所有数据的内存集中一些，避免频繁触发<strong>换页中断（page faults）</strong> ，提升访问效率。</li><li><strong>为了获得非传统的行为</strong>。比如当希望分配和归还共享内存（shared memory）内的区块，但能够管理该内存的只有C API（<code>shmget</code>等），那么可以自行实现定制版的new/delete，为C API 封装一层C++接口。</li></ol><h2 id="条款51：编写new和delete时需固守常规">条款51：编写new和delete时需固守常规</h2><p>条款50中解释了什么情况下需要自定义new/delete，本条款将解释自定义new/delete时需遵守的规则。</p><ol><li><strong>正确处理申请内存失败的情况</strong>。当有足够内存用于申请时，new就返回一个指针指向那块内存；如果申请失败，若new-handler函数不为null，就会调用new-handler函数（以期其能解决当前内存不足的问题，如释放某些内存出来），并再次尝试分配内存；若new-handler函数为null，则会抛出<code>std::bad_alloc</code>异常。</li><li><strong>正确处理申请0-bytes的情况</strong>。即使用户申请0-bytes的内存，我们也要为其返回一个合法的指针。常用的方法就是申请1-bytes的内存并返回。</li><li><strong>正确理解<code>operator new</code>内含的无穷循环</strong>。退出循环的办法有：内存被成功分配；new-handler函数做了条款49中描述的事：让更多的内存可用、安装另一个new-handler、卸载new-handler、抛出<code>std::bad_alloc</code>异常或其派生、承认失败，调用<code>std::abort()</code>或<code>std::exit()</code>。一个非成员函数版本的伪代码如下：</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;<span class="comment">// 处理0-bytes申请</span></span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        尝试分配 size bytes;</span><br><span class="line">        <span class="keyword">if</span> (分配成功)</span><br><span class="line">            <span class="keyword">return</span> (指向分配内存的指针);</span><br><span class="line">        <span class="comment">// 分配失败：get到目前使用的new-handler函数，并调用</span></span><br><span class="line">        new_handler globalHandler = <span class="built_in">set_new_handler</span>(<span class="number">0</span>);<span class="comment">// get</span></span><br><span class="line">        <span class="built_in">set_new_handler</span>(globalHandler);<span class="comment">// set</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (globalHandler) (*<span class="built_in">globalHandler</span>());<span class="comment">// exec</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>正确处理基类的<code>operator new</code>被派生类继承的情况</strong>。若需要实现特定类的<code>operator new</code>成员函数，需要考虑通常情况下，派生类对象要比基类对象大，因此派生类调用基类的<code>operator new</code>会有问题，如下：</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base &#123; ... &#125;;<span class="comment">// 假设Derived未声明 operator new</span></span><br><span class="line"></span><br><span class="line">Derived* p = <span class="keyword">new</span> Derived;<span class="comment">// 这里会调用Base::operator new</span></span><br></pre></td></tr></table></figure><p>处理这个问题的方法就是在基类中增加<strong>内存申请量错误</strong>的防御式编程，使得基类的<code>operator new</code>只适用于基类，派生类若不重新实现，则默认调用编译器提供的<code>operator new</code>，具体如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* Base::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size != <span class="built_in"><span class="keyword">sizeof</span></span>(Base)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="built_in"><span class="keyword">new</span></span>(size);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，自定义的<code>operator new[]</code>并不适用上述方法，因为通常情况下，需要额外的内存空间来保存元素个数等信息，所以不能简单的认为<code>size = 元素个数 * sizeof(Base)</code>。</p><ol start="5"><li><strong>正确处理<code>operator delete</code>删除null指针的情况</strong>。如下是非成员函数版本的伪代码：</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span> *rawMemory)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rawMemory == <span class="number">0</span>) <span class="keyword">return</span>;<span class="comment">// 直接返回</span></span><br><span class="line">    ...<span class="comment">// 归还内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>同样考虑派生类继承<code>operator delete</code>的问题</strong>。伪代码如下：</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* rawMemory, std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> Base::<span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* rawMemory, std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rawMemory == <span class="number">0</span>) <span class="keyword">return</span>;<span class="comment">// 直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (size != <span class="built_in"><span class="keyword">sizeof</span></span>(Base)) &#123;</span><br><span class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(rawMemory)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...<span class="comment">// 归还内存</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="条款52：写了-placement-new-也要写-placement-delete">条款52：写了 placement new 也要写 placement delete</h2><p>所谓 placement new/delete，是指<strong>除固定的<code>size_t</code>参数以外，还接受其他额外参数</strong>的特殊operator new/delete。</p><p>其中，<strong>接受一个指针指定对象该被构造的内存地址</strong>的<code>placement new</code>是<strong>最早/最常用</strong>的一个，已经被纳入C++标准库（<code>#include &lt;new&gt;</code>），而且是<code>placement new</code>命名的由来：即一个特定位置上的new。具体形式如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span>, <span class="keyword">void</span>*)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>当然，我们也可以自定义一个<code>placement new</code>，如接受一个<code>ostream</code>用来log分配信息，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">...</span><br><span class="line"><span class="comment">// placement new 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size, std::ostream&amp; logStream)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span></span>;</span><br><span class="line">    <span class="comment">// 普通operator delete 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, std::<span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户代码</span></span><br><span class="line">Widget* pw = <span class="built_in"><span class="keyword">new</span></span>(std::cerr) Widget;<span class="comment">// 调用placement new，存在潜在的内存泄漏风险</span></span><br></pre></td></tr></table></figure><p>众所周知，对于new对象的过程，可以分为以下两个步骤：</p><ol><li><code>operator new</code>分配对象所需的内存空间；</li><li>在该内存空间上执行对应的构造函数；</li></ol><p>当步骤1成功， 步骤2抛出异常时，已经申请的内存空间需要被回收，已防止内存泄漏。这在使用普通的<code>operator new</code>时是可以做到的，因为运行期系统知道与其对应的<code>operator delete</code>，并自动调用。然而，当使用<code>placement new</code>时，系统会尝试寻找并调用与<code>placement new</code>额外参数个数与类型均一致的<code>operator delete</code>，若没有找到，则系统什么都不会做，从而造成了内存泄漏。</p><p>所以规则很简单：当我们自定义一个<code>placement new</code>时，也要提供一个带相同额外参数的<code>placement delete</code>，以规避可能的内存泄漏。如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>() &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>();  <span class="comment">// 测试代码，必定抛异常导致构造失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// placement new 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size, std::ostream&amp; logStream)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;placement new&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="built_in"><span class="keyword">new</span></span>(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 普通operator delete 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pMemory == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// 直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (size != <span class="built_in"><span class="keyword">sizeof</span></span>(Widget)) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;size mismatch delete&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;size match delete&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// placement delete 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, std::ostream&amp; logStream)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;deal with exception&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Widget* pw = new Widget;// 报错，名称遮掩</span></span><br><span class="line">        Widget* pw = <span class="built_in"><span class="keyword">new</span></span> (std::cerr) Widget;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">delete</span> pw;</span><br><span class="line">    &#125; <span class="built_in"><span class="keyword">catch</span></span> (std::exception) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;std::exception&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>placement delete</code>只是为了应对未能完成构造而导致的内存泄漏问题的。也就是说，当没有抛出异常，对象成功构造后，用户自己<code>delete</code>对象时，调用的仍然是普通的<code>operator delete</code>。所以，必须同时提供两者。</p><p>此外，还有一个问题，那就是名称遮掩问题（参见条款33），即<code>operator new</code>成员函数的名称会遮掩global作用域下的<code>operator new</code>，从而导致这些标准的<code>operator new</code>无法再用与创建类对象。同理，派生类中的<code>operator new</code>也会遮掩global版本和从基类继承而来的<code>operator new</code>版本。除非你刻意为之，你应当保证这些缺省的new/delete仍然可用。global作用域下缺省的<code>operator new</code>包含以下几种：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span>)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span></span>;<span class="comment">// normal new</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span>, <span class="keyword">void</span>*)</span> <span class="title">throw</span><span class="params">()</span></span>;<span class="comment">// placement new</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span>, <span class="keyword">const</span> std::<span class="keyword">nothrow_t</span>&amp;)</span> <span class="title">throw</span><span class="params">()</span></span>;<span class="comment">// nothrow new[条款49]</span></span><br></pre></td></tr></table></figure><p>实现这一目的的方法也很简单，就是实现一个基类，其中包含所有缺省的new/delete，再利用继承机制和using 声明式取得缺省版本：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardNewDeleteForms</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// normal new/delete</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="built_in"><span class="keyword">new</span></span>(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// placement new/delete</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size, <span class="keyword">void</span>* ptr)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="built_in"><span class="keyword">new</span></span>(size, ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, <span class="keyword">void</span>* ptr)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory, ptr)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// nothrow new/delete</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size, <span class="keyword">const</span> std::<span class="keyword">nothrow_t</span>&amp; nt)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="built_in"><span class="keyword">new</span></span>(size, nt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, <span class="keyword">const</span> std::<span class="keyword">nothrow_t</span>&amp; nt)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory, nt)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> :</span> <span class="keyword">public</span> StandardNewDeleteForms &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> StandardNewDeleteForms::<span class="keyword">operator</span> <span class="keyword">new</span>;</span><br><span class="line">    <span class="keyword">using</span> StandardNewDeleteForms::<span class="keyword">operator</span> <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Widget</span>() &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>();  <span class="comment">// 测试代码，必定抛异常导致构造失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// placement new 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="keyword">size_t</span> size, std::ostream&amp; logStream)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;placement new&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="built_in"><span class="keyword">new</span></span>(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 普通operator delete 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, std::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pMemory == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// 直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (size != <span class="built_in"><span class="keyword">sizeof</span></span>(Widget)) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;size mismatch delete&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;size match delete&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// placement delete 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, std::ostream&amp; logStream)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;deal with exception&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Widget* pw = <span class="keyword">new</span> Widget;<span class="comment">// 编译通过，将会调用缺省的global new</span></span><br><span class="line">        <span class="comment">// Widget* pw = new (std::cerr) Widget;// 编译通过，将会调用placement new</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">delete</span> pw;</span><br><span class="line">    &#125; <span class="built_in"><span class="keyword">catch</span></span> (std::exception) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;std::exception&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>杂项讨论</h1><h2 id="条款53：不要轻忽编译器的警告">条款53：不要轻忽编译器的警告</h2><ul><li><strong>严肃对待编译器发出的警告信息。</strong></li></ul><p>我们经常会忽略编译器给出的警告信息，但是no-warning是值得被推崇的，除非你清楚的了解warning信息确实无伤大雅。</p><ul><li><strong>但也不要过度依赖编译器的报警能力。</strong></li></ul><p>不同的编译器之间可能存在差异，一旦移植到另一个编译器上，原本依赖的警告信息有可能就消失。</p><h2 id="条款54：让自己熟悉包括TR1在内的标准程序库">条款54：让自己熟悉包括TR1在内的标准程序库</h2><p>C++ TR1（Technical Report 1）并非标准，而是一份对C++98标准补充新特性的草稿文件。TR1详细阐述了14个新组件，放在<code>std::tr1</code>命名空间下，其中绝大部分已经定版，收录到了C++11标准中。14个组件（如已收录，会在开头标注）详情如下：</p><ol><li>【C++11】<strong>智能指针</strong>：老朋友了，具体可以看<a href="https://no5-aaron-wu.github.io/2022/05/06/cpp-modern-1-SmartPointers/">这篇</a>；</li><li>【C++11】<strong><code>tr1::function</code></strong>：可以表示任意<strong>可调用物（callable entity）</strong>，即任意函数或函数对象，只要签名一致即可。在条款35中有用法示例；</li><li>【C++11】<strong><code>tr1::bind</code></strong>：绑定器，可用于绑定可调用物的参数。在条款35中有用法示例；</li><li>【C++11】<strong>Hash Tables</strong>：以哈希表为基础的新容器，以<code>unordered_</code>开头的<code>set</code>、<code>multiset</code>、<code>map</code>、<code>multimap</code>，容器中元素无任何可预期的次序；</li><li>【C++11】<strong>正则表达式（Regular Expressions）</strong>：<code>#include&lt;regex&gt;</code>；</li><li>【C++11】<strong>元组（Tuples，又称变量组）</strong>：<code>std::pair</code>（只能持有两个元素）的泛化，可以持有任意个数的元素；</li><li>【C++11】<strong><code>tr1::array</code></strong>：本质上是一个<strong>STL化</strong>的<strong>定长数组</strong>，提供诸如<code>begin()</code>和<code>end()</code>等实用的成员函数；</li><li>【C++11】<strong><code>tr1::mem_fn</code></strong>：成员函数指针包装器，传入一个成员函数指针，返回一个可调用物，可调用物接受类对象作为（第一个）输入参数，执行该类对象的成员函数；</li><li>【C++11】<strong><code>tr1::reference_wrapper</code></strong>：将引用封装为对象，通常用于对引用进行封装然后装入标准容器(直接往容器塞引用是不行的)；</li><li>【C++11】<strong>随机数生成工具</strong>：<code>std::random_device</code>，可以直接生成或者使用不同的 <strong>随机数引擎</strong> 和 <strong>随机分布算法</strong> 进行生成，比C标准库的<code>rand</code>要更强大，头文件是 <code>#include&lt;random&gt;</code>；</li><li>【C++17】<strong>数学特殊函数</strong>：包括Laguerre多项式、Bessel 函数、完全椭圆积分等特殊数学函数，注意，这些 在 C++17 才引入C++标准，可参考<a href="https://en.cppreference.com/w/cpp/numeric/special_functions">cppreference</a>，头文件在 <code>#include&lt;cmath&gt;</code>；</li><li><strong>C99兼容扩充</strong> ：C99标准是<strong>C语言</strong>的官方标准第二版，1999年发布，TR1对其进行了兼容；</li><li>【C++11】<strong>类型萃取（Type traits）</strong>：头文件<code>#include&lt;type_traits&gt;</code>，在条款47中有详细介绍；</li><li>【C++11】<strong><code>tr1::result_of</code></strong>：可以对函数返回值做推断，得到返回值类型，头文件为 <code>#include&lt;type_traits&gt;</code> ，示例用法如下：</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设有个函数 double calcDaySale(int);</span></span><br><span class="line">std::result_of&lt;<span class="built_in">calcDaySale</span>(<span class="keyword">int</span>)&gt;::type x = <span class="number">3.14</span>;<span class="comment">// x就是double类型</span></span><br></pre></td></tr></table></figure><h2 id="条款55：让自己熟悉Boost">条款55：让自己熟悉Boost</h2><p>Boost是一个C++开发者集结的社群，也是个可自由下载的程序库集，网址是 <a href="http://boost.org">http://boost.org</a>。</p><p><strong>其特殊性</strong>：和C++标准委员会有着独一无二的密切关系，且具有很深影响力；接纳程序库非常严谨，需要一次以上的同行专家评审。</p><p>Boost 程序库集可处理的场景有许多（且<strong>囊括了TR1</strong>的实现），可区分出数十个类别，并且还在持续增加，<strong>列举一小部分</strong>如下：</p><ul><li><strong>字符串与文本处理</strong></li><li><strong>容器</strong></li><li><strong>函数对象与高级编程</strong></li><li><strong>泛型编程</strong>：覆盖一大组 traits classes</li><li><strong>模板元编程</strong>：覆盖一个针对编译器 assertions 而写的程序库，以及 Boost MPL程序库</li><li><strong>数学和数值</strong>:包括有理数、八元数、四元数、公约数、多重运算、随机数等等</li><li><strong>正确性与测试性</strong></li><li><strong>数据结构</strong></li><li><strong>语言间的支持</strong>：允许 C++ 和 Python 之间的无缝互联</li><li><strong>内存</strong>：覆盖Pool程序库和智能指针等</li><li><strong>杂项</strong>：包括 CRC 校验、日期和时间的处理、文件系统等内容</li></ul><p>总的来说，Boost 是一个社群，也是个网站。致力于免费、源码开放、同行复审的 C++ 程序库开发，非常值得经常访问与学习。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DEBUG-HACKS 符号重定向</title>
      <link href="/2022/10/13/debug-hacks-0-gcc-wrap/"/>
      <url>/2022/10/13/debug-hacks-0-gcc-wrap/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>GCC的<code>--wrap=symbol</code>或<code>--wrap,symbol</code>是一个链接器选项，可以重定向未定义的符号。要配合<code>-Wl,&lt;options&gt;</code>使用，表明是一个链接器选项。具体作用如下：</p><ul><li>如果符号<code>symbol</code><strong>未在当前</strong>编译单元中（一般为当前源文件）定义，则链接到符号<code>__wrap_symbol</code>;</li><li>如果符号<code>__real_symbol</code><strong>未在当前</strong>编译单元中（一般为当前源文件）定义，则链接到符号<code>symbol</code>;</li></ul><p>这方便我们在移植代码时，将已有的库函数（不兼容新平台）重定向到新的自定义函数，而又不需要对每处函数调用进行修改；或者在调试代码时，对目标函数包装一下，以监视其行为而又不需要修改函数本身。</p><h1>重定向自定义函数</h1><p>自定义的功能函数代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;foo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;call foo\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_foo</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_foo</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>重定向代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrap.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __real_foo(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">void</span> __wrap_foo(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;call __wrap_foo\n&quot;</span>);</span><br><span class="line">    __real_foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;foo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;foo(): &quot;</span>);</span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;call_foo(): &quot;</span>);</span><br><span class="line">    call_foo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists.txt:</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMakeLists.txt </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.6</span>)</span><br><span class="line"><span class="keyword">project</span>(wrap_foo)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_FLAGS <span class="string">&quot;$&#123;CMAKE_C_FLAGS&#125; -g -Wl,--wrap,foo&quot;</span>)</span><br><span class="line"><span class="keyword">add_executable</span>(wrap_foo main.c foo.c wrap.c)</span><br></pre></td></tr></table></figure><p>准备好上述文件后，编译执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br><span class="line">./wrap_foo</span><br></pre></td></tr></table></figure><p>有如下打印：</p><blockquote><p>foo(): call __wrap_foo<br>call foo<br>call_foo(): call foo</p></blockquote><p>注意，<code>call_foo</code>函数中调用的 <code>foo</code>函数并没有被重定向，是因为其跟<code>foo</code>函数的定义在同一源文件，链接器能找到<code>foo</code>的定义就不会重定向。可以通过<code>objdump</code>命令查看汇编以确认链接情况：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">objdump -d wrap_foo &gt; wrap_foo.asm</span><br></pre></td></tr></table></figure><p>摘取<code>main</code>和<code>call_foo</code>部分如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">000000000000068a &lt;main&gt;:</span><br><span class="line"> 68a:55                   push   %rbp</span><br><span class="line"> 68b:48 89 e5             mov    %rsp,%rbp</span><br><span class="line"> 68e:48 8d 3d ef 00 00 00 lea    0xef(%rip),%rdi        # 784 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line"> 695:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line"> 69a:e8 c1 fe ff ff       callq  560 &lt;printf@plt&gt;</span><br><span class="line"> 69f:e8 3c 00 00 00       callq  6e0 &lt;__wrap_foo&gt;</span><br><span class="line"> 6a4:48 8d 3d e1 00 00 00 lea    0xe1(%rip),%rdi        # 78c &lt;_IO_stdin_used+0xc&gt;</span><br><span class="line"> 6ab:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line"> 6b0:e8 ab fe ff ff       callq  560 &lt;printf@plt&gt;</span><br><span class="line"> 6b5:e8 1a 00 00 00       callq  6d4 &lt;call_foo&gt;</span><br><span class="line"> 6ba:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line"> 6bf:5d                   pop    %rbp</span><br><span class="line"> 6c0:c3                   retq   </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">00000000000006d4 &lt;call_foo&gt;:</span><br><span class="line"> 6d4:55                   push   %rbp</span><br><span class="line"> 6d5:48 89 e5             mov    %rsp,%rbp</span><br><span class="line"> 6d8:e8 e4 ff ff ff       callq  6c1 &lt;foo&gt;</span><br><span class="line"> 6dd:90                   nop</span><br><span class="line"> 6de:5d                   pop    %rbp</span><br><span class="line"> 6df:c3                   retq   </span><br></pre></td></tr></table></figure><h1>重定向系统函数（malloc）</h1><p>wrap的一个常见用途就是包装malloc函数以监控内存申请情况，或者在某些嵌入式平台上重定向到该平台所支持的内存管理模块。一个简单的测试用例如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrap.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* __real_malloc(<span class="keyword">size_t</span> size);<span class="comment">// 只声明不定义</span></span><br><span class="line"><span class="keyword">void</span>* __wrap_malloc(<span class="keyword">size_t</span> size)                        <span class="comment">// 定义__wrap_malloc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;__wrap_malloc called, size:%zd\n&quot;</span>, size);   <span class="comment">// log输出</span></span><br><span class="line">    <span class="keyword">return</span> __real_malloc(size);                         <span class="comment">// 通过__real_malloc调用真正的malloc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __real_free(<span class="keyword">void</span>* ptr); <span class="comment">// 只声明不定义</span></span><br><span class="line"><span class="keyword">void</span> __wrap_free(<span class="keyword">void</span>* ptr)                             <span class="comment">// 定义__wrap_free</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;__wrap_free called\n&quot;</span>);                     <span class="comment">// log输出</span></span><br><span class="line">    __real_free(ptr);                                   <span class="comment">// 通过__real_free调用真正的free</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* c = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));  <span class="comment">// 调用malloc</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c = %p\n&quot;</span>, c);</span><br><span class="line">    <span class="built_in">free</span>(c);                                <span class="comment">// 调用free</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">// CMakeLists.txt</span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(wrap_malloc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_FLAGS <span class="string">&quot;$&#123;CMAKE_C_FLAGS&#125; -g -Wl,--wrap,malloc -Wl,--wrap,free&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -g -Wl,--wrap,malloc -Wl,--wrap,free&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(wrap_malloc main.cpp wrap.c)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br><span class="line">./wrap_malloc</span><br><span class="line">objdump -d wrap_malloc &gt; wrap_malloc.asm</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">000000000000071a &lt;main&gt;:</span><br><span class="line"> 71a:55                   push   %rbp</span><br><span class="line"> 71b:48 89 e5             mov    %rsp,%rbp</span><br><span class="line"> 71e:48 83 ec 10          sub    $0x10,%rsp</span><br><span class="line"> 722:bf 01 00 00 00       mov    $0x1,%edi</span><br><span class="line"> 727:e8 2f 00 00 00       callq  75b &lt;__wrap_malloc&gt;</span><br><span class="line"> 72c:48 89 45 f8          mov    %rax,-0x8(%rbp)</span><br><span class="line"> 730:48 8b 45 f8          mov    -0x8(%rbp),%rax</span><br><span class="line"> 734:48 89 c6             mov    %rax,%rsi</span><br><span class="line"> 737:48 8d 3d 06 01 00 00 lea    0x106(%rip),%rdi        # 844 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line"> 73e:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line"> 743:e8 98 fe ff ff       callq  5e0 &lt;printf@plt&gt;</span><br><span class="line"> 748:48 8b 45 f8          mov    -0x8(%rbp),%rax</span><br><span class="line"> 74c:48 89 c7             mov    %rax,%rdi</span><br><span class="line"> 74f:e8 39 00 00 00       callq  78d &lt;__wrap_free&gt;</span><br><span class="line"> 754:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line"> 759:c9                   leaveq </span><br><span class="line"> 75a:c3                   retq   </span><br></pre></td></tr></table></figure><p>执行有如下打印：</p><blockquote><p>__wrap_malloc called, size:1</p><p>c = 0x563621af1670</p><p>__wrap_free called</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> gcc </tag>
            
            <tag> wrap </tag>
            
            <tag> malloc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DEBUG-HACKS 内核转储与GDB调试</title>
      <link href="/2022/10/11/debug-hacks-1-core-dumped/"/>
      <url>/2022/10/11/debug-hacks-1-core-dumped/</url>
      
        <content type="html"><![CDATA[<h1>获取用户进程的内核转储</h1><p>获取内核转储（core dump）的最大好处是，能保存问题发生时的状态。</p><h2 id="启用内核转储">启用内核转储</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -c<span class="comment"># 查看转储文件大小限制</span></span><br><span class="line"><span class="built_in">ulimit</span> -c unlimited<span class="comment"># 不限制内核转储文件大小，开启内核转储，仅对当前shell有效</span></span><br></pre></td></tr></table></figure><p>可以将<code>ulimit -c unlimited</code>添加到<code>~/.bashrc</code>中，使得每次打开shell都会生效。编写一个会产生<code>Segmentation fault</code>的代码文件<code>segfault.c</code>：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *a = <span class="literal">NULL</span>;</span><br><span class="line">    *a = <span class="number">0x1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用gcc编译并执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -g segfault.c<span class="comment"># -g 可执行程序包含调试信息</span></span><br><span class="line">./a.out<span class="comment"># Segmentation fault (core dumped)</span></span><br></pre></td></tr></table></figure><p>当前目录下生成<code>core</code>文件，用GDB调试生成的core文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb -c core ./a.out</span><br></pre></td></tr></table></figure><p>有如下打印：</p><blockquote><p>…</p><p>Reading symbols from ./a.out…done.<br>[New LWP 15050]<br>Core was generated by `./a.out’.<br>Program terminated with signal SIGSEGV, Segmentation fault.<br>#0  0x000056149ce0060a in main () at segfault.c:5<br>5           *a = 0x1;<br>(gdb)</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) l 5<span class="comment"># gdb list 指令，查看第5行附近的代码</span></span><br></pre></td></tr></table></figure><h2 id="在专用目录中生成内核转储">在专用目录中生成内核转储</h2><p>打开<code>/etc/sysctl.conf</code>并添加如下配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kernel.core_pattern = /root/code/core/%t-%e-%p-%c.core</span><br><span class="line">kernel.core_uses_pid = 0<span class="comment"># 设置为1，则会在文件名尾添加.PID</span></span><br></pre></td></tr></table></figure><p>其中，<code>%t-%e-%p-%c</code>依次为生成内核转储的时刻-进程名-PID-内核转储最大尺寸。尝试生成core dumped文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /root/code/core</span><br><span class="line">sysctl -p<span class="comment"># 使能配置</span></span><br><span class="line">./a.out<span class="comment"># 执行</span></span><br><span class="line">ls /root/code/core<span class="comment"># 1665540532-a.out-19306-18446744073709551615.core</span></span><br></pre></td></tr></table></figure><h1>GDB的基本使用方法</h1><h2 id="带着调试选项编译、构建调试对象">带着调试选项编译、构建调试对象</h2><p>通过gcc的<code>-g</code>选项生成调试信息：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -Wall -O2 -g xxx.c</span><br></pre></td></tr></table></figure><p>如果使用Makefile构建，一般要给<code>CFLAGS</code>中指定<code>-g</code>选项：</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CFLAGS=-Wall -O2 -g</span><br></pre></td></tr></table></figure><p><code>-Wall</code>是生成所有警告信息，<code>-Werror</code>是将警告信息当作错误。</p><h2 id="启动GDB">启动GDB</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb 可执行文件名</span><br><span class="line">(gdb) <span class="built_in">set</span> args -a xxx -b yyy<span class="comment"># 设置参数</span></span><br></pre></td></tr></table></figure><h2 id="设置断点">设置断点</h2><p>gdb启动后，执行<code>break</code>命令，简写为<code>b</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">break</span> 函数名</span><br><span class="line"><span class="built_in">break</span> 行号</span><br><span class="line"><span class="built_in">break</span> 文件名:行号</span><br><span class="line"><span class="built_in">break</span> 文件名:函数名</span><br><span class="line"><span class="built_in">break</span> +偏移量  <span class="comment"># 当前暂停位置往后+偏移量行</span></span><br><span class="line"><span class="built_in">break</span> -偏移量</span><br><span class="line"><span class="built_in">break</span> *地址</span><br><span class="line"><span class="built_in">break</span><span class="comment"># 下一行代码设置断点</span></span><br><span class="line">info <span class="built_in">break</span><span class="comment"># 打印设置好的断点</span></span><br></pre></td></tr></table></figure><h2 id="运行">运行</h2><p>用<code>run</code>命令开始运行，简写为<code>r</code>，会执行到断点处暂停运行。<code>start</code>命令会执行到main函数开始处暂停运行。</p><h2 id="显示栈帧">显示栈帧</h2><p>用<code>backtrace</code>命令可以在遇到断点暂停时显示栈帧，简写为<code>bt</code>，别名<code>where</code>和<code>info stask</code>（简写为<code>info s</code>）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bt<span class="comment"># 显示所有栈帧</span></span><br><span class="line">bt N<span class="comment"># 只显示开头N个栈帧</span></span><br><span class="line">bt -N<span class="comment"># 只显示最后N个栈帧</span></span><br><span class="line">bt full <span class="comment"># 显示栈帧还有局部变量，也可跟上 N/-N</span></span><br></pre></td></tr></table></figure><h2 id="显示变量">显示变量</h2><p>用<code>print</code>命令可以显示变量，简写为<code>p</code>。</p><p>用<code>p/格式 变量</code>可以控制显示的格式，可用的格式如下：</p><table><thead><tr><th style="text-align:center">格式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">x</td><td style="text-align:center">显示为十六进制数</td></tr><tr><td style="text-align:center">d</td><td style="text-align:center">显示为十进制数</td></tr><tr><td style="text-align:center">u</td><td style="text-align:center">显示为无符号十进制数</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">显示为八进制数</td></tr><tr><td style="text-align:center">t</td><td style="text-align:center">显示为二进制，t来自于two</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">地址</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">显示为字符（ascii）</td></tr><tr><td style="text-align:center">f</td><td style="text-align:center">浮点数</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">显示为字符串</td></tr><tr><td style="text-align:center">i</td><td style="text-align:center">显示为机器语言（仅在显示内存的<code>x</code>命令中可见）</td></tr></tbody></table><h2 id="显示寄存器">显示寄存器</h2><p>用<code>info registers</code>可以显示寄存器，简写为info reg。</p><p>用<code>print</code>命令在寄存器名之前加<code>$</code>，可显示寄存器的内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">p <span class="variable">$r1</span></span><br></pre></td></tr></table></figure><p>用<code>x</code>命令（来自于eXamining）可以显示内存的内容，格式为<code>x/[数量][格式][单位] 地址</code>。可用的单位有：</p><table><thead><tr><th style="text-align:center">单位</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">b</td><td style="text-align:center">字节</td></tr><tr><td style="text-align:center">h</td><td style="text-align:center">半字（2字节）</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">字（4字节）（默认）</td></tr><tr><td style="text-align:center">g</td><td style="text-align:center">双字（8字节）</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x <span class="variable">$pc</span></span><br><span class="line">x/i <span class="variable">$pc</span><span class="comment"># 显示一条汇编指令</span></span><br><span class="line">x/10i <span class="variable">$pc</span> <span class="comment"># 显示十条汇编指令</span></span><br><span class="line">x/10dw arr<span class="comment"># 显示arr数组中前10个元素，以int（4字节十进制）方式显示</span></span><br></pre></td></tr></table></figure><p>也可用<code>dissassemble</code>命令进行反汇编，简写为<code>disas</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">disas<span class="comment"># 反汇编当前整个函数</span></span><br><span class="line">disas <span class="variable">$pc</span><span class="comment"># 反汇编程序计数器所在函数的整个函数</span></span><br><span class="line">disas <span class="variable">$pc</span>,<span class="variable">$pc</span>+10<span class="comment"># 反汇编从开始地址到结束地址之间的部分</span></span><br></pre></td></tr></table></figure><h2 id="单步执行">单步执行</h2><p><code>next</code>命令执行源代码中的一行，简写为<code>n</code>。</p><p><code>step</code>命令执行到函数内部，简写为<code>s</code>。</p><p>如果要逐条执行汇编指令，可以分别使用<code>nexti</code>和<code>stepi</code>，简写为<code>ni</code>和<code>si</code>。</p><h2 id="继续执行">继续执行</h2><p>用<code>continue</code>命令继续运行程序，会在遇到断点时再次暂停，如没有遇到断点，会一直执行到结束，简写为<code>c</code>。后面可以加数字<code>N</code>，表示再次遇到<strong>当前所在</strong>的断点会跳过N次。</p><h2 id="监视点">监视点</h2><p>使用<code>watch</code>/<code>awatch</code>/<code>rwatch</code>命令监视变量在何处被改变/访问:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch &lt;表达式&gt;<span class="comment"># &lt;表达式&gt;发生变化(write)时暂停运行</span></span><br><span class="line">awatch &lt;表达式&gt;<span class="comment"># &lt;表达式&gt;被访问(read)或发生变化(write)时暂停运行</span></span><br><span class="line">rwatch &lt;表达式&gt;<span class="comment"># &lt;表达式&gt;被访问(read)时暂停运行</span></span><br></pre></td></tr></table></figure><h2 id="删除断点和监视点">删除断点和监视点</h2><p>使用<code>delete</code>命令删除断点和监视点，格式为<code>delete &lt;编号&gt;</code>，简写为<code>d</code>。</p><h2 id="改变变量的值">改变变量的值</h2><p><code>set variable &lt;变量&gt;=&lt;表达式&gt;</code>可以在运行时随意修改变量的值，无须修改源代码就能确定各种值的情况。</p><p>也可以随意定义变量，变量以<code>$</code>开头，由英文字母和数字组成。</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="variable">$my_val</span>=100</span><br><span class="line">p <span class="variable">$my_val</span><span class="comment"># $1 = 100</span></span><br></pre></td></tr></table></figure><h2 id="生成内核转储文件">生成内核转储文件</h2><p>使用<code>generate-core-file</code>可将调试中的进程生成内核转储文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb &lt;可执行文件&gt;</span><br><span class="line">(gdb) start</span><br><span class="line">...<span class="comment"># 其他调试操作</span></span><br><span class="line">(gdb) generate-core-file<span class="comment"># Saved corefile core.4858</span></span><br></pre></td></tr></table></figure><p>有了内核转储文件，以后就能查看生成转储文件时的运行历史（寄存器值、内存值等）。</p><p>此外，<code>gcore</code>命令可以从命令行直接生成内核转储文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcore &lt;pid&gt;<span class="comment"># pid 为 待分析的进程号</span></span><br></pre></td></tr></table></figure><p>这样可以无需停止正在运行的程序以获取内核转储文件。</p><h2 id="attach-到进程">attach 到进程</h2><p>一个示例，<code>hello.cpp</code>文件如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_me_the_money</span><span class="params">(<span class="keyword">int</span> money)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;before while, money = %d \n&quot;</span>, money);</span><br><span class="line">    <span class="keyword">while</span>(flag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after while, money = %d \n&quot;</span>, money);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">show_me_the_money</span>(money);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -g hello.cpp -o hello</span><br><span class="line">./hello<span class="comment"># before while, money = 5</span></span><br></pre></td></tr></table></figure><p>程序会卡在死循环里，另开一个终端，先通过<code>ps aux|grep hello</code>查看进程ID，然后可以通过GDB attach到该进程：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux|grep hello<span class="comment"># 第二列为pid</span></span><br><span class="line">gdb attach &lt;pid&gt;</span><br><span class="line">(gdb) bt<span class="comment"># 显示栈帧，观察卡死程序是通过怎么样的调用途径陷入等待状态</span></span><br><span class="line">(gdb) p flag<span class="comment"># $1 = true</span></span><br><span class="line">(gdb) <span class="built_in">set</span> variable flag=<span class="literal">false</span><span class="comment"># 手动修改flag，解除死循环</span></span><br><span class="line">(gdb) c<span class="comment"># 继续执行</span></span><br><span class="line"><span class="comment"># Continuing.</span></span><br><span class="line"><span class="comment"># [Inferior 1 (process 19216) exited normally]</span></span><br></pre></td></tr></table></figure><p>这时发现原终端中卡死的程序也执行完毕。此外，在GDB中可以通过<code>info proc</code>查看进程信息，通过<code>detach</code>命令与进程分离。</p><h2 id="条件断点">条件断点</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">break</span> 断点 <span class="keyword">if</span> 条件<span class="comment"># 条件为真则在断点处暂停</span></span><br><span class="line">condition 断点编号 条件   <span class="comment"># 为已有断点添加条件</span></span><br><span class="line">condition 断点编号<span class="comment"># 为已有断点删除条件</span></span><br></pre></td></tr></table></figure><h2 id="反复执行">反复执行</h2><p>以下命令可以执行指定次数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ignore 断点编号 次数<span class="comment"># 编号指定的断点、监视点、捕获点忽略指定的次数</span></span><br><span class="line"><span class="built_in">continue</span> 次数  <span class="comment"># 达到指定次数前，执行到断点时不暂停</span></span><br><span class="line">step 次数 <span class="comment"># 单步步入指定次数</span></span><br><span class="line">stepi 次数 <span class="comment"># 单步步入汇编指令指定次数</span></span><br><span class="line">next 次数 <span class="comment"># 单步执行指定次数</span></span><br><span class="line">next 次数 <span class="comment"># 单步执行汇编指令指定次数</span></span><br></pre></td></tr></table></figure><p><code>finish</code>命令可以执行完当前函数后暂停，<code>until</code>命令执行完当前代码块后暂停，常用于跳出循环。</p><h2 id="删除断点和禁用断点">删除断点和禁用断点</h2><p><code>clear</code>命令也可以用来删除断点，与<code>delete</code>的参数不同：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clear  <span class="comment"># 删除所有断点</span></span><br><span class="line">clear 函数名  <span class="comment"># 删除函数入口处的断点</span></span><br><span class="line">clear 行号  <span class="comment"># 删除行号处的断点</span></span><br><span class="line">clear 文件名:行号</span><br><span class="line">clear 文件名:函数名</span><br><span class="line">delete [breakpoints] 断点编号   <span class="comment"># breakpoints关键字 可省略</span></span><br></pre></td></tr></table></figure><p><code>disable</code>命令可以临时禁用断点，breakpoints关键字可省略：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">disable</span> [breakpoints]<span class="comment"># 禁用所有断点</span></span><br><span class="line"><span class="built_in">disable</span> [breakpoints] 断点编号  <span class="comment"># 禁用指定的断点</span></span><br><span class="line"><span class="built_in">disable</span> display 显示编号  <span class="comment"># 禁用display命令定义的自动显示</span></span><br><span class="line"><span class="built_in">disable</span> mem 内存区域  <span class="comment"># 禁用mem命令定义的内存区域</span></span><br></pre></td></tr></table></figure><p>相反地，可以使用<code>enable</code>命令使能断点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable [breakpoints]# 启用所有断点</span><br><span class="line">enable [breakpoints] 断点编号 # 启用指定的断点</span><br><span class="line">enable [breakpoints] once 断点编号 # 启用指定断点一次，程序运行到该断点并暂停后，被禁用</span><br><span class="line">enable [breakpoints] delete 断点编号 # 启用指定断点一次，程序运行到该断点并暂停后，被删除</span><br><span class="line">enable display 显示编号 # 启用display命令定义的自动显示</span><br><span class="line">enable mem 内存区域 # 启用mem命令定义的内存区域</span><br></pre></td></tr></table></figure><h2 id="断点命令">断点命令</h2><p><code>commands</code>命令可以定义在断点暂停后自动执行的命令，格式如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commands 断点编号</span><br><span class="line">命令</span><br><span class="line">...</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>此外，如果命令的第一行为<code>silent</code>命令，就不会显示在断点处暂停的信息，单独进行信息输出时这点很有用。</p><h2 id="常用命令汇总">常用命令汇总</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">简写</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">backtrace</td><td style="text-align:center">bt、where</td><td style="text-align:center">显示栈帧</td></tr><tr><td style="text-align:center">break</td><td style="text-align:center">b</td><td style="text-align:center">设置断点</td></tr><tr><td style="text-align:center">continue</td><td style="text-align:center">c</td><td style="text-align:center">继续执行</td></tr><tr><td style="text-align:center">delete</td><td style="text-align:center">d</td><td style="text-align:center">删除断点</td></tr><tr><td style="text-align:center">finish</td><td style="text-align:center"></td><td style="text-align:center">运行到函数结束</td></tr><tr><td style="text-align:center">info breakpoints</td><td style="text-align:center">i b</td><td style="text-align:center">显示断点信息</td></tr><tr><td style="text-align:center">next</td><td style="text-align:center">n</td><td style="text-align:center">单步执行</td></tr><tr><td style="text-align:center">print</td><td style="text-align:center">p</td><td style="text-align:center">显示表达式</td></tr><tr><td style="text-align:center">run</td><td style="text-align:center">r</td><td style="text-align:center">运行程序</td></tr><tr><td style="text-align:center">step</td><td style="text-align:center">s</td><td style="text-align:center">单步步入</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center"></td><td style="text-align:center">显示内存内容</td></tr><tr><td style="text-align:center">until</td><td style="text-align:center">u</td><td style="text-align:center">执行到代码块结束</td></tr><tr><td style="text-align:center"><strong>其他非常用指令</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">directory</td><td style="text-align:center">dir</td><td style="text-align:center">插入目录</td></tr><tr><td style="text-align:center">disable</td><td style="text-align:center">dis</td><td style="text-align:center">禁用断点等</td></tr><tr><td style="text-align:center">down</td><td style="text-align:center">do</td><td style="text-align:center">在当前调用的栈帧中选择要显示的栈帧</td></tr><tr><td style="text-align:center">edit</td><td style="text-align:center">e</td><td style="text-align:center">编辑文件或函数</td></tr><tr><td style="text-align:center">frame</td><td style="text-align:center">f</td><td style="text-align:center">选择要显示的栈帧</td></tr><tr><td style="text-align:center">forward-search</td><td style="text-align:center">fo</td><td style="text-align:center">向前搜索</td></tr><tr><td style="text-align:center">generate-core-file</td><td style="text-align:center">gcore</td><td style="text-align:center">生成内核转储</td></tr><tr><td style="text-align:center">help</td><td style="text-align:center">h</td><td style="text-align:center">显示帮助一览</td></tr><tr><td style="text-align:center">info</td><td style="text-align:center">i</td><td style="text-align:center">显示信息</td></tr><tr><td style="text-align:center">list</td><td style="text-align:center">l</td><td style="text-align:center">显示函数或行</td></tr><tr><td style="text-align:center">nexti</td><td style="text-align:center">ni</td><td style="text-align:center">汇编指令单步执行</td></tr><tr><td style="text-align:center">print-object</td><td style="text-align:center">po</td><td style="text-align:center">显示目标信息</td></tr><tr><td style="text-align:center">sharedlibrary</td><td style="text-align:center">share</td><td style="text-align:center">加载共享库的符号</td></tr><tr><td style="text-align:center">stepi</td><td style="text-align:center">si</td><td style="text-align:center">执行下一行</td></tr></tbody></table><h2 id="值的历史">值的历史</h2><p>通过<code>print</code>命令显示过的值会记录在内部的值历史中，这些值可以在其他表达式中使用。可以用<code>show value</code>命令显示历史中的最后10个值，其他访问方式如下：</p><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">$</td><td style="text-align:center">值历史的最后一个值</td></tr><tr><td style="text-align:center">$n</td><td style="text-align:center">值历史的第n个值</td></tr><tr><td style="text-align:center">$$</td><td style="text-align:center">值历史的倒数第2个值</td></tr><tr><td style="text-align:center">$$n</td><td style="text-align:center">值历史的倒数第n个值</td></tr><tr><td style="text-align:center">$_</td><td style="text-align:center"><code>x</code>命令显示过的最后的地址</td></tr><tr><td style="text-align:center">$__</td><td style="text-align:center"><code>x</code>命令显示过的最后的地址的值</td></tr><tr><td style="text-align:center">$_exitcode</td><td style="text-align:center">调试中的程序的返回代码</td></tr><tr><td style="text-align:center">$bpnum</td><td style="text-align:center">最后设置的断点编号</td></tr></tbody></table><h2 id="命令定义">命令定义</h2><p>用<code>define</code>命令可以自定义命令，用<code>document</code>命令可以自定义的命令添加说明，用<code>help</code>命令可以查看定义的命令。可以将自定义的命令写到文件中，在gdb调试时通过<code>source</code>命令读取。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># commands file</span></span><br><span class="line">define li</span><br><span class="line">  x/10i <span class="variable">$pc</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document li</span><br><span class="line">  list machine instruction</span><br><span class="line">end</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) <span class="built_in">source</span> &lt;filename&gt;</span><br><span class="line">(gdb) start</span><br><span class="line">(gdb) <span class="built_in">help</span> li<span class="comment"># list machine instruction</span></span><br><span class="line">(gdb) li</span><br></pre></td></tr></table></figure><h1>peda插件</h1><p>peda插件会在程序运行时实时显示寄存器值、汇编代码、栈等信息，更加方便：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gdb插件peda</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/longld/peda.git ~/peda</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/peda/peda.py&quot;</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><h1>GDB进阶操作</h1><h2 id="操作栈帧">操作栈帧</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX         (1UL &lt;&lt; 20)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line">u32 max_addend = MAX;</span><br><span class="line"></span><br><span class="line"><span class="function">u64 <span class="title">sum_till_MAX</span><span class="params">(u32 n)</span> </span>&#123;</span><br><span class="line">    u64 sum;</span><br><span class="line">    n++;</span><br><span class="line">    sum = n;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; max_addend) &#123;</span><br><span class="line">        sum += sum_till_MAX(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    u64 sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((argc == <span class="number">2</span>) &amp;&amp; <span class="built_in">isdigit</span>(*(argv[<span class="number">1</span>]))) &#123;</span><br><span class="line">        max_addend = strtoul(argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (max_addend &gt; MAX || max_addend == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Invalid number is specified\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum = sum_till_MAX(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum(0..%u) = %llu\n&quot;</span>, max_addend, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>bt</code>命令查看栈帧情况：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o sum -g sum.c</span><br><span class="line">gdb sum</span><br><span class="line">(gdb) <span class="built_in">set</span> args 10</span><br><span class="line">(gdb) b 15</span><br><span class="line">(gdb) r</span><br><span class="line">(gdb) c 4</span><br><span class="line">(gdb) bt</span><br></pre></td></tr></table></figure><p>打印如下：</p><blockquote><p>#0  sum_till_MAX (n=0x5) at sum.c:15<br>#1  0x00005555554007a5 in sum_till_MAX (n=0x4) at sum.c:17<br>#2  0x00005555554007a5 in sum_till_MAX (n=0x3) at sum.c:17<br>#3  0x00005555554007a5 in sum_till_MAX (n=0x2) at sum.c:17<br>#4  0x00005555554007a5 in sum_till_MAX (n=0x1) at sum.c:17<br>#5  0x0000555555400866 in main (argc=0x2, argv=0x7fffffffe408) at sum.c:33<br>#6  0x00007ffff7a03c87 in __libc_start_main (main=0x5555554007af <main>, argc=0x2, argv=0x7fffffffe408, init=<optimized out>, fini=<optimized out>,<br>rtld_fini=<optimized out>, stack_end=0x7fffffffe3f8) at …/csu/libc-start.c:310<br>#7  0x000055555540069a in _start ()</optimized></optimized></optimized></main></p></blockquote><p>用<code>frame</code>命令可以查看当前所在的栈帧信息，用<code>frame N</code>可以跳转到<code>N</code>对应的栈帧，此时可以打印该栈帧下的变量：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) frame</span><br><span class="line"><span class="comment"># #0  sum_till_MAX (n=0x5) at sum.c:15</span></span><br><span class="line"><span class="comment"># 15          sum = n;</span></span><br><span class="line">(gdb) p n</span><br><span class="line"><span class="comment"># $1 = 0x5</span></span><br><span class="line">(gdb) frame 3</span><br><span class="line"><span class="comment"># #3  0x00005555554007a5 in sum_till_MAX (n=0x2) at sum.c:17</span></span><br><span class="line"><span class="comment"># 17              sum += sum_till_MAX(n);</span></span><br><span class="line">(gdb) p n</span><br><span class="line"><span class="comment"># $2 = 0x2</span></span><br></pre></td></tr></table></figure><p>此外，<code>up</code>命令可以选择上一层的帧，<code>down</code>命令可以选择下一层的帧。使用<code>info frame N</code>可以显示更为详细的栈帧信息。</p><h2 id="调试栈溢出">调试栈溢出</h2><p>上述的<code>sum.c</code>程序在不指定参数的情况下执行，会调用2^20次<code>sum_till_MAX</code>函数，每次调用都会生成栈帧，消耗栈空间，从而发生了栈溢出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb sum</span><br><span class="line">(gdb) r </span><br></pre></td></tr></table></figure><blockquote><p>Stopped reason: SIGSEGV<br>0x0000555555400782 in sum_till_MAX (n=&lt;error reading variable: Cannot access memory at address 0x7fffff7fefec&gt;) at sum.c:12<br>12      u64 sum_till_MAX(u32 n)</p></blockquote><p>这时可以查看一下程序计数器PC和栈指针SP的情况（如果使用peda，可以直接查看寄存器RIP和RSP）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x/i $pc # =&gt; 0x555555400782 &lt;sum_till_MAX+8&gt;:     mov    DWORD PTR [rbp-0x14],edi</span><br><span class="line">p $sp # $1 = (void *) 0x7fffff7fefe0</span><br></pre></td></tr></table></figure><p>可以用<code>i proc mapping</code>命令查看进程的内存映射情况，其显示的是被调试进程对应的<code>/proc/&lt;PID&gt;/maps</code>的信息：</p><blockquote><p>process 6024<br>Mapped address spaces:<br>Start Addr           End Addr       Size     Offset objfile<br>0x555555400000     0x555555401000     0x1000        0x0 /root/code/debug_hacks/stack_status/sum<br>0x555555600000     0x555555601000     0x1000        0x0 /root/code/debug_hacks/stack_status/sum<br>0x555555601000     0x555555602000     0x1000     0x1000 /root/code/debug_hacks/stack_status/sum<br>0x7ffff79e2000     0x7ffff7bc9000   0x1e7000        0x0 /lib/x86_64-linux-gnu/libc-2.27.so<br>0x7ffff7bc9000     0x7ffff7dc9000   0x200000   0x1e7000 /lib/x86_64-linux-gnu/libc-2.27.so<br>0x7ffff7dc9000     0x7ffff7dcd000     0x4000   0x1e7000 /lib/x86_64-linux-gnu/libc-2.27.so<br>0x7ffff7dcd000     0x7ffff7dcf000     0x2000   0x1eb000 /lib/x86_64-linux-gnu/libc-2.27.so<br>0x7ffff7dcf000     0x7ffff7dd3000     0x4000        0x0<br>0x7ffff7dd3000     0x7ffff7dfc000    0x29000        0x0 /lib/x86_64-linux-gnu/ld-2.27.so<br>0x7ffff7ff0000     0x7ffff7ff2000     0x2000        0x0<br>0x7ffff7ff7000     0x7ffff7ffb000     0x4000        0x0 [vvar]<br>0x7ffff7ffb000     0x7ffff7ffc000     0x1000        0x0 [vdso]<br>0x7ffff7ffc000     0x7ffff7ffd000     0x1000    0x29000 /lib/x86_64-linux-gnu/ld-2.27.so<br>0x7ffff7ffd000     0x7ffff7ffe000     0x1000    0x2a000 /lib/x86_64-linux-gnu/ld-2.27.so<br>0x7ffff7ffe000     0x7ffff7fff000     0x1000        0x0<br><strong>0x7fffff7ff000     0x7ffffffff000   0x800000        0x0 [stack]</strong></p></blockquote><p>其中最后一行显示了该进程栈空间的起始（栈顶）、结束（栈底）地址和大小，而上面看到栈指针的值<code>0x7fffff7fefe0</code>已经超出了栈的范围，发生了栈溢出。</p><p>由于<code>i proc mapping</code>命令会打开<code>/proc/&lt;PID&gt;/maps</code>，因此在分析core dump时无法使用，这时我们可以用<code>info files</code>或<code>info target</code>命令来查看：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sum<span class="comment"># Segmentation fault (core dumped)</span></span><br><span class="line">gdb sum -c &lt;core-file&gt;</span><br></pre></td></tr></table></figure><blockquote><p>…<br>[New LWP 23248]<br>Core was generated by `./sum’.<br>Program terminated with signal SIGSEGV, Segmentation fault.<br>#0  0x0000563aeac00782 in sum_till_MAX (n=&lt;error reading variable: Cannot access memory at address <strong>0x7ffdec051ffc</strong>&gt;) at sum.c:12<br>12      u64 sum_till_MAX(u32 n) {</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">p <span class="variable">$sp</span><span class="comment"># $1 = (void *) 0x7ffdec051ff0</span></span><br><span class="line">(gdb) info target</span><br></pre></td></tr></table></figure><blockquote><p>​0x0000563aeac00000 - 0x0000563aeac01000 is load1<br>​        0x0000563aeae00000 - 0x0000563aeae01000 is load2<br>​        0x0000563aeae01000 - 0x0000563aeae02000 is load3<br>​        0x00007f4114b9a000 - 0x00007f4114b9b000 is load4a<br>​        0x00007f4114b9b000 - 0x00007f4114b9b000 is load4b<br>​        0x00007f4114d81000 - 0x00007f4114d81000 is load5<br>​        0x00007f4114f81000 - 0x00007f4114f85000 is load6<br>​        0x00007f4114f85000 - 0x00007f4114f87000 is load7<br>​        0x00007f4114f87000 - 0x00007f4114f8b000 is load8<br>​        0x00007f4114f8b000 - 0x00007f4114f8c000 is load9a<br>​        0x00007f4114f8c000 - 0x00007f4114f8c000 is load9b<br>​        0x00007f41151ad000 - 0x00007f41151af000 is load10<br>​        0x00007f41151b4000 - 0x00007f41151b5000 is load11<br>​        0x00007f41151b5000 - 0x00007f41151b6000 is load12<br>​        0x00007f41151b6000 - 0x00007f41151b7000 is load13<br>​        <strong>0x00007ffdec052000 - 0x00007ffdec852000 is load14</strong><br>​        0x00007ffdec886000 - 0x00007ffdec88a000 is load15<br>​        0x00007ffdec88a000 - 0x00007ffdec88b000 is load16</p></blockquote><p>这里并没有具体显示栈空间，但可以推断出<code>load14</code>便是，可以通过<code>bt</code>和<code>info frame</code>命令进一步确认：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) bt 3</span><br></pre></td></tr></table></figure><blockquote><p>#0  <strong>0x0000563aeac00782</strong> in sum_till_MAX (n=&lt;error reading variable: Cannot access memory at address 0x7ffdec051ffc&gt;) at sum.c:12<br>#1  0x0000563aeac007a5 in sum_till_MAX (n=0x2aa5c) at sum.c:17<br>#2  0x0000563aeac007a5 in sum_till_MAX (n=0x2aa5b) at sum.c:17</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) i f 0</span><br></pre></td></tr></table></figure><blockquote><p>Stack frame at <strong>0x7ffdec052020</strong>:<br>rip = <strong>0x563aeac00782</strong> in sum_till_MAX (sum.c:12); saved rip = 0x563aeac007a5<br>called by frame at 0x7ffdec052050<br>source language c.<br>Arglist at 0x7ffdec052010, args: n=&lt;error reading variable: Cannot access memory at address 0x7ffdec051ffc&gt;<br>Locals at 0x7ffdec052010, Previous frame’s sp is 0x7ffdec052020<br>Saved registers:<br>rbp at 0x7ffdec052010, rip at 0x7ffdec052018</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) bt -3</span><br></pre></td></tr></table></figure><blockquote><p>#<strong>174685</strong> 0x0000563aeac00866 in <strong>main</strong> (argc=0x1, argv=0x7ffdec851268) at sum.c:33<br>#174686 0x00007f4114bbbc87 in __libc_start_main (main=0x563aeac007af <main>, argc=0x1, argv=0x7ffdec851268, init=<optimized out>, fini=<optimized out>,<br>rtld_fini=<optimized out>, stack_end=0x7ffdec851258) at …/csu/libc-start.c:310<br>#174687 0x0000563aeac0069a in _start ()</optimized></optimized></optimized></main></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) i f 174685</span><br></pre></td></tr></table></figure><blockquote><p>Stack frame at <strong>0x7ffdec851190</strong>:<br>rip = 0x563aeac00866 in main (sum.c:33); saved rip = 0x7f4114bbbc87<br>called by frame at 0x7ffdec851250, caller of frame at 0x7ffdec851160<br>source language c.<br>Arglist at 0x7ffdec851180, args: argc=0x1, argv=0x7ffdec851268<br>Locals at 0x7ffdec851180, Previous frame’s sp is 0x7ffdec851190<br>Saved registers:</p><p>rbp at 0x7ffdec851180, rip at 0x7ffdec851188</p></blockquote><p>可以看到最上层的栈帧地址和<code>main</code>函数的栈帧地址都是在上述范围<code>0x00007ffdec052000 - 0x00007ffdec852000</code>内，而栈指针<code>0x7ffdec051ff0</code>超出了这个范围，便是发生了栈溢出。</p><p>栈空间的大小可以用<code>ulimit -s</code>查看，可以用<code>ulimit -Ss</code> 修改栈尺寸，从而避免栈溢出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -s<span class="comment"># 8192单位为KB，8M</span></span><br><span class="line"><span class="built_in">ulimit</span> -Ss 81920</span><br><span class="line">./sum<span class="comment"># sum(0..1048576) = 549756338176</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> DEBUG技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++ 读书笔记06</title>
      <link href="/2022/09/25/EffectiveC-6-ReadNote06/"/>
      <url>/2022/09/25/EffectiveC-6-ReadNote06/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>本文是阅读《Effective C++ 改善程序与设计的55个具体做法（第三版）》的心得笔记第六部分，文章也会按照原书的顺序依次记录各个条款。</p><p>第一部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/04/25/EffectiveC-1-ReadNote01/">effective C++ 读书笔记01</a>。</p><p>第二部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/05/06/EffectiveC-2-ReadNote02/">effective C++ 读书笔记02</a>。</p><p>第三部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/05/24/EffectiveC-3-ReadNote03/">effective C++ 读书笔记03</a>。</p><p>第四部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/06/20/EffectiveC-4-ReadNote04/">effective C++ 读书笔记04</a>。</p><p>第五部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/08/31/EffectiveC-5-ReadNote05/">effective C++ 读书笔记05</a>。</p><h1>模板与泛型编程</h1><h2 id="条款41：了解隐式接口和编译期多态">条款41：了解隐式接口和编译期多态</h2><p>classes和templates都支持接口（interfaces）和多态（polymorphism）。</p><p>对于classes而言，接口是<strong>显式</strong>的，多态是通过virtual函数实现的<strong>运行期</strong>多态：</p><ul><li>显式接口由函数签名式（函数名称、参数类型、返回类型）构成，在源码中是明确可见的；</li><li>运行期多态基于virtual函数实现，具体调用哪一个virtual函数的重写，将在运行期根据对象的动态类型决定；</li></ul><p>对于Templates而言，接口时<strong>隐式</strong>的，多态则是通过template具现化和函数重载解析（function overloading resolution）实现的<strong>编译期</strong>多态：</p><ul><li>隐式接口由有效表达式构成，模板类型不定，且考虑上运算符重载等特性，隐式接口的自由度很大；</li><li>编译期多态，在调用template函数是传入不同的类型T，会得到不同的函数，这被称为template具现化，发生在编译期；</li></ul><p>一个例子如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doProcessing</span><span class="params">(T&amp; w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w.<span class="built_in">size</span>() &gt; <span class="number">10</span> &amp;&amp; w != someNastyWidget) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表面上看，上述隐式接口对类型<code>T</code>有如下约束：</p><ol><li>必须提供一个<code>size</code>方法，该方法返回一个整数值；</li><li>必须支持一个<code>operator!=</code>操作符，用来比较两个<code>T</code>对象。这里假设<code>someNastyWidget</code>的类型为T。</li></ol><p>但实际上，隐式接口的灵活度要更大，比如：</p><ol><li><code>T</code>提供的<code>size</code>成员方法可以从基类继承而得；</li><li><code>size</code>方法返回的值类型不必是整数，甚至不必是数值类型。而可以是一个对<code>operator&gt;</code>做了操作符重载（可以与整型比较）的类型<code>X</code>，甚至是可以隐式转换为类型<code>X</code>的类型<code>Y</code>；</li><li>同理，<code>T</code>并不需要支持<code>operator!=</code>，可以是这样：<code>operator!=</code>接受一个类型为<code>X</code>的对象和一个类型为<code>Y</code>的对象，而<code>T</code>可以转换为<code>X</code>，<code>someNastyWidget</code>可以转换为<code>Y</code>。</li></ol><h2 id="条款42：了解typename的双重意义">条款42：了解typename的双重意义</h2><ul><li>在声明模板参数时，前缀关键字<code>class</code>和<code>typename</code>没有区别，如下：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span><span class="comment">// 没有区别</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>typename</code>标识<strong>嵌套从属类型名称</strong>。</li></ul><p>首先明确一下如下几个概念：</p><ol><li><p><strong>从属名称</strong>（dependent names）：template内出现的名称, 相依于某个模板参数, 如<code>T t;</code>；</p></li><li><p><strong>嵌套从属名称</strong>（nested dependent names）：从属名称在嵌套在模板参数所代表的类内，如<code>T::const_iterator ci;</code>；</p></li><li><p><strong>嵌套从属类型名称</strong>（nested dependent type names）：嵌套从属名称指涉的为某类型；</p></li><li><p><strong>非从属名称</strong>（non-dependent names）：template中不依赖于任何模板参数的名称，如<code>int a;</code>；</p></li></ol><p>嵌套从属名称的解析可能<strong>存在歧义</strong>，如下例所示：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">const</span> T&amp; container)</span> </span>&#123;</span><br><span class="line">    T::const_iterator* x;<span class="comment">// 不合法！！！</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即便我已提前知道<code>T::const_iterator</code>是一个类型，而<code>x</code>为该类型的指针变量，但这样的表示并不合法。因为在确定<code>T</code>究竟为何种类型之前，编译器无法断定<code>T::const_iterator</code>是一个类型，它还可能是<code>T</code>中的一个static成员变量，而<code>x</code>是某个全局变量，那上述表达式就构成了一个乘法操作。</p><p>C++解决这一歧义状态的规定是：<strong>缺省状态下，嵌套从属名称不是类型，除非你用<code>typename</code>作为前缀进行标识</strong>。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">const</span> T&amp; container)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typename</span> T::const_iterator* x;<span class="comment">// 合法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>typename</code>只能用来标识嵌套从属名称，而不能用于其他名称。使用范围除了函数内部，还可以用于函数入参。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> T&amp; container,<span class="comment">// 不允许使用typename</span></span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="keyword">typename</span> T::iterator iter)</span></span>;<span class="comment">// 一定要使用typename</span></span><br></pre></td></tr></table></figure><p>上述的规定存在一个例外情况，在<strong>继承的基类列表</strong>和<strong>成员初始化列表</strong>中的嵌套从属类型名称不需要<code>typename</code>作为前缀修饰符。因为这时，嵌套从属名称默认就是一种类型（不存在歧义）。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base&lt;T&gt;::Nested &#123;<span class="comment">// 基类列表，不用typename</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Derived</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">        : Base&lt;T&gt;::Nested(x) &#123;</span><span class="comment">// 初始化列表，不用typename</span></span><br><span class="line">            <span class="keyword">typename</span> Base&lt;T&gt;::Nested temp;<span class="comment">// 嵌套从属类型名称，要用typename</span></span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此外，当<code>typename</code>修饰的类型名称过长时，可以结合<code>typedef</code>一起使用。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IterT&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">workWithIterator</span><span class="params">(IterT iter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//typename std::iterator_traits&lt;IterT&gt;::value_type temp(*iter);</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::iterator_traits&lt;IterT&gt;::value_type value_type;</span><br><span class="line">    <span class="function">value_type <span class="title">temp</span><span class="params">(*iter)</span></span>;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; temp &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">workWithIterator</span>(vec.<span class="built_in">begin</span>());</span><br><span class="line">    <span class="built_in">workWithIterator</span>(vec.<span class="built_in">end</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条款43：学习处理模板化基类内的名称">条款43：学习处理模板化基类内的名称</h2><p>所谓模板化基类，即定义某模板类时，继承于另一模板类<code>Base&lt;T&gt;</code>，这个<code>Base&lt;T&gt;</code>就是模板化基类。看如下这个例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompanyA</span> &#123;</span><span class="comment">// 公司A</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendClearText</span><span class="params">(<span class="keyword">const</span> std::string&amp; msg)</span></span>;<span class="comment">// 发送明文消息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendEncrypted</span><span class="params">(<span class="keyword">const</span> std::string&amp; msg)</span></span>;<span class="comment">// 发送加密消息</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompanyB</span> &#123;</span><span class="comment">// 公司B</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendClearText</span><span class="params">(<span class="keyword">const</span> std::string&amp; msg)</span></span>;<span class="comment">// 发送明文消息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendEncrypted</span><span class="params">(<span class="keyword">const</span> std::string&amp; msg)</span></span>;<span class="comment">// 发送加密消息</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">...<span class="comment">// 其他公司</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MsgInfo</span> &#123;</span> ... &#125;;<span class="comment">// 保存信息，用于产生发送消息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Company&gt;<span class="comment">// 模板化基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MsgSender</span> &#123;</span></span><br><span class="line">    ...<span class="comment">// 构造函数，析构函数等</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendClear</span><span class="params">(<span class="keyword">const</span> MsgInfo&amp; info)</span> </span>&#123;</span><br><span class="line">        std::string msg;</span><br><span class="line">        ...<span class="comment">// 根据info生成消息</span></span><br><span class="line">Company c;</span><br><span class="line">        c.<span class="built_in">sendClearText</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendSecret</span><span class="params">(<span class="keyword">const</span> MsgInfo&amp; info)</span> </span>&#123;</span><br><span class="line">        ...<span class="comment">// 与上类似，但调用c.sendEncrypted</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Company&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingMsgSender</span>:</span> <span class="keyword">public</span> MsgSender&lt;Company&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...<span class="comment">// 构造函数，析构函数等</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendClearMsg</span><span class="params">(<span class="keyword">const</span> MsgInfo&amp; info)</span> </span>&#123;</span><br><span class="line">        ...<span class="comment">// 消息发送前的log</span></span><br><span class="line"><span class="built_in">sendClear</span>(info);<span class="comment">// 编译报错！！！</span></span><br><span class="line">        ...<span class="comment">// 消息发送后的log</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述例子中，<strong>编译器拒绝在编译时在模板化基类中主动寻找继承而来的名称</strong>。因此模板化基类可能会被特化，在特化版本中可能无法提供与一般化的模板类相同的接口。如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompanyZ</span> &#123;</span><span class="comment">// 该公司不支持明文发送消息</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendEncrypted</span><span class="params">(<span class="keyword">const</span> std::string&amp; msg)</span></span>;<span class="comment">// 发送加密消息</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MsgSender</span>&lt;</span>CompanyZ&gt; &#123;<span class="comment">// 针对Z公司的全特化，移除了sendClear</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendSecret</span><span class="params">(<span class="keyword">const</span> MsgInfo&amp; info)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上例所示，当基类被指定为<code>MsgSender&lt;CompanyZ&gt;</code>时，因为其未提供<code>sendClear</code>函数，上述调用代码就是非法的，故C++拒绝在编译时在模板化基类中主动寻找继承而来的名称，而是直接报错。</p><p>若你能够承诺模板化基类的任何特化版本都将支持其泛化版本所提供的接口，有三种方法可以让编译器不再拒绝模板化基类中继承而来的名称：</p><ul><li>使用<code>this-&gt;</code>调用，将转化为运行时问题，推荐；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Company&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingMsgSender</span>:</span> <span class="keyword">public</span> MsgSender&lt;Company&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...<span class="comment">// 构造函数，析构函数等</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendClearMsg</span><span class="params">(<span class="keyword">const</span> MsgInfo&amp; info)</span> </span>&#123;</span><br><span class="line">        ...<span class="comment">// 消息发送前的log</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">sendClear</span>(info);<span class="comment">// OK</span></span><br><span class="line">        ...<span class="comment">// 消息发送后的log</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>使用<code>using</code>声明式，告诉编译器所调用函数在模板化基类中；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Company&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingMsgSender</span>:</span> <span class="keyword">public</span> MsgSender&lt;Company&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> MsgSender&lt;Company&gt;::sendClear;<span class="comment">// 明确告诉编译器sendClear的位置</span></span><br><span class="line">    ...<span class="comment">// 构造函数，析构函数等</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendClearMsg</span><span class="params">(<span class="keyword">const</span> MsgInfo&amp; info)</span> </span>&#123;</span><br><span class="line">        ...<span class="comment">// 消息发送前的log</span></span><br><span class="line"><span class="built_in">sendClear</span>(info);</span><br><span class="line">        ...<span class="comment">// 消息发送后的log</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>显式调用，但会破坏virtual函数的动态绑定行为，不推荐；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Company&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingMsgSender</span>:</span> <span class="keyword">public</span> MsgSender&lt;Company&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...<span class="comment">// 构造函数，析构函数等</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendClearMsg</span><span class="params">(<span class="keyword">const</span> MsgInfo&amp; info)</span> </span>&#123;</span><br><span class="line">        ...<span class="comment">// 消息发送前的log</span></span><br><span class="line">MsgSender&lt;Company&gt;::<span class="built_in">sendClear</span>(info);<span class="comment">// OK</span></span><br><span class="line">        ...<span class="comment">// 消息发送后的log</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但如果你的承诺未能兑现，特化版本与泛化版本不同，即便你做了上述处理，在最终的编译阶段还是会报错：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LoggingMsgSender&lt;CompanyZ&gt; zMsgSender;</span><br><span class="line">MsgInfo msgData;</span><br><span class="line">...</span><br><span class="line">zMsgSender.<span class="built_in">sendClearMsg</span>(msgData);<span class="comment">// 编译报错！！！</span></span><br></pre></td></tr></table></figure><h2 id="条款44：将与参数无关的代码抽离templates">条款44：将与参数无关的代码抽离templates</h2><p>对于非模板代码中，我们一般很容易就能区分两个函数或者类中的重复部分，并将它们提取出来；但是在模板代码中，重复是隐晦的，一些不恰当的设计，会导致模板在多次被具现化的时候产生代码重复，而这不是那么容易能够感知的。考虑如下这个例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="comment">// 正方矩阵元素类型为T</span></span><br><span class="line">std::<span class="keyword">size_t</span> n&gt;<span class="comment">// 正方矩阵尺寸为n x n</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareMatrix</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transpose</span><span class="params">()</span></span>;<span class="comment">// 支持转置操作</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上述例子中，模板类<code>SquareMatrix</code>接受一个类型参数<code>T</code>（常见）和一个非类型参数<code>n</code>（不常见，但合法）。我们可能会有如下的调用代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">SquareMatrix&lt;<span class="keyword">double</span>, <span class="number">5</span>&gt; sm1;</span><br><span class="line">...</span><br><span class="line">sm1.<span class="built_in">transpose</span>();</span><br><span class="line"></span><br><span class="line">SquareMatrix&lt;<span class="keyword">double</span>, <span class="number">10</span>&gt; sm2;</span><br><span class="line">...</span><br><span class="line">sm2.<span class="built_in">transpose</span>();</span><br></pre></td></tr></table></figure><p>模板类被具现化成两个类，同时其成员函数<code>transpose</code>也被具现化成两份，虽然这两份函数实现不完全相同，却也只有矩阵尺寸<code>n</code>的差异，还是存在代码重复。想要规避这无谓的代码膨胀，和非模板代码中的考虑类似，我要将与参数无关的代码抽离。一个实现如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareMatrixBase</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">SquareMatrixBase</span>(std::<span class="keyword">size_t</span> n, T* dataPtr) : <span class="built_in">n_</span>(n), <span class="built_in">dataPtr_</span>(dataPtr) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">baseTranspose</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDataPtr</span><span class="params">(T* dataPtr)</span> </span>&#123;</span><br><span class="line">        dataPtr_ = dataPtr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basePrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n_; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n_; ++j) &#123;</span><br><span class="line">                std::cout &lt;&lt; dataPtr_[i * n_ + j] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            std::cout &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::<span class="keyword">size_t</span> n_;</span><br><span class="line">    T* dataPtr_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> SquareMatrixBase&lt;T&gt;::<span class="built_in">baseTranspose</span>() &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;do transpose: pData = &quot;</span> &lt;&lt; dataPtr_ &lt;&lt; <span class="string">&quot; , size = &quot;</span> &lt;&lt; n_ &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n_; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(dataPtr_[i * n_ + j], dataPtr_[j * n_ + i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, std::<span class="keyword">size_t</span> n&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareMatrix</span> :</span> <span class="keyword">private</span> SquareMatrixBase&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SquareMatrix</span>() </span><br><span class="line">        : SquareMatrixBase&lt;T&gt;(n, <span class="literal">nullptr</span>), </span><br><span class="line">      <span class="built_in">pData_</span>(std::shared_ptr&lt;T&gt;(<span class="keyword">new</span> T[n * n])) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setDataPtr</span>(pData_.<span class="built_in">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transpose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">baseTranspose</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(T* data)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(pData_.<span class="built_in">get</span>(), data, n * n * <span class="built_in"><span class="keyword">sizeof</span></span>(T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">basePrint</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;T&gt; pData_ = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SquareMatrix&lt;<span class="keyword">int</span>, <span class="number">3</span>&gt; sm1;</span><br><span class="line">    <span class="keyword">int</span> mat[<span class="number">3</span> * <span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    sm1.<span class="built_in">setData</span>(mat);</span><br><span class="line">    sm1.<span class="built_in">print</span>();</span><br><span class="line">    sm1.<span class="built_in">transpose</span>();</span><br><span class="line">    sm1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述例子中，实现了一个与尺寸无关的模板化基类，其只对矩阵元素类型参数化，不对矩阵尺寸参数化，所以对于同一元素类型的所有尺寸的具现化矩阵类，都共享同一个成员函数<code>baseTranspose</code>，因此避免了代码重复。此外上述例子还有几个需要注意的点：</p><ul><li><code>SquareMatrix</code>类是private继承<code>SquareMatrixBase</code>类，这表明两者只是实现意义上的复合关系，而不是is-a关系，基类中希望被派生类继承（又不希望被外部访问）的接口被声明为protected；</li><li><code>SquareMatrixBase</code>类持有两个操作数据时用到的成员变量：矩阵数据指针<code>dataPtr_</code>和矩阵尺寸<code>n_</code>，由派生类负责对它们进行初始化，且基类本身并不负责管理资源的申请和销毁，只是有访问权限；</li><li><code>SquareMatrix</code>类中对基类方法的调用采用隐式inline调用（参见条款30），从而调用的额外成本为0；</li><li>对模板化基类中的成员函数名称，需要使用<code>this-&gt;</code>进行调用（参见条款43）；</li><li>如此实现有利有弊，好处在于代码空间变小，其占用的虚拟内存的分页大小也减少，还会减少指令Cache的Cache Miss的概率，这些都可能提高程序执行的效率；但另一方面，基类中的<code>baseTranspose</code>函数的尺寸不定，编译器优化（效率）的程度可能不如尺寸确定的具现化版本。至于两者的影响谁占主导？只能实测确定。</li></ul><p>上面例子只讨论了有非类型参数带来的代码膨胀，其实类型参数也可能会导致代码膨胀。比如在许多平台上，int和long有相同的二进制表述，所以<code>vector&lt;int&gt;</code>和<code>vector&lt;long&gt;</code>的成员函数有可能完全相同，某些链接器可能会合并完全相同的实现码，但有些不会；再比如，在大多数平台上，所有指针类型都有相同的二进制表述，因此若模板持有指针的（如<code>list&lt;int*&gt;</code>，<code>list&lt;SquareMatrix&lt;long, 3&gt;*&gt;</code>等）往往应该对每一个成员函数使用唯一一份底层实现。一个常用的方法就是：若你的某些成员函数操作强数据类型指针<code>T*</code>，那就应该令它们调用另一个操作无类型指针<code>void*</code>的函数，由后者完成实际工作。</p><h2 id="条款45：运用成员函数模板接受所有兼容类型">条款45：运用成员函数模板接受所有兼容类型</h2><p>众所周知，裸指针是支持隐式转换的，例如派生类指针可以隐式转换为基类指针，指向non-const对象的指针可以转换为指向const对象的指针。一个继承体系的示例如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Top</span> &#123;</span> ... &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Middle</span>:</span> <span class="keyword">public</span> Top &#123; ... &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bottom</span>:</span> <span class="keyword">public</span> Middle &#123; ... &#125;;</span><br><span class="line">Top* pt1 = <span class="keyword">new</span> Middle;<span class="comment">// 将Middle* 转换为 Top*</span></span><br><span class="line">Top* pt2 = <span class="keyword">new</span> Bottom;<span class="comment">// 将Bottom* 转换为 Top*</span></span><br><span class="line"><span class="keyword">const</span> Top* pct2 = pt1;<span class="comment">// 将Top* 转换为 const Top* </span></span><br></pre></td></tr></table></figure><p>但是，用户自定的智能指针类如不增加额外的配置是不支持这样的隐式转换的，因为同一个template类对基类和派生类的具现化本身并不带有继承关系。所谓额外的配置就是实现成员（构造）函数模板，接受所有兼容类型的泛化copy构造和泛化copy赋值（之所以使用函数模板，是因为继承体系未来有可能扩充，我们不可能对每一对继承关系都实现出一组构造函数）。一个例子如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Top</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Middle</span> :</span> <span class="keyword">public</span> Top &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bottom</span> :</span> <span class="keyword">public</span> Middle &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">SmartPtr</span><span class="params">(T* rawPtr)</span> : rawPtr_(rawPtr) &#123;</span>  <span class="comment">// 普通构造，以裸指针初始化</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;constructor: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(rawPtr).<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SmartPtr</span>(<span class="keyword">const</span> SmartPtr&amp; sp) : <span class="built_in">rawPtr_</span>(sp.<span class="built_in">get</span>()) &#123;  <span class="comment">// 普通copy构造，简单演示，浅拷贝</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;copy constructor: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(sp).<span class="built_in">name</span>() &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(*<span class="keyword">this</span>).<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SmartPtr&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SmartPtr&amp; sp) &#123;  <span class="comment">// 普通copy赋值操作符，简单演示，浅拷贝</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;copy assignment operator: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(sp).<span class="built_in">name</span>() &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(*<span class="keyword">this</span>).<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br><span class="line">        rawPtr_ = sp.<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;  <span class="comment">// 泛化copy构造，简单演示，浅拷贝</span></span><br><span class="line">    <span class="built_in">SmartPtr</span>(<span class="keyword">const</span> SmartPtr&lt;U&gt;&amp; other) : <span class="built_in">rawPtr_</span>(other.<span class="built_in">get</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;generic copy constructor: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(other).<span class="built_in">name</span>() &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(*<span class="keyword">this</span>).<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;  <span class="comment">// 泛化赋值操作符，简单演示，浅拷贝</span></span><br><span class="line">    SmartPtr&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SmartPtr&lt;U&gt;&amp; other) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;generic copy assignment operator: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(other).<span class="built_in">name</span>() &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(*<span class="keyword">this</span>).<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br><span class="line">        rawPtr_ = other.<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T* <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rawPtr_;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">SmartPtr</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* rawPtr_ = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. </span></span><br><span class="line">    <span class="comment">// structor: class Middle * __ptr64</span></span><br><span class="line">    <span class="comment">// generic copy constructor: class SmartPtr&lt;class Middle&gt; to class SmartPtr&lt;class Top&gt;</span></span><br><span class="line">    SmartPtr&lt;Top&gt; pt1 = SmartPtr&lt;Middle&gt;(<span class="keyword">new</span> Middle); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. </span></span><br><span class="line">    <span class="comment">// structor: class Bottom * __ptr64</span></span><br><span class="line"><span class="comment">// eric copy constructor: class SmartPtr&lt;class Bottom&gt; to class SmartPtr&lt;class Top&gt;</span></span><br><span class="line">    SmartPtr&lt;Top&gt; pt2 = SmartPtr&lt;Bottom&gt;(<span class="keyword">new</span> Bottom);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. </span></span><br><span class="line">    <span class="comment">// generic copy constructor: class SmartPtr&lt;class Top&gt; to class SmartPtr&lt;class Top const &gt;</span></span><br><span class="line">    SmartPtr&lt;<span class="keyword">const</span> Top&gt; cpt3 = pt1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. </span></span><br><span class="line">    <span class="comment">// 编译不通过</span></span><br><span class="line">    <span class="comment">// SmartPtr&lt;Middle&gt; pt4 = SmartPtr&lt;Top&gt;(new Top); </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5. </span></span><br><span class="line">    <span class="comment">// constructor: class Top * __ptr64</span></span><br><span class="line">    <span class="function">SmartPtr&lt;Top&gt; <span class="title">pt4</span><span class="params">(<span class="keyword">new</span> Top)</span></span>;</span><br><span class="line">    <span class="comment">// copy constructor: class SmartPtr&lt;class Top&gt; to class SmartPtr&lt;class Top&gt;</span></span><br><span class="line">    <span class="function">SmartPtr&lt;Top&gt; <span class="title">pt5</span><span class="params">(pt4)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pt1.<span class="built_in">get</span>();<span class="comment">// 浅拷贝未约定所有权是否转移，由外部管理释放</span></span><br><span class="line">    <span class="keyword">delete</span> pt2.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">delete</span> pt5.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述例子中，有如下几点需要注意：</p><ul><li>泛化拷贝构造函数和泛化拷贝赋值操作符并没有被声明为explicit。这是有意为之，因为裸指针之间是可以进行隐式转换的，所以让智能指针也效仿这种行为是无可厚非的；</li><li>上述转换操作并非对任意类型转换都兼容，我们其实通过成员初始化列表<code>rawPtr_(other.get())</code>或赋值操作<code>rawPtr_ = other.get();</code>对可以进行智能指针转换的类型做了约束，即只有<strong>当存在某种隐式转换可以将一个<code>U*</code>指针（<code>other.get()</code>）转换为<code>T*</code>指针（<code>rawPtr_</code>）时，代码才能通过编译</strong>。例如，我们无法将一个<code>Top</code>指针隐式转换为<code>Middle</code>指针，故上述智能指针的泛化构造也不支持该转换（上述case4）；</li><li>成员函数模板并没有改变语言规则，即泛化拷贝构造函数不能代替普通的拷贝构造函数。如果程序需要一个普通的拷贝构造函数（如上例case5），而你没有显式提供，则编译器也会生成一个缺省的版本。对拷贝赋值操作符也是如此。</li></ul><h2 id="条款46：需要类型转换时请为模板定义非成员函数">条款46：需要类型转换时请为模板定义非成员函数</h2><p>在条款24中提到，使用non-member函数来为所有实参提供隐式类型转换的能力，并以<code>Rationnal</code>类的<code>operator*</code>函数为例进行了讨论。在本条款中，我们将<code>Rational</code>类和<code>operator*</code>进行模板化，看看原来的解决方案是否还适用：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有理数类模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rational</span>(<span class="keyword">const</span> T&amp; numerator = <span class="number">0</span>, <span class="keyword">const</span> T&amp; denominator = <span class="number">1</span>) : <span class="built_in">numerator_</span>(numerator), <span class="built_in">denominator_</span>(denominator) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> T <span class="title">numerator</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numerator_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> T <span class="title">denominator</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> denominator_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T numerator_ = <span class="number">0</span>;</span><br><span class="line">    T denominator_ = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">const</span> Rational&lt;T&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> Rational&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Rational&lt;T&gt;&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> Rational&lt;T&gt;(lhs.<span class="built_in">numerator</span>() * rhs.<span class="built_in">numerator</span>(), lhs.<span class="built_in">denominator</span>() * rhs.<span class="built_in">denominator</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Rational&lt;<span class="keyword">int</span>&gt; <span class="title">oneHalf</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Rational&lt;<span class="keyword">int</span>&gt; <span class="title">oneEighth</span><span class="params">(<span class="number">1</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line">    Rational&lt;<span class="keyword">int</span>&gt; res1 = oneHalf * oneEighth;<span class="comment">// OK</span></span><br><span class="line">    Rational&lt;<span class="keyword">int</span>&gt; res2 = oneHalf * <span class="number">2</span>;<span class="comment">// NG，编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>混合运算时，类的non-member函数似乎并没有提供实参隐式转换的能力。这是由于函数模板在具现化时需要做实参推导，以确定<code>T</code>究竟是什么。而在该推导过程中，是不会考虑通过构造函数而发生的隐式类型转换的（这样的隐式类型转换在函数调用过程中确实会被使用，但在调用该函数之前，得首先知道该函数是否存在，否则就是无限套娃）。在上例中，虽然<code>2</code>可以通过non-explicit构造函数隐式转换成<code>Rational&lt;int&gt;</code>，但在实参推导时，我们不能这么做。</p><p>这时，我们如果把<code>operator*</code>函数模板声明为<code>Rational</code>类的友元，则可以通过编译（但链接不成功）：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有理数类模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rational</span>(<span class="keyword">const</span> T&amp; numerator = <span class="number">0</span>, <span class="keyword">const</span> T&amp; denominator = <span class="number">1</span>) : <span class="built_in">numerator_</span>(numerator), <span class="built_in">denominator_</span>(denominator) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> T <span class="title">numerator</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numerator_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> T <span class="title">denominator</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> denominator_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// friend const Rational&lt;T&gt; operator*(const Rational&lt;T&gt;&amp; lhs, const Rational&lt;T&gt;&amp; rhs);</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">const</span> Rational <span class="keyword">operator</span>*(<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T numerator_ = <span class="number">0</span>;</span><br><span class="line">    T denominator_ = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">const</span> Rational&lt;T&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> Rational&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Rational&lt;T&gt;&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> Rational&lt;T&gt;(lhs.<span class="built_in">numerator</span>() * rhs.<span class="built_in">numerator</span>(), lhs.<span class="built_in">denominator</span>() * rhs.<span class="built_in">denominator</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Rational&lt;<span class="keyword">int</span>&gt; <span class="title">oneHalf</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Rational&lt;<span class="keyword">int</span>&gt; <span class="title">oneEighth</span><span class="params">(<span class="number">1</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line">    Rational&lt;<span class="keyword">int</span>&gt; res1 = oneHalf * oneEighth;</span><br><span class="line">    Rational&lt;<span class="keyword">int</span>&gt; res2 = oneHalf * <span class="number">2</span>;<span class="comment">// NG，链接错误</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以能通过编译，是利用了类模板的具现化并不需要实参推导，故编译器总是能在<code>class Rational&lt;T&gt;</code>具现化的时候确定<code>T</code>。具体到上例，在<code>oneHalf</code>被声明为<code>Rational&lt;int&gt;</code>时，<code>class Rational&lt;int&gt;</code>就被具现化出来，从而作为类的一部分，friend函数<code>operator*</code>（接受<code>Rational&lt;int&gt;</code>参数）也会被自动声明。</p><p>之所以不能通过链接，是因为类在具现化时，需要找到该friend函数的定义实现，若在类外定义，该函数模板还未具现化，即找不到具体的实现。解决方法也很简单，将函数实现以inline方式合并到声明式中：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有理数类模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rational</span>(<span class="keyword">const</span> T&amp; numerator = <span class="number">0</span>, <span class="keyword">const</span> T&amp; denominator = <span class="number">1</span>) : <span class="built_in">numerator_</span>(numerator), <span class="built_in">denominator_</span>(denominator) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> T <span class="title">numerator</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numerator_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> T <span class="title">denominator</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> denominator_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// friend const Rational&lt;T&gt; operator*(const Rational&lt;T&gt;&amp; lhs, const Rational&lt;T&gt;&amp; rhs);</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">const</span> Rational <span class="keyword">operator</span>*(<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> Rational&lt;T&gt;(lhs.<span class="built_in">numerator</span>() * rhs.<span class="built_in">numerator</span>(), lhs.<span class="built_in">denominator</span>() * rhs.<span class="built_in">denominator</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T numerator_ = <span class="number">0</span>;</span><br><span class="line">    T denominator_ = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Rational&lt;<span class="keyword">int</span>&gt; <span class="title">oneHalf</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Rational&lt;<span class="keyword">int</span>&gt; <span class="title">oneEighth</span><span class="params">(<span class="number">1</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line">    Rational&lt;<span class="keyword">int</span>&gt; res1 = oneHalf * oneEighth;</span><br><span class="line">    Rational&lt;<span class="keyword">int</span>&gt; res2 = oneHalf * <span class="number">2</span>;<span class="comment">// OK</span></span><br><span class="line">    Rational&lt;<span class="keyword">int</span>&gt; res3 = <span class="number">2</span> * oneHalf;<span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个解决方法的有趣点在于，虽然使用了friend，但却与friend的传统用途<strong>访问class的non-public部分</strong>毫不相干。而是基于如下逻辑：为了能让隐式类型转换发生在所有实参上，我们需要一个non-member函数（模板）；为了让这个函数（模板）能被自动具现化，我们需要将其声明在class内部；而在class内部声明non-member函数的唯一办法就是让它成为一个友元。</p><p>其中关于类中的<code>operator*</code>的声明式和定义式的语法，template名称写成<code>Rational</code>和<code>Rational&lt;T&gt;</code>均可，因为<strong>template名称可以被作为template及其参数的简略表达形式</strong>。</p><p>假如friend函数的实现更为复杂，此时希望inline声明带来的冲击最小化，以及代码可读性的提升，可以将具体实现封成一个辅助函数，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有理数类模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rational</span>(<span class="keyword">const</span> T&amp; numerator = <span class="number">0</span>, <span class="keyword">const</span> T&amp; denominator = <span class="number">1</span>) : <span class="built_in">numerator_</span>(numerator), <span class="built_in">denominator_</span>(denominator) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> T <span class="title">numerator</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numerator_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> T <span class="title">denominator</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> denominator_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// friend const Rational&lt;T&gt; operator*(const Rational&lt;T&gt;&amp; lhs, const Rational&lt;T&gt;&amp; rhs);</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">const</span> Rational <span class="keyword">operator</span>*(<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">doMultiply</span>(lhs, rhs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T numerator_ = <span class="number">0</span>;</span><br><span class="line">    T denominator_ = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">const</span> Rational&lt;T&gt; <span class="title">doMultiply</span><span class="params">(<span class="keyword">const</span> Rational&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Rational&lt;T&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Rational&lt;T&gt;(lhs.<span class="built_in">numerator</span>() * rhs.<span class="built_in">numerator</span>(), lhs.<span class="built_in">denominator</span>() * rhs.<span class="built_in">denominator</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Rational&lt;<span class="keyword">int</span>&gt; <span class="title">oneHalf</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Rational&lt;<span class="keyword">int</span>&gt; <span class="title">oneEighth</span><span class="params">(<span class="number">1</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line">    Rational&lt;<span class="keyword">int</span>&gt; res1 = oneHalf * oneEighth;</span><br><span class="line">    Rational&lt;<span class="keyword">int</span>&gt; res2 = oneHalf * <span class="number">2</span>;</span><br><span class="line">    Rational&lt;<span class="keyword">int</span>&gt; res3 = <span class="number">2</span> * oneHalf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条款47：请使用-traits-classes-表现类型信息">条款47：请使用 traits classes 表现类型信息</h2><p>C++ 中通常把 Traits 称为<strong>类型萃取</strong>技术，即：在 template 编程中，获取模板参数的类型信息，并在编译阶段针对不同的类型响应不同的处理。</p><p>本条款以C++ STL 库中的一个工具模板函数<code>std::advance</code>作为切入点进行讨论，其函数原型为：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">advance</span><span class="params">(IterT&amp; iter, DistT d)</span></span>;</span><br></pre></td></tr></table></figure><p>该模板函数的作用是将某个<code>IterT</code>类型的迭代器<code>iter</code>移动某个给定距离<code>d</code>。在进一步讨论该函数的实现之前，我们先明确一下STL中的迭代器类型：</p><table><thead><tr><th style="text-align:left">迭代器</th><th style="text-align:left">特点</th><th style="text-align:left">STL实现</th></tr></thead><tbody><tr><td style="text-align:left">Input迭代器</td><td style="text-align:left">只向前移动，一次一步，只读一次</td><td style="text-align:left">istream iterators</td></tr><tr><td style="text-align:left">Output迭代器</td><td style="text-align:left">只向前移动，一次一步，只写一次</td><td style="text-align:left">ostream iterators</td></tr><tr><td style="text-align:left">Forward迭代器</td><td style="text-align:left">只向前移动，一次一步，读写多次</td><td style="text-align:left">STL未提供单向linked list，但某些程序库中的single list容器的迭代器属于forward迭代器</td></tr><tr><td style="text-align:left">Bidirectional迭代器</td><td style="text-align:left">可双向移动，一次一步，读写多次</td><td style="text-align:left">list/set/multiset/map/multimap等容器的迭代器</td></tr><tr><td style="text-align:left">Random access迭代器</td><td style="text-align:left">可双向移动，一次多步（常量时间内完成），读写多次</td><td style="text-align:left">vector/deque/string等容器的迭代器</td></tr></tbody></table><h3 id="0-确定若干你希望将来可取得的类型相关信息">0. 确定若干你希望将来可取得的类型相关信息</h3><p>对于这5种迭代器类型，C++ STL 库分别提供了专属的**卷标结构（tag struct）**来加以区分，卷标结构可以理解为编译期的枚举，其定义如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">input_iterator_tag</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">output_iterator_tag</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">forward_iterator_tag</span>:</span> <span class="keyword">public</span> input_iterator_tag &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bidirectional_iterator_tag</span>:</span> <span class="keyword">public</span> forward_iterator_tag &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">random_access_iterator_tag</span>:</span> <span class="keyword">public</span> bidirectional_iterator_tag &#123;&#125;;</span><br></pre></td></tr></table></figure><p>现在回到对<code>advance</code>函数的讨论，我们希望实现的效果是，函数可以基于迭代器的类型<code>IterT</code>不同，实现不同的移动操作，比如random access迭代器可以直接<code>+=d</code>，而其他迭代器只能循环<code>++</code>或<code>--</code>。这便需要用到Traits技术以在编译器获取类型信息。同时，我们还希望，Traits技术对内置类型也能有同样好的表现，比如指针也可以看作是一种迭代器，所以基于Traits技术实现的<code>advance</code>函数也应当兼容指针类型。</p><p>有了上述铺垫，让我们看看Traits究竟如何实现：</p><h3 id="1-为卷标结构（迭代器类型）选一个统一名称（iterator-category），并在使用它的类（各种容器）中嵌套typedef以指定具体的类型">1. 为卷标结构（迭代器类型）选一个统一名称（<code>iterator_category</code>），并在使用它的类（各种容器）中嵌套typedef以指定具体的类型</h3><p>例如，deque的迭代器是random access 迭代器，则deque的实现：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; ... &gt;<span class="comment">// 省略模板参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">deque</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">iterator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> random_access_iterator_tag iterator_category;</span><br><span class="line">    ...</span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而list的迭代器是bidirectional 迭代器，则list的实现：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; ... &gt;<span class="comment">// 省略模板参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">iterator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> bidirectional_iterator_tag iterator_category;</span><br><span class="line">    ...</span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-提供Traits-classes（iterator-traits）和其特化版本（支持指针类型）">2. 提供Traits classes（<code>iterator_traits</code>）和其特化版本（支持指针类型）</h3><p>Traits往往被实现成struct，但是往往被称为Traits classes。<code>iterator_traits</code>的实现如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IterT&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iterator_traits</span> &#123;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> IterT::iterator_category iterator_category;<span class="comment">// 参见条款42</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>iterator_traits</code>做的事情也很简单，就是响应迭代器<code>IterT</code>中的嵌套typedef，即<code>IterT</code>自己认为<code>iterator_category</code>是什么，<code>iterator_traits</code>就认为<code>iterator_category</code>是什么。但是上述实现并不能支持指针类型，因为内置类型无法嵌套typedef，所以<code>iterator_traits</code>针对指针类型提供一个偏特化版本：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IterT&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iterator_traits</span>&lt;</span>IterT*&gt; &#123;<span class="comment">// 偏特化，确定模板参数的一部分</span></span><br><span class="line">    <span class="keyword">typedef</span> random_access_iterator_tag iterator_category;<span class="comment">// 指针行为接近random access</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>至此，<code>iterator_traits</code> 完成了基本实现（C++ STL 库已提供<code>std::iterator_traits</code>），即 <code>iterator_traits&lt;IterT&gt;::iterator_category</code> 可以在编译期确定，接下来看看<code>advance</code> 函数如何使用它。</p><h3 id="3-利用函数重载完成编译期的类型条件判断">3. 利用函数重载完成编译期的类型条件判断</h3><p>对<code>iterator_traits&lt;IterT&gt;::iterator_category</code>的使用的简单方法的如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">advance</span><span class="params">(IterT&amp; iter, DistT d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in"><span class="keyword">typeid</span></span>(<span class="keyword">typename</span> std::iterator_traits&lt;IterT&gt;::iterator_category </span><br><span class="line">               == <span class="built_in"><span class="keyword">typeid</span></span>(std::random_access_iterator_tag))) &#123;</span><br><span class="line">        iter += d;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (d &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (d--) ++iter;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (d++) --iter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法看似可行，但是实际隐含着编译问题：即便对于非random access的迭代器，<code>iter += d;</code>永远不可能执行到，但在编译器并不知道，它只能默认<code>iter</code>是支持<code>+=</code>的，但非random access的迭代器并不支持。所以当具体调用时具现化的<code>IterT</code>为非random access迭代器类型，就会出现编译错误。</p><p>除了编译问题外，if-else语句的条件判断是<strong>运行期判断</strong>，而我们所期望的是<strong>在编译阶段针对不同的类型响应不同的处理</strong>。这时我们就可以利用重载在编译阶段对不同类型进行条件判断：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdvance</span><span class="params">(IterT&amp; iter, DistT d, std::random_access_iterator_tag)</span> </span>&#123;</span><br><span class="line">    iter += d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdvance</span><span class="params">(IterT&amp; iter, DistT d, std::bidirectional_iterator_tag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (d--) ++iter;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (d++) --iter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdvance</span><span class="params">(IterT&amp; iter, DistT d, std::input_iterator_tag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;Negative distance&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (d--) ++iter; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">advance</span><span class="params">(IterT&amp; iter, DistT d)</span> </span>&#123;</span><br><span class="line"><span class="built_in">doAdvance</span>(iter, d, </span><br><span class="line">              <span class="keyword">typename</span> std::iterator_traits&lt;IterT&gt;::<span class="built_in">iterator_category</span>()); <span class="comment">//iterator_category类型 对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下，对traits class 的使用方法如下：</p><ul><li>建立一组重载函数或重载函数模板（身份像劳工，<code>doAdvance</code>），将卷标结构对象作为一个参数用于区别不同的重载函数，并令每个函数的实现码与接受的卷标结构对象相适应；</li><li>建立一个控制函数或函数模板（身份像工头，<code>advance</code>），调用上述的”劳工函数“，并传递由traits获取的类型对象；</li></ul><h3 id="4-others">4. others</h3><p>Traits在 STL 库中有着广泛的应用：</p><ul><li><p><code>iterator_traits</code> ，不止有 <code>iterator_category</code>，还有 <code>difference_type</code>， <code>value_type</code>， <code>pointer</code>， <code>reference</code> 4个成员，详细可参考 <a href="https://zh.cppreference.com/w/cpp/iterator/iterator_traits">cpp参考手册：iterator_traits</a> 。</p></li><li><p>C++ STL 库中类似 <code>iterator_traits</code> 应用了 Traits 技术的模板还有很多，例如<code>numeric_limits</code>，需要包含头文件<code>#include&lt;limits&gt;</code>，可以获取数值类型的极值。</p></li></ul><h2 id="条款48：认识-template-元编程">条款48：认识 template 元编程</h2><p>模板元编程（TMP，template metaprogramming），是编写 template-based C++ 程序并执行于编译期的过程。TMP 过程结束后，若干 C++ 源码会被 templates 具现化出来，便会一如往常地被编译。</p><p>TMP有两大优势：</p><ul><li><strong>可以完成非 TMP 的常规编程做不到的事情</strong>，比如代码生成，类型适配等；</li><li><strong>可以将某些工作从运行期转移到编译期</strong>，可以将运行期的错误提前暴露在编译期，可以获得更小的可执行文件，更快地运行，更少地内存需求，缺点是明显增加编译时间。</li></ul><p>TMP 已被证明是个“<strong>图灵完备</strong>”的机器，意思是它强大到可以计算任何事物。使用 TMP 可以<strong>声明变量</strong>、<strong>执行循环</strong>、<strong>编写及调用函数</strong>等。但是TMP实现上述功能的方式不同于常规的C++程序，在条款47中，我们利用了<strong>重载</strong>实现编译期的 <strong>if…else 条件分支</strong>，接下来将通过编译期计算阶乘的实现，展示TMP通过<strong>递归模板具现化</strong>来是实现<strong>循环</strong>逻辑：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">unsigned</span> n&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Factorial</span> &#123;</span>  <span class="comment">// 递归的形式体现: f(n) = n * f(n -1)</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> value = n * Factorial&lt;n - <span class="number">1</span>&gt;::value &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Factorial</span>&lt;</span><span class="number">0</span>&gt; &#123;  <span class="comment">// 模板全特化: 实际是初始化 f(0) = 1</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> value = <span class="number">1</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; Factorial&lt;<span class="number">5</span>&gt;::value &lt;&lt; std::endl; <span class="comment">// 5! = 120</span></span><br><span class="line">    std::cout &lt;&lt; Factorial&lt;<span class="number">10</span>&gt;::value &lt;&lt; std::endl;<span class="comment">// 10! = 3628800</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++ 读书笔记05</title>
      <link href="/2022/08/31/EffectiveC-5-ReadNote05/"/>
      <url>/2022/08/31/EffectiveC-5-ReadNote05/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>本文是阅读《Effective C++ 改善程序与设计的55个具体做法（第三版）》的心得笔记第五部分，文章也会按照原书的顺序依次记录各个条款。</p><p>第一部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/04/25/EffectiveC-1-ReadNote01/">effective C++ 读书笔记01</a>。</p><p>第二部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/05/06/EffectiveC-2-ReadNote02/">effective C++ 读书笔记02</a>。</p><p>第三部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/05/24/EffectiveC-3-ReadNote03/">effective C++ 读书笔记03</a>。</p><p>第四部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/06/20/EffectiveC-4-ReadNote04/">effective C++ 读书笔记04</a>。</p><h1>继承与面向对象设计</h1><h2 id="条款32：确定你的public-继承塑模出-is-a-关系">条款32：确定你的public 继承塑模出 is-a 关系</h2><p>以 C++ 进行面向对象编程时，最重要的一条规则是：<strong>public inheritance（公开继承）意味着 <em>is-a</em>（是一种）的关系。<strong>也就是说，每一个公开继承的派生类对象同时也是一个基类对象，反之不成立，基类是更一般化的概念，派生类是更特殊化的概念。即</strong>里氏替换原则</strong>（Liskov Substitution Principle）：任何基类可以出现的地方，子类一定可以出现。比如下面这个例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span> ... &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span> <span class="keyword">public</span> Person &#123; ... &#125;;</span><br></pre></td></tr></table></figure><p>在上例中，我们可以认为，每个学生都是人，但并非每个人都是学生。人的概念比学生更一般化，学生是人的一种特殊形式。因此，在C++中，任何函数如果期望获得一个类型为Person（或Person指针或Person引用）的实参，也都愿意接受一个Student对象（或Student指针或Student引用）。但需要注意，这只在<strong>public继承的前提下</strong>才成立。</p><blockquote><p><a href="https://en.wikipedia.org/wiki/SOLID">设计模式五大原则</a>（SOLID）：</p><p>Single Responsibility Principle：单一职责原则</p><p>Open Closed Principle：开闭原则</p><p>Liskov Substitution Principle：里氏替换原则</p><p>Interface Segregation Principle：接口隔离原则</p><p>Dependence Inversion Principle：依赖倒置原则</p></blockquote><p>public 继承和 is-a 关系看似很好理解，但有时候会跟你的现实直觉相左。比如企鹅<strong>是一种</strong>鸟，但企鹅不会飞，那么我们就不能给<code>Bird</code>类声明<code>Fly</code>方法，因为并不是所有鸟都会飞。我们可以通过如下设计来解决：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> &#123;</span></span><br><span class="line">...<span class="comment">// 没有声明fly函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyingBird</span>:</span> <span class="keyword">public</span> Bird &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span>:</span> <span class="keyword">public</span> Bird &#123;</span><br><span class="line">    ...<span class="comment">// 没有声明fly函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有另外一个场景，数学概念中我们认为正方形是一种矩形，所以想当然地在C++代码中做如下继承设计<code>class Square: public Rectangle</code>，但实际上适用于矩形的属性修改规则，并不适用于正方形。所以这种public继承关系并不正确。比如：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> newHeight)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> newWidth)</span></span>;<span class="comment">// 可以单独设置长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">width</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span>:</span> <span class="keyword">public</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> newHeight)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> newWidth)</span> <span class="keyword">override</span></span>;<span class="comment">// 长和宽要同时变</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeBigger</span><span class="params">(Rectangle&amp; r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldHeight = r.<span class="built_in">height</span>();</span><br><span class="line">    r.<span class="built_in">setWidth</span>(r.<span class="built_in">width</span>() + <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">assert</span>(r.<span class="built_in">height</span>() == oldHeight);<span class="comment">// 对矩形成立，但对正方形不成立</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条款33：避免遮掩继承而来的名称">条款33：避免遮掩继承而来的名称</h2><p>所谓<strong>遮掩</strong>，是指对<strong>名称</strong>（变量名或函数名）的覆盖。最常见的就是，内层作用域的名称会遮掩外层作用域的名称。如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;<span class="comment">// global 变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">someFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">0.1</span>;<span class="comment">// local 变量</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;x is &quot;</span> &lt;&lt; x &lt;&lt; std::endl;<span class="comment">// x is 0.1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是，遮掩的对象是名称。上例中<code>x</code>变量的类型是否相同，都不影响名称的遮掩。</p><p>现在考虑继承体系，则有<strong>派生类作用域的名称会遮掩基类作用域的名称</strong>，同样只与名称有关，与名称类型无关。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">// 纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">(<span class="keyword">int</span>)</span></span>;<span class="comment">// 重载</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf3</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf3</span><span class="params">(<span class="keyword">double</span>)</span></span>;<span class="comment">// 重载</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span></span>;<span class="comment">// 纯虚函数重写</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf3</span><span class="params">()</span></span>;<span class="comment">// </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户代码</span></span><br><span class="line">Derived d;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">double</span> y;</span><br><span class="line">...</span><br><span class="line">d.<span class="built_in">mf1</span>();<span class="comment">// 没问题，调用Derived::mf1</span></span><br><span class="line">d.<span class="built_in">mf1</span>(x);<span class="comment">// 编译错误，Base::mf1被Derived::mf1遮掩</span></span><br><span class="line">d.<span class="built_in">mf2</span>();<span class="comment">// 没问题，调用Base::mf2</span></span><br><span class="line">d.<span class="built_in">mf3</span>();<span class="comment">// 没问题，调用Derived::mf3</span></span><br><span class="line">d.<span class="built_in">mf3</span>(y);<span class="comment">// 编译错误，Base::mf3被Derived::mf3遮掩</span></span><br></pre></td></tr></table></figure><p>在上例中，派生类中的<code>mf1</code>和<code>mf3</code>会遮掩基类中的所有同名函数，导致基类的重载不可用。</p><p>但是，一般情况下，我们是不希望遮掩发生的。因为我们使用了public继承，便希望<code>Derived</code> <strong>is-a</strong> <code>Base</code>，则<code>Base</code>能做的事，<code>Derived</code>也应该都能做。而遮掩违背了这样的原则，所以我们需要打破这种缺省的遮掩行为。方法有<strong>使用using声明式</strong>和<strong>使用转发函数</strong>。</p><h3 id="using声明式">using声明式</h3><p>使用using声明式可以让<code>Derived</code>忽略名称遮掩，看到<code>Base</code>作用域内的函数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">... <span class="comment">// 基类不变</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line">    <span class="keyword">using</span> Base::mf1;</span><br><span class="line">    <span class="keyword">using</span> Base::mf3;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span></span>;<span class="comment">// 纯虚函数重写</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf3</span><span class="params">()</span></span>;<span class="comment">// </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户代码</span></span><br><span class="line">Derived d;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">double</span> y;</span><br><span class="line">...</span><br><span class="line">d.<span class="built_in">mf1</span>();<span class="comment">// 没问题，调用Derived::mf1</span></span><br><span class="line">d.<span class="built_in">mf1</span>(x);<span class="comment">// 现在没问题，调用Base::mf1</span></span><br><span class="line">d.<span class="built_in">mf2</span>();<span class="comment">// 没问题，调用Base::mf2</span></span><br><span class="line">d.<span class="built_in">mf3</span>();<span class="comment">// 没问题，调用Derived::mf3</span></span><br><span class="line">d.<span class="built_in">mf3</span>(y);<span class="comment">// 现在没问题，调用Base::mf3</span></span><br></pre></td></tr></table></figure><h3 id="转发函数（forward-function）">转发函数（forward function）</h3><p>在private继承中，强调继承实现而不是继承接口。因此，有时候我们只希望继承一部分函数实现，而不是所有函数。此时可以用<strong>转发函数</strong>实现。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">... <span class="comment">// 基类不变</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">private</span> Base &#123;<span class="comment">// 注意是private继承</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span> </span>&#123;<span class="comment">// 转发函数</span></span><br><span class="line">        Base::<span class="built_in">mf1</span>();<span class="comment">// 调用基类的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户代码</span></span><br><span class="line">Derived d;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">...</span><br><span class="line">d.<span class="built_in">mf1</span>();<span class="comment">// 没问题，调用Derived::mf1</span></span><br><span class="line">d.<span class="built_in">mf1</span>(x);<span class="comment">// 编译错误，Base::mf1被Derived::mf1遮掩</span></span><br></pre></td></tr></table></figure><h2 id="条款34：区分接口继承和实现继承">条款34：区分接口继承和实现继承</h2><p>public继承下，成员函数继承由两部分组成：<strong>函数接口继承</strong>和<strong>函数实现继承</strong>。我们在设计类时，一定要清楚我们希望的，到底是继承接口还是继承实现，还是两个都要。那么有以下几点规则可供参考：</p><ul><li><p><strong>对于public继承，成员函数（无论是非虚函数，虚函数还是纯虚函数）的接口总是会被继承。</strong></p><p>public继承意味着 <strong>is-a</strong> 的关系，那么基类能做的事，派生类应当也都能做；</p></li><li><p><strong>声明纯虚函数的目的是为了让派生类只继承函数接口。</strong></p><p>对于纯虚函数，派生类<strong>必须</strong>重新实现该接口。需要注意的是，<em>C++不会禁止基类给出其纯虚函数的实现</em>，但是除非有必要的理由，我们一般不会这样做。</p></li><li><p><strong>派生类可以同时继承基类的（非纯）虚函数的接口和缺省实现。</strong></p><p>对于（非纯）虚函数，派生类可以选择<strong>重写</strong>其实现，也可以选择使用基类的缺省实现。但是这样选择上的自由，却可能带来隐患。比如派生类中确实是需要重写虚函数的实现，但是忘记了，此时就会使用缺省实现，编译器也不会给出任何提示。比如下面这个例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airport</span> &#123;</span> ... &#125;;<span class="comment">// 机场类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Airplane::fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>&#123;</span><br><span class="line">    ...<span class="comment">// 缺省实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelA</span>:</span> <span class="keyword">public</span> Airplane &#123; ... &#125;;<span class="comment">// A类飞机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelB</span>:</span> <span class="keyword">public</span> Airplane &#123; ... &#125;;<span class="comment">// B类飞机 都可以使用缺省的fly方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelC</span>:</span> <span class="keyword">public</span> Airplane &#123; ... &#125;;<span class="comment">// C类飞机 也未重写fly 但飞行方式不同 有问题！！ </span></span><br></pre></td></tr></table></figure><p>想要规避该隐患，核心思想在于切断<strong>virtual函数接口</strong>和其<strong>缺省实现</strong>之间的联系。有如下两种方法可供选择：</p><ol><li>将<code>fly</code>函数改为纯虚函数，只提供飞行接口。飞行的缺省实现也会在<code>Airplane</code>中提供，但放在一个独立的非虚的<code>defaultFly</code>函数中。若派生类希望使用缺省实现，则可在<code>Fly</code>函数的重写中调用<code>defaultFly</code>，若不想，则可自定义<code>Fly</code>函数。</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airport</span> &#123;</span> ... &#125;;<span class="comment">// 机场类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">protected</span>:<span class="comment">// 与private相比，可以被派生类继承</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">defaultFly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span></span>;<span class="comment">// </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">defaultFly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>&#123;</span><br><span class="line">    ...<span class="comment">// 缺省实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelA</span>:</span> <span class="keyword">public</span> Airplane &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">defaultFly</span>(destination);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelB</span>:</span> <span class="keyword">public</span> Airplane &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">defaultFly</span>(destination);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelC</span>:</span> <span class="keyword">public</span> Airplane &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModelC::fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>&#123;</span><br><span class="line">    ...<span class="comment">// 重写实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将<code>fly</code>函数改为纯虚函数，并在<code>Airplane</code>中给出其缺省实现。</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airport</span> &#123;</span> ... &#125;;<span class="comment">// 机场类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Airplane::fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>&#123;<span class="comment">// 纯虚函数的实现</span></span><br><span class="line">    ...<span class="comment">// 缺省实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelA</span>:</span> <span class="keyword">public</span> Airplane &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>&#123;</span><br><span class="line">        Airplane::<span class="built_in">fly</span>(destination);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelB</span>:</span> <span class="keyword">public</span> Airplane &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>&#123;</span><br><span class="line">        Airplane::<span class="built_in">fly</span>(destination);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelC</span>:</span> <span class="keyword">public</span> Airplane &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModelC::fly</span><span class="params">(<span class="keyword">const</span> Airport&amp; destination)</span> </span>&#123;</span><br><span class="line">    ...<span class="comment">// 重写实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>声明非虚函数的目的是为了令派生类继承函数的接口和强制实现。</strong></p><p>如果成员函数是个非虚函数，则表明它并不打算在派生类中有不同的行为。即非虚成员函数的不变性高于其特异性。即非虚函数绝不应该在派生类中被重写。</p></li></ul><h2 id="条款35：考虑virtual函数以外的其他选择">条款35：考虑virtual函数以外的其他选择</h2><p>假设你正在写一个游戏软件，游戏中的人物会有健康值属性，不同的人物的健康值计算方式不同，那么你就可以做这样一个中规中矩的设计：基类给出一个public虚函数接口<code>healthValue</code>，并提供缺省实现，不同派生类可以重写该函数。那么，有没有其他替代方式呢？</p><h3 id="藉由-Non-Virtual-Interface（NVI）手法实现-Template-Method-模式">藉由 Non-Virtual Interface（NVI）手法实现 Template Method 模式</h3><p>有一个流派主张 <strong>virtual 函数应该几乎总是 private 的（也有例外，比如多态中的基类析构函数）</strong>。基于这种主张，可以让<code>healthValue</code>成为一个public non-virtual 函数，并调用一个private virtual的函数实现。如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="comment">// 不会被派生类重写</span></span><br><span class="line">        ...<span class="comment">// 事前工作</span></span><br><span class="line">        <span class="keyword">int</span> retVal = <span class="built_in">doHealthValue</span>();<span class="comment">// 真正的工作</span></span><br><span class="line">        ...<span class="comment">// 事后工作</span></span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">doHealthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="comment">// 会被派生类重写</span></span><br><span class="line">        ...<span class="comment">// 缺省实现，虽说是inline，但不是有意为之</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这一基本设计，<strong>令用户通过 public non-virtual 成员函数间接调用 private virtual 函数</strong>，称为NVI手法。也就是所谓的 <strong>Template Method</strong> 设计模式（与C++ Template 无关），这个 non-virtual 函数被称为 virtual函数的外覆器（wrapper）。</p><p>NVI手法的优点是可以给真正的工作提供一些必要的事前准备工作和事后清理工作：事前准备工作包括锁定互斥器（locking a mutex），制造运转日志记录项（log entry），验证类约束条件，验证函数先决条件等；事后清理工作包括互斥器解除锁定（unlocking a mutex），验证函数的的事后条件，再次验证类的约束条件等。</p><p>NVI手法也有一些反直觉的地方，即在派生类中重写了private virtual函数，但这些重写函数却不会被派生类调用。但其实这并不矛盾，重写virtual，赋予了派生类“如何实现机制”的控制能力，但基类保留了诉说“函数何时被调用”的权利。</p><h3 id="藉由-Function-Pointers（函数指针）实现-Strategy-模式">藉由 Function Pointers（函数指针）实现 Strategy 模式</h3><p>主要思想是增加一个函数指针作为private成员变量，该函数通过外部传入，从而实现不同的计算健康值的行为。如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span>;</span><span class="comment">// 前置声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">defaultHealthCalc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span></span>;<span class="comment">// 计算健康值的缺省实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*HealthCalcFunc)</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;<span class="comment">// 函数指针定义</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">GameCharacter</span><span class="params">(HealthCalcFunc hcf = defaultHealthCalc)</span></span></span><br><span class="line"><span class="function">        : healthFunc(hcf) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">healthFunc</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    HealthCalcFunc healthFunc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种设计就是所谓的 Strategy 模式。它提供了如下两个有趣的设计弹性：</p><ul><li><p>同一人物的不同实体可以有不同的健康计算函数。如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EvilBadGuy</span>:</span> <span class="keyword">public</span> GameCharacter &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">EvilBadGuy</span><span class="params">(HealthCalcFunc hcf = defaultHealthCalc)</span></span></span><br><span class="line"><span class="function">        : GameCharacter(hcf) &#123;</span> ... &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">loseHealthQuickly</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;<span class="comment">// 健康值计算函数1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">loseHealthSlowly</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;<span class="comment">// 健康值计算函数2</span></span><br><span class="line"></span><br><span class="line"><span class="function">EvilBadGuy <span class="title">ebg1</span><span class="params">(loseHealthQuickly)</span></span>;</span><br><span class="line"><span class="function">EvilBadGuy <span class="title">ebg2</span><span class="params">(loseHealthSlowly)</span></span>;<span class="comment">// 相同的人物类型搭配不同的健康值计算方式</span></span><br></pre></td></tr></table></figure></li><li><p>某已知人物之健康值计算函数可以在运行期变更。只需给<code>GameCharacter</code>提供一个<code>setHealthCalculator</code>函数，用来替换当前的健康值计算函数指针。</p></li></ul><p>这种设计意味着将健康值计算函数独立于<code>GameCharacter</code>继承体系之外，成为一个non-member non-friend 函数，则健康值计算函数将无权访问类的non-public部分，若健康值计算需要这些non-public信息，则需要<strong>弱化class的封装</strong>：将健康值计算函数声明为友元函数，为该函数提供所需信息的pubic访问函数。因此，这种设计的优点（两个弹性）能否弥补其缺点（可能的封装性弱化），则需要根据实际情况进行斟酌。</p><h3 id="藉由std-function完成-Strategy-模式">藉由<code>std::function</code>完成 Strategy 模式</h3><p>将上述的函数指针的成员变量替换为<code>std::function</code>对象，<code>std::function</code>对象可以持有任何可调用物（函数指针，函数对象或成员函数指针），相当于一个<strong>更加泛化的函数指针</strong>，从而使得设计更具弹性。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span>;</span><span class="comment">// 前置声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">defaultHealthCalc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span></span>;<span class="comment">// 计算健康值的缺省实现</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::function&lt;<span class="built_in"><span class="keyword">int</span></span> (<span class="keyword">const</span> GameCharacter&amp;)&gt; HealthCalcFunc;<span class="comment">// </span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">GameCharacter</span><span class="params">(HealthCalcFunc hcf = defaultHealthCalc)</span></span></span><br><span class="line"><span class="function">        : healthFunc(hcf) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">healthFunc</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    HealthCalcFunc healthFunc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里，由<code>std::function</code>类型（即我们typedef的<code>HealthCalcFunc</code>类型）产生的对象可以持有任何与签名式（<code>int (const GameCharacter&amp;)</code>）兼容的可调用物，所谓兼容，即为可调用物的参数可以被隐式转换为<code>const GameCharacter&amp;</code>，而其返回类型可被隐式转换为<code>int</code>。可以传入的可调用物示例如下：</p><ol><li><p>函数指针</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">short</span> <span class="title">calcHealth</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;<span class="comment">// 返回值不是int，但可以隐式转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户代码</span></span><br><span class="line"><span class="function">EvilBadGuy <span class="title">ebg1</span><span class="params">(calcHealth)</span></span>;<span class="comment">// EvilBadGuy的声明如前</span></span><br><span class="line">ebg1.<span class="built_in">healthValue</span>();<span class="comment">// </span></span><br></pre></td></tr></table></figure></li><li><p>函数对象（仿函数）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HealthCalculator</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span> <span class="keyword">const</span> </span>&#123;<span class="comment">// 重载operator()</span></span><br><span class="line">        ... <span class="comment">// 省略实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户代码</span></span><br><span class="line"><span class="function">EvilBadGuy <span class="title">ebg2</span><span class="params">(HealthCalculator())</span></span>;</span><br><span class="line">ebg2.<span class="built_in">healthValue</span>();</span><br></pre></td></tr></table></figure></li><li><p>成员函数指针（std::bind）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameLevel</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">health</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span> <span class="keyword">const</span></span>;<span class="comment">// 成员函数，返回值不是int</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">GameLevel currentLevel;</span><br><span class="line">...</span><br><span class="line"><span class="function">EvilBadGuy <span class="title">ebg3</span><span class="params">(std::bind(&amp;GameLevel::health, currentLevel,<span class="comment">// 传入对象</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          std::placeholders::_1))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">EvilBadGuy <span class="title">ebg4</span><span class="params">(std::bind(&amp;GameLevel::health, &amp;currentLevel, <span class="comment">// 传入对象指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          std::placeholders::_1))</span></span>;</span><br><span class="line"></span><br><span class="line">ebg3.<span class="built_in">healthValue</span>();<span class="comment">// 调用时会先构造一个currentLevel的临时对象，再调用临时对象的health函数</span></span><br><span class="line">ebg4.<span class="built_in">healthValue</span>();<span class="comment">// 调用时会直接调用currentLevel对象的health函数</span></span><br></pre></td></tr></table></figure><p>其中<code>std::bind</code>是一个绑定器，函数原型为：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">Fn</span>, <span class="type">class... Args&gt;</span></span></span><br><span class="line">  <span class="comment">/* unspecified */</span> bind (Fn&amp;&amp; fn, Args&amp;&amp;... args);</span><br></pre></td></tr></table></figure><p>可以将传入的可调用对象（第一个参数<code>fn</code>）与其对应参数（用逗号分割的参数列表<code>args</code>）进行绑定，返回一个新的可调用对象。参数列表<code>args</code>中：</p><ul><li>若为一个具体的值，则返回的可调用对象将始终使用该值作为参数；</li><li>若为一个形如<code>_n</code>的占位符（从_1开始，随使用占位符的数量递增），则返回的可调用对象会转发传递给可调用对象的参数；</li></ul><p>在上例中，使用<code>std::bind</code>来绑定<code>GameLevel</code>类的成员函数<code>health</code>，因为成员函数还有一个隐式参数，即<code>this</code>指针。而<code>HealthCalcFunc</code>的签名式只兼容单一参数<code>GameCharacter</code>，所以需要使用<code>std::bind</code>来固定其中的隐式参数。需要注意的是，给<code>this</code>传入对象或者对象指针都是可以的，但调用函数的对象会有区别（见代码注释），这在被调用函数会修改调用对象的成员变量时尤其需要注意。</p></li><li><p>匿名函数（lambda表达式）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">EvilBadGuy <span class="title">ebg5</span><span class="params">([&amp;](<span class="keyword">const</span> GameCharacter&amp; gc) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    ...<span class="comment">// 省略实现</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">ebg5.<span class="built_in">healthValue</span>();</span><br></pre></td></tr></table></figure></li></ol><h3 id="古典的-Strategy-模式">古典的 Strategy 模式</h3><p>传统的 Strategy 模式做法会将健康值计算函数做成一个分离的继承体系中的virtual成员函数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span>;</span><span class="comment">// 前置声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthCalcFunc</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SlowHealthLoser</span>:</span> <span class="keyword">public</span> HealthCalcFunc &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SlowHealthLoser::calc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HealthCalcFunc defaultHealthCalc;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">GameCharacter</span><span class="params">(HealthCalcFunc* phcf = &amp;defaultHealthCalc)</span></span></span><br><span class="line"><span class="function">        : pHealthCalc(phcf) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pHealthCalc-&gt;<span class="built_in">calc</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    HealthCalcFunc* pHealthCalc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SlowHealthLoser shl;</span><br><span class="line"><span class="function">GameCharacter <span class="title">gc1</span><span class="params">(&amp;shl)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="条款36：绝不重新定义继承而来的-non-virtual-函数">条款36：绝不重新定义继承而来的 non-virtual 函数</h2><p>条款32中指出，public继承意味着 **is-a（是一种）**的关系。</p><p>条款33中指出，<strong>派生类作用域的名称会遮掩基类作用域的名称</strong>。</p><p>条款34中指出，<strong>声明非虚函数的目的是为了令派生类继承函数的接口和强制实现。</strong></p><p>这一切都导向同一个结论，<strong>任何情况下都不应该重新定义一个继承而来的non-virtual函数</strong>。</p><p>条款7中也指出，<strong>多态基类（会被继承）的析构函数应当是virtual的</strong>。否则也会违反本条款。</p><p>可以看下面这个反例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;B::mf()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf</span><span class="params">()</span> </span>&#123;<span class="comment">// 遮掩了基类的名称</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;D::mf()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户代码</span></span><br><span class="line">D d;</span><br><span class="line">D* pD = &amp;d;</span><br><span class="line">B* pB = &amp;d;</span><br><span class="line"></span><br><span class="line">d.<span class="built_in">mf</span>();<span class="comment">// 输出 D::mf()，没问题</span></span><br><span class="line">pB-&gt;<span class="built_in">mf</span>();<span class="comment">// 输出 B::mf()，有问题！！！</span></span><br><span class="line">pD-&gt;<span class="built_in">mf</span>();<span class="comment">// 输出 D::mf()，没问题</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上例中，我们预期的是函数调用是与具体对象绑定的，而不是与对象指针绑定的（即期望是动态绑定）。但是由于non-virtual函数是静态绑定的，这意味着，由于<code>pB</code>是一个基类指针，则通过<code>pB</code>调用的non-virtual函数永远都是<code>B</code>类所定义的版本，即使<code>pB</code>指向派生类对象<code>d</code>。</p><h2 id="条款37：绝不重新定义继承而来的缺省参数值">条款37：绝不重新定义继承而来的缺省参数值</h2><p>由于条款36指出，重新定义一个继承而来的non-virtual函数永远都错误的，所以我们将讨论范围缩小到”继承一个带有缺省参数值的virtual函数“。在此前提下，本条款成立的理由就是：<strong>virtual函数是动态绑定的，而缺省参数值是静态绑定的</strong>。考虑如下例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">ShapeColor</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">    Red = <span class="number">0</span>,</span><br><span class="line"> Green,</span><br><span class="line"> Blue</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(ShapeColor color = ShapeColor::Red)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 派生类重新定义了缺省参数值</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(ShapeColor color = ShapeColor::Green)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>:</span> <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 派生类移除了缺省参数值</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(ShapeColor color)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户代码</span></span><br><span class="line">Shape* ps;<span class="comment">// 静态类型为Shape*，无动态类型</span></span><br><span class="line">Shape* pc = <span class="keyword">new</span> Circle;<span class="comment">// 静态类型为Shape*，动态类型为Circle*</span></span><br><span class="line">Shape* pr = <span class="keyword">new</span> Rectangle;<span class="comment">// 静态类型为Shape*，动态类型为Rectangle*</span></span><br></pre></td></tr></table></figure><p>对象的静态类型（static type）即其被声明时所采用的类型。上述例子中<code>ps</code>，<code>pc</code>和<code>pr</code>都被声明为<code>Shape</code>指针类型，故它们的静态类型都为<code>Shape*</code>。</p><p>对象的动态类型（dynamic type）即其目前所指向的对象的类型。动态类型可以在程序执行过程中改变。如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ps = pc;<span class="comment">// ps的动态类型现在为Circle*</span></span><br><span class="line">ps = pr;<span class="comment">// ps的动态类型现在为Rectangle*</span></span><br></pre></td></tr></table></figure><p>由于<strong>virtual函数是动态绑定的</strong>，即究竟调用virtual函数的哪一种实现，取决于调用对象的动态类型。所以有如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pc-&gt;<span class="built_in">draw</span>(ShapeColor::Red);<span class="comment">// 调用Circle::draw(ShapeColor::Red)</span></span><br><span class="line">pr-&gt;<span class="built_in">draw</span>(ShapeColor::Red);<span class="comment">// 调用Rectangle::draw(ShapeColor::Red)</span></span><br></pre></td></tr></table></figure><p>但是<strong>缺省函数值是静态绑定的</strong>，即使用哪一种实现的缺省函数值，取决于调用对象的静态类型。所有有如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pr-&gt;<span class="built_in">draw</span>();<span class="comment">// 调用Rectangle::draw(ShapeColor::Red)</span></span><br></pre></td></tr></table></figure><p>在上述调用中，出现了基类和派生类的<code>draw</code>函数声明式各出一半力的怪异现象，这不是我们所期望的。而C++之所以没有将缺省参数值也设计成动态绑定，主要是为了运行期效率而做出的取舍。该问题不仅局限于对象指针，将指针换成引用，该问题依然存在。</p><p>但是，如果你严格遵守本条款，给基类和派生类同时提供相同的缺省参数值，也不是一个好的选择。因为这会导致代码重复，如果基类的缺省参数值，所有重复给定缺省参数值的派生类都得做相应的修改，否则就会再次违背本条款。那么怎么做才好呢？答案是使用条款35中提到NVI（non-virtual interface）手法：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">ShapeColor</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">    Red = <span class="number">0</span>,</span><br><span class="line"> Green,</span><br><span class="line"> Blue</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(ShapeColor color = ShapeColor::Red)</span> <span class="keyword">const</span> </span>&#123;<span class="comment">// non-virtual，不可重新定义</span></span><br><span class="line">        <span class="built_in">doDraw</span>();<span class="comment">// 调用一个virtual</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">doDraw</span><span class="params">(ShapeColor color)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;<span class="comment">// 可被重新定义</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">doDraw</span><span class="params">(ShapeColor color)</span> <span class="keyword">const</span></span>;<span class="comment">// 注意，不须指定缺省参数值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="条款38：通过复合塑模出-has-a-或“根据某物实现出”">条款38：通过复合塑模出 has-a 或“根据某物实现出”</h2><p>复合（composition）是一种常见的类关系，当某种类型的对象内含有其他类型的对象时，便是这种关系。</p><p>复合关系有两种意义：</p><ul><li><p>has-a（有一个） 关系：</p><p>对象属于应用域（application domain），即对象相当于塑造现实世界中的某些事物。例如<code>Person</code>类有<code>Address</code>、<code>PhoneNumber</code>等类型的成员变量。</p></li><li><p>is-implemented-in-terms-of（根据某物实现出）关系：</p><p>对象属于实现域（implementation domain），即其他对象纯粹是实现细节的人工设计。例如缓冲区（Buffers）、互斥器（Mutexes）等。</p><p>比如我们想通过<code>std::list</code>实现自定义的<code>Set</code>模板类（<code>std::set</code>是通过平衡查找树实现，效率更高，但空间开销也更大，假设这里我们的环境是空间比速度更重要），我们也许会这么做：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Set</span>:</span> <span class="keyword">public</span> std::list&lt;T&gt; &#123; ... &#125;;</span><br></pre></td></tr></table></figure><p>这是不对的，因为public继承意味着 <strong>is-a</strong> 关系，但是<code>std::list</code>允许存在重复元素，但是<code>Set</code>不行。正确的实现方式如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Set</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">member</span><span class="params">(<span class="keyword">const</span> T&amp; item)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> T&amp; item)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">const</span> T&amp; item)</span></span>;</span><br><span class="line">    <span class="function">std::<span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::list&lt;T&gt; rep;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> Set&lt;T&gt;::<span class="built_in">member</span>(<span class="keyword">const</span> T&amp; item) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">find</span>(rep.<span class="built_in">begin</span>(), rep.<span class="built_in">end</span>(), item) != rep.<span class="built_in">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Set&lt;T&gt;::<span class="built_in">insert</span>(<span class="keyword">const</span> T&amp; item) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">member</span>(item)) rep.<span class="built_in">push_back</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Set&lt;T&gt;::<span class="built_in">remove</span>(<span class="keyword">const</span> T&amp; item) &#123;</span><br><span class="line">    <span class="keyword">typename</span> std::list&lt;T&gt;::iterator it = <span class="comment">// 关于typename的讨论见条款42</span></span><br><span class="line">        std::<span class="built_in">find</span>(rep.<span class="built_in">begin</span>(), rep.<span class="built_in">end</span>(), item);</span><br><span class="line">    <span class="keyword">if</span> (it != rep.<span class="built_in">end</span>()) rep.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">std::<span class="keyword">size_t</span> Set&lt;T&gt;::<span class="built_in">size</span>() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rep.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="条款39：明智而审慎地使用-private-继承">条款39：明智而审慎地使用 private 继承</h2><p>首先需要明确的是private继承的两个规则：</p><ol><li>如果类之间的继承关系是private，则编译器不会自动地将一个派生类对象隐式转换成一个基类对象；</li><li>由private继承而来的所有成员，在派生类中都会变成private属性；</li></ol><p>private继承意味着<strong>根据某物实现出（implemented-in-terms-of）</strong>,只是一种实现技术，是为了让派生类继承基类中已经准备好的一些实现，而不是因为派生类和基类存在任何客观上的关联关系。换句话说，私有继承只有实现部分被继承，而接口部分被略去，这也解释了上述规则2成立的原因。</p><p>但是，由条款38可知，复合的意义也是<strong>根据某物实现出（implemented-in-terms-of）</strong>，我们已经如何在private继承和复合之间做出抉择呢？答案是<strong>尽可能使用复合，必要时才使用private继承</strong>。看下面这个例子：</p><p>我们希望通过一个已有的计时类<code>Timer</code>来统计<code>Widget</code>类的性能情况，比如某个成员函数的调用频率等。用private继承和复合的实现分别如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Timer</span><span class="params">(<span class="keyword">int</span> tickFrequency)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">()</span> <span class="keyword">const</span></span>;<span class="comment">// 定时器每滴答一次，此函数被自动调用一次</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现1：private继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>:</span> <span class="keyword">private</span> Timer &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;<span class="comment">// 重写，实现性能监控的目标功能</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现2：public继承 + 复合</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WidgetTimer</span>:</span> <span class="keyword">public</span> Timer &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">    WidgetTimer timer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>public继承 + 复合相比于private继承的好处在于：</p><ol><li>可以阻止<code>Widget</code>的派生类再次重写onTick函数；</li><li>若将<code>WidgetTimer</code>类的实现移到<code>Widget</code>之外，并且<code>Widget</code>中持有指针指向一个<code>WidgetTimer</code>对象，则<code>Widget</code>类的声明可以只带一个<code>WidgetTimer</code>声明式，而不需要<code>#include Timer.h</code>，从而实现解耦，降低编译依赖。</li></ol><p>然而还有一种激进的情况会促使你选择private继承而非复合，那就是<strong>空白基类最优化</strong>（EBO，Empty Base Optimization）。所谓的<strong>空类</strong>（Empty Class）不带任何数据，即没有non-static成员变量，没有virtual函数，也没有virtual基类（但可以有typedefs，enums，static成员变量或non-virtual函数）。理论上，空类对象的大小应当为零，但由于技术理由，C++规定<strong>独立</strong>对象都必须有非零大小，所以C++会默默安插一个char（1字节）到空对象中。若该空类对象在其他类或结构体中，还要考虑内存对齐，则空类对象占用的空间将不止一个字节。而派生类对象中的基类成分不是独立的，不受上述规定的约束。故当对空间敏感时，可以通过private继承空类（的若干实现），来达到节约空间的目的，这便是空白基类最优化。此外，<strong>EBO只适用于单继承</strong>。一个例子如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">char</span>* pChar;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(pChar str)</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; str &lt;&lt;std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">color</span> &#123;</span></span><br><span class="line">        red, green, blue</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">privateFoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Empty::count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoldIntsAndEmpty</span> &#123;</span>        <span class="comment">// 内存对齐后类大小为12字节</span></span><br><span class="line">    <span class="keyword">int</span> x_;     <span class="comment">// 4字节</span></span><br><span class="line">    <span class="keyword">int</span> y_;     <span class="comment">// 4字节</span></span><br><span class="line">    Empty e_;   <span class="comment">// 1字节</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoldInts</span>:</span><span class="keyword">private</span> Empty &#123;  <span class="comment">// EBO，大小为8字节</span></span><br><span class="line">    <span class="keyword">int</span> x_;</span><br><span class="line">    <span class="keyword">int</span> y_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(HoldIntsAndEmpty) &lt;&lt; std::endl;     <span class="comment">// 12</span></span><br><span class="line">    std::cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(HoldInts) &lt;&lt; std::endl;             <span class="comment">// 8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条款40：明智而审慎地使用多重继承">条款40：明智而审慎地使用多重继承</h2><p>多重继承（MI，Multiple Inheritance）是指派生类继承多个基类。在使用多重继承时，就要考虑如下几个问题：</p><ul><li>从不同基类继承相同名称函数（或typedefs）时，会导致歧义问题，需要指定基类。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;B1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;B2&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B1, <span class="keyword">public</span> B2 &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    d.<span class="built_in">foo</span>();<span class="comment">// 编译报错，无法判断要调用哪个foo</span></span><br><span class="line">  d.B1::<span class="built_in">foo</span>();<span class="comment">// 指定B1</span></span><br><span class="line">    d.B2::<span class="built_in">foo</span>();<span class="comment">// 指定B2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当派生类继承的多个基类有更高层的共同的基类时，就形成了<strong>钻石型多重继承</strong>。这时来自共同基类的成员变量经由不同的继承路径都会产生一笔备份，若我们不希望产生这样的重复，则需要用到<strong>虚继承</strong>。但是虚继承是有代价的，为了保证虚继承的正确性（避免成员变量重复），编译器需要在背后付出更多代价，这会导致虚继承派生类<strong>占用空间更大</strong>或<strong>运行速度更慢</strong>。此外，虚继承时virtual base classes（无论直接还是间接）的初始化责任由继承体系中最低层的类负责。所以：<ul><li>非必要不使用虚继承；</li><li>若必须使用virtual base classes，则尽可能不在其中包含数据成员，从而不必担心初始化问题。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a_ = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span>:</span><span class="keyword">public</span> BB &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span>:</span><span class="keyword">public</span> BB &#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VB1</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> BB &#123;<span class="comment">// 虚继承</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VB2</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> BB &#123;<span class="comment">// 虚继承</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B1, <span class="keyword">public</span> B2 &#123;<span class="comment">// 会从两条继承路径中各继承一份a_</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VD</span>:</span><span class="keyword">public</span> VB1, <span class="keyword">public</span> VB2 &#123;<span class="comment">// 只有一份a_</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">d.a_ = <span class="number">1</span>;<span class="comment">// 编译报错，无法判断使用哪个备份</span></span><br><span class="line">    d.B1::a_ = <span class="number">1</span>;</span><br><span class="line">    d.B2::a_ = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    VD vd;</span><br><span class="line">    vd.a_ = <span class="number">3</span>;<span class="comment">// 编译通过，只有一个</span></span><br><span class="line">    vd.B1::a_ = <span class="number">3</span>;</span><br><span class="line">    vd.B2::a_ = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; d.B1::a_ &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; d.B2::a_ &lt;&lt; std::endl;<span class="comment">// 1,2</span></span><br><span class="line">  std::cout &lt;&lt; vd.a_ &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vd.B1::a_ &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vd.B2::a_ &lt;&lt; std::endl;<span class="comment">// 4,4,4</span></span><br><span class="line">  std::cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(d) &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(vd) &lt;&lt; std::endl;<span class="comment">// 8,24</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然能用单一继承就不要使用多重继承，但多重继承也并非完全是洪水猛兽，一个合理使用多重继承的例子如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IPerson</span> &#123;</span>                                 <span class="comment">// 抽象类，无法实例化</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">IPerson</span>() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonInfo</span> &#123;</span>                              <span class="comment">// 既有的数据库类，可获取个人信息</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">PersonInfo</span><span class="params">(<span class="keyword">int</span> pid)</span>:id_(pid) &#123;</span>&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">PersonInfo</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">theName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> value[<span class="number">1024</span>];                <span class="comment">// 预留缓冲区给返回值，static会被自动初始化为0</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* testName = <span class="string">&quot;Aaron&quot;</span>;  <span class="comment">// 获取名字方法略去，以固定字符串代替</span></span><br><span class="line">        std::<span class="built_in">strcpy</span>(value, <span class="built_in">valueDelimOpen</span>());   <span class="comment">// 写入起始符号</span></span><br><span class="line">        std::<span class="built_in">strcat</span>(value, testName);           <span class="comment">// 写入名字</span></span><br><span class="line">        std::<span class="built_in">strcat</span>(value, <span class="built_in">valueDelimClose</span>());  <span class="comment">// 写入结束符号</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">theBirthDate</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1993-01-01&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">valueDelimOpen</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">valueDelimClose</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类的具体实现RealPerson</span></span><br><span class="line"><span class="comment">// 可以利用既有的PersonInfo类来实现name和birthDate，即根据某物实现出的关系，可以选择复合和private继承</span></span><br><span class="line"><span class="comment">// 但输出人名时不需要起始符号和结尾符号，所以需要重写valueDelimOpen和valueDelimClose</span></span><br><span class="line"><span class="comment">// 故选择private继承而不是复合，这样就得使用多重继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealPerson</span>:</span> <span class="keyword">public</span> IPerson, <span class="keyword">private</span> PersonInfo &#123;  <span class="comment">// 多重继承</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">RealPerson</span><span class="params">(<span class="keyword">int</span> pid)</span>: PersonInfo(pid) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;         <span class="comment">// 纯虚函数实现</span></span><br><span class="line">        <span class="keyword">return</span> PersonInfo::<span class="built_in">theName</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;    <span class="comment">// 纯虚函数实现</span></span><br><span class="line">        <span class="keyword">return</span> PersonInfo::<span class="built_in">theBirthDate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">valueDelimOpen</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;       <span class="comment">// 重写界定符号函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">valueDelimClose</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;      <span class="comment">// 重写界定符号函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">RealPerson <span class="title">rp</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; rp.<span class="built_in">name</span>() &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; rp.<span class="built_in">birthDate</span>() &lt;&lt; std::endl;   <span class="comment">// Aaron,1993-01-01</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代C++ [3]: 右值引用、移动语义和完美转发</title>
      <link href="/2022/07/14/cpp-modern-3-RValueReference/"/>
      <url>/2022/07/14/cpp-modern-3-RValueReference/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>在本文中将依次讨论左值和右值、左值引用和右值引用、移动语义和完美转发。</p><h1>值类别</h1><p>每个表达式只属于三种基本值类别中的一种：<em><strong>纯右值 (prvalue)</strong></em>、<em><strong>亡值 (xvalue)</strong></em>、<em><strong>左值 (lvalue)</strong></em>。</p><p>三种基本值类型又组成了两种混合类型：<em><strong>泛左值(glvalue)</strong></em>（包括左值和亡值）和<em><strong>右值(rvalue)</strong></em>（包括纯右值和亡值），即我们普遍意义上的左值和右值。具体的定义可以参见<a href="https://zh.cppreference.com/w/cpp/language/value_category">[1]</a>，相当之具体且繁复。除非考据党，一般而言不需要这么严谨，只需要知道，左值是指表达式结束后依然存在的<strong>持久化对象</strong>（可做取地址操作），右值是指表达式结束时就不再存在的<strong>临时对象</strong>（不可取地址），左值通常是具名变量或对象，而右值通常不具名。</p><h1>左值引用和右值引用</h1><h2 id="左值引用">左值引用</h2><p><strong>左值引用</strong>就是我们通常所指的引用<code>&amp;</code>，给变量（左值）取一个别名的操作。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;<span class="comment">// a 为左值</span></span><br><span class="line"><span class="keyword">int</span>&amp; lref_a = a;<span class="comment">// 左值引用lref_a是a的别名，修改lref_a即修改a</span></span><br><span class="line"><span class="keyword">int</span>&amp; lref_b = <span class="number">1</span>;<span class="comment">// 编译错误！不能对右值取左值引用</span></span><br></pre></td></tr></table></figure><p>注意，（左值）引用不是对象，所以不存在引用的数组，不存在指向引用的指针，不存在引用的引用（的定义），如下定义是错误的：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp; a[<span class="number">3</span>];<span class="comment">// 编译错误</span></span><br><span class="line"><span class="keyword">int</span>&amp;* p;<span class="comment">// 编译错误</span></span><br><span class="line"><span class="keyword">int</span>&amp; &amp;r;<span class="comment">// 编译错误</span></span><br><span class="line"><span class="comment">// 虽不可以定义引用的引用，但可以对引用取引用</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; lref_a = a;</span><br><span class="line"><span class="keyword">int</span>&amp; lref_lref_a = lref_a;<span class="comment">//实际上通过引用折叠变成一个左值引用</span></span><br></pre></td></tr></table></figure><h2 id="右值引用">右值引用</h2><p><strong>右值引用</strong>自C++11引入，使用声明符<code>&amp;&amp;</code>，如给匿名变量或函数返回值（右值）取别名的操作。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp;&amp; rref_a = <span class="number">1</span>;<span class="comment">// 右值引用，为匿名变量取别名</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> rref_b = b;<span class="comment">// 编译错误，不能对左值取右值引用</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;<span class="comment">// 构造函数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;constructor\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">const</span> A&amp; a) &#123;<span class="comment">// 拷贝构造函数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;copy constructor\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">A</span>(A&amp;&amp; a) &#123;<span class="comment">// 移动构造函数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;move constructor\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    A&amp; <span class="keyword">operator</span>=(A&amp; a) &#123;<span class="comment">// 拷贝赋值操作符</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;copy assignment\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    A&amp; <span class="keyword">operator</span>=(A&amp;&amp; a) <span class="keyword">noexcept</span> &#123;<span class="comment">// 移动赋值操作符</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;move assignment\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">A</span>() &#123;<span class="comment">// 析构函数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Destructor\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">A</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">A <span class="title">getA_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a = <span class="built_in">A</span>();</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">acceptA</span><span class="params">(A a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">getA</span>();<span class="comment">// [1]</span></span><br><span class="line">    <span class="built_in">acceptA</span>(<span class="built_in">getA</span>());<span class="comment">// [2]</span></span><br><span class="line">    A a = <span class="built_in">getA</span>();<span class="comment">// [3]</span></span><br><span class="line">    A&amp;&amp; rref_a = <span class="built_in">getA</span>();<span class="comment">// [4]</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子中，有几个有意思的点：</p><ul><li>关于作为函数返回值的临时变量的构建问题，C++标准允许一种（编译器）实现省略创建一个只是为了初始化另一个同类型对象的临时对象。但如何省略在不同的编译器的不同优化等级下可能表现不同，我做了如下测试：<ul><li>在VS2019（MSVC） Debug模式（<code>/Od</code>）下，<code>getA()</code>函数中返回<code>A</code>对象时不会重新构建一个临时对象（右值），因为<code>A()</code>的返回值就是一个临时对象（右值），会将其直接返回【一次构造，无析构】；而<code>getA_</code>函数中局部对象<code>a</code>（左值）的定义会调用构造函数，返回时会重新构建一个临时对象用于返回（优先调用移动构造函数，若只自定义了拷贝构造函数，则会调用拷贝构造函数，关于移动语义后续详细讨论），并将局部对象<code>a</code>析构【两次构造，一次析构】；</li><li>在VS2019（MSVC） Release模式（<code>/O2</code>）下，<code>getA_</code>函数会被进一步优化，只需要一次构造，省去了移动构造和析构【一次构造，无析构】；</li><li>用 g++ 编译时，无论采用何种优化等级，<code>getA</code>和<code>getA_</code>函数中都只会调用一次构造函数，重新构建临时变量的操作都会被优化掉【一次构造，无析构】；</li><li>但是 g++ 编译时可以添加<code>-fno-elide-constructors</code>选项来禁用上述优化，强制g++在<strong>所有初始化情况下</strong>调用拷贝/移动构造函数。所以在<code>getA_</code>函数中，<code>A()</code>调用一次构造函数，用其返回的临时变量初始化<code>a</code>会调用一次移动构造函数，然后临时变量析构，用<code>a</code>初始化返回的临时变量时又会调用一次移动构造函数，返回后<code>a</code>析构【三次构造，二次析构】；</li><li>同样的优化也会发生在函数入参处，如上例函数调用[2]处，<code>getA()</code>返回的临时变量成为<code>acceptA</code>函数的参数时，并不会产生构造和析构成本，因为没有必要；</li></ul></li><li>函数调用[1]返回的右值无人接收，则该语句结束后，返回的了临时变量会被析构；</li><li>函数调用[2]返回的右值被<code>acceptA</code>函数接收，被用于初始化形参<code>a</code>，其生命周期得以延续至<code>acceptA</code>函数结束；</li><li>函数调用[3]返回的右值被用于初始化<code>main</code>函数中的局部变量<code>a</code>，临时变量被左值接收，其生命周期得以延续至<code>main</code>函数结束。注意这里是初始化而不是赋值，不会调用赋值操作符，不开启<code>-fno-elide-constructors</code>选项的情况下，也不会产生额外的构造和析构操作；</li><li>函数调用[4]返回的右值被用来初始化右值引用<code>rref_a</code>，因而临时变量有了名字，其生命周期也得以延续至<code>main</code>函数结束。同样的，这里是初始化而不是赋值；</li></ul><p>从上面的分析中可以看出，右值引用<code>rref_a</code>和左值<code>a</code>的表现近乎一致，所以实质上<strong>右值引用也是一个左值</strong>，它可以取地址，而且是具名的。</p><h2 id="常量左值引用">常量左值引用</h2><p><strong>常量左值引用</strong>可以算是一个“万能”的引用类型，它可以绑定非常量左值、常量左值、右值，而且在绑定右值的时候，常量左值引用还可以像右值引用一样将右值的生命期延长，但缺点是只能读不能改。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; k_lref_a = <span class="number">1</span>;    <span class="comment">// 绑定右值</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; k_lref_b = b;    <span class="comment">// 绑定non-const左值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; k_lref_c = c;    <span class="comment">// 绑定const左值</span></span><br></pre></td></tr></table></figure><h2 id="引用折叠">引用折叠</h2><p>虽然上面谈到无法直接定义引用的引用，但通过模板或 typedef 中的类型操作还是可以构成引用的引用，此时适用*引用折叠（reference collapsing）*规则：右值引用的右值引用折叠成右值引用，所有其他组合均折叠成左值引用：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>&amp;  lref;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>&amp;&amp; rref;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"> </span><br><span class="line">lref&amp;  r1 = n; <span class="comment">// r1 的类型是 int&amp;</span></span><br><span class="line">lref&amp;&amp; r2 = n; <span class="comment">// r2 的类型是 int&amp;</span></span><br><span class="line">rref&amp;  r3 = n; <span class="comment">// r3 的类型是 int&amp;</span></span><br><span class="line">rref&amp;&amp; r4 = <span class="number">1</span>; <span class="comment">// r4 的类型是 int&amp;&amp;</span></span><br></pre></td></tr></table></figure><h1>移动语义</h1><h2 id="为什么需要移动语义？">为什么需要移动语义？</h2><p>C++11 的一个重要改进就是引入了<strong>移动语义（Move Semantic）</strong>，通过移动语义，可以避免拷贝构造中不必要的深拷贝操作，同时解决仅通过浅拷贝无法约束的所有权共享问题。移动语义的实现主要通过移动构造函数和移动赋值操作符。下面考虑一个自定义string类的场景：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> cnt_;                         <span class="comment">// 统计构造函数的调用次数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> copy_cnt_;                    <span class="comment">// 统计拷贝构造函数的调用次数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> copy_assign_cnt_;             <span class="comment">// 统计拷贝赋值操作符的调用次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="literal">nullptr</span>) &#123;      <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="keyword">if</span> (cstr) &#123;</span><br><span class="line">            size_ = <span class="built_in">strlen</span>(cstr);</span><br><span class="line">            data_ = <span class="keyword">new</span> <span class="keyword">char</span>[size_ + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">memcpy</span>(data_, cstr, size_);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            size_ = <span class="number">0</span>;</span><br><span class="line">            data_ = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">            *data_ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt_++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> MyString&amp; str) &#123;             <span class="comment">// 拷贝构造函数</span></span><br><span class="line">        size_ = str.size_;</span><br><span class="line">        data_ = <span class="keyword">new</span> <span class="keyword">char</span>[size_ + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(data_, str.data_, size_);</span><br><span class="line">        copy_cnt_++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString&amp; str) &#123;  <span class="comment">// 拷贝赋值操作符</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str) &#123;                     <span class="comment">// 认同测试，避免自我赋值，参见 条款11</span></span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] data_;</span><br><span class="line">        size_ = str.size_;</span><br><span class="line">        data_ = <span class="keyword">new</span> <span class="keyword">char</span>[size_ + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(data_, str.data_, size_);</span><br><span class="line">        copy_assign_cnt_++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MyString</span>() &#123;                               <span class="comment">// 析构函数</span></span><br><span class="line">        size_ = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">delete</span>[] data_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, data_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* data_;</span><br><span class="line">    <span class="keyword">size_t</span> size_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> MyString::cnt_ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> MyString::copy_cnt_ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> MyString::copy_assign_cnt_ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">(MyString str)</span> </span>&#123;</span><br><span class="line">    str = <span class="built_in">MyString</span>(<span class="string">&quot;hello string&quot;</span>);</span><br><span class="line">    str.<span class="built_in">Print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;MyString&gt; vecStr;</span><br><span class="line">    vecStr.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">// DoSomething(MyString(&quot;hello world&quot;)); // [1]</span></span><br><span class="line">        vecStr.<span class="built_in">push_back</span>(<span class="built_in">MyString</span>(<span class="string">&quot;hello world&quot;</span>));<span class="comment">// [2]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;constructor time: &quot;</span> &lt;&lt; MyString::cnt_ &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;copy constructor time: &quot;</span> &lt;&lt; MyString::copy_cnt_ &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;copy assignment time: &quot;</span> &lt;&lt; MyString::copy_assign_cnt_ &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拷贝构造函数和拷贝赋值操作符的参数<code>const MyString&amp; str</code>是一个常量左值引用，是可以绑定右值的。</p><p>上述代码在VS 2019 Release环境下执行，发现当执行<code>DoSomething</code>函数时，编译器会进行优化，将传参时的拷贝构造操作省去；而执行<code>push_back</code>操作时，编译器则没有把拷贝构造操作给优化掉，甚至如果不执行<code>reserve</code>操作，拷贝构造函数的调用次数将远不止10次（涉及资源的动态分配）。</p><p><code>MyString(&quot;hello world&quot;)</code>返回的是一个临时变量（右值），它除了被用来压进vector，并没有其他用途。其完全可以被直接拿来用，没必要再深拷贝一遍，即浪费资源又影响执行效率。还可以看到，编译器的优化固然是好的，但我们不能太过依赖它，编译器优化不能解决所有的问题。</p><p>那么，可以通过将拷贝构造函数中的深拷贝换成浅拷贝（仅拷贝char*指针的值）来解决效率问题嘛？打咩！且不论这会导致资源所有权的混乱，当临时变量的生命周期结束时，其中的资源被释放，会导致拷贝生成的对象也不可用。这是很蠢的想法。</p><p>而移动语义可以很好地解决这种问题：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> cnt_;                         <span class="comment">// 统计构造函数的调用次数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> copy_cnt_;                    <span class="comment">// 统计拷贝构造函数的调用次数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> copy_assign_cnt_;             <span class="comment">// 统计拷贝赋值操作符的调用次数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> move_cnt_;                    <span class="comment">// 统计移动构造函数的调用次数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> move_assign_cnt_;             <span class="comment">// 统计移动赋值操作符的调用次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="literal">nullptr</span>) &#123;          <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="keyword">if</span> (cstr) &#123;</span><br><span class="line">            size_ = <span class="built_in">strlen</span>(cstr);</span><br><span class="line">            data_ = <span class="keyword">new</span> <span class="keyword">char</span>[size_ + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">memcpy</span>(data_, cstr, size_);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            size_ = <span class="number">0</span>;</span><br><span class="line">            data_ = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">            *data_ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt_++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> MyString&amp; str) &#123;                 <span class="comment">// 拷贝构造函数</span></span><br><span class="line">        size_ = str.size_;</span><br><span class="line">        data_ = <span class="keyword">new</span> <span class="keyword">char</span>[size_ + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(data_, str.data_, size_);</span><br><span class="line">        copy_cnt_++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyString</span>(MyString&amp;&amp; str) <span class="keyword">noexcept</span> </span><br><span class="line">        : <span class="built_in">data_</span>(str.data_), <span class="built_in">size_</span>(str.size_) &#123;      <span class="comment">// 移动构造函数</span></span><br><span class="line">        str.data_ = <span class="literal">nullptr</span>;                        <span class="comment">// 转移资源所有权</span></span><br><span class="line">        str.size_ = <span class="number">0</span>;</span><br><span class="line">        move_cnt_++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString&amp; str) &#123;      <span class="comment">// 拷贝赋值操作符</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str) &#123;                         <span class="comment">// 认同测试，避免自我赋值，参见 条款11</span></span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] data_;</span><br><span class="line">        size_ = str.size_;</span><br><span class="line">        data_ = <span class="keyword">new</span> <span class="keyword">char</span>[size_ + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(data_, str.data_, size_);</span><br><span class="line">        copy_assign_cnt_++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MyString&amp; <span class="keyword">operator</span>=(MyString&amp;&amp; str) <span class="keyword">noexcept</span> &#123;  <span class="comment">// 移动赋值操作符</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str) &#123;                         <span class="comment">// 认同测试，避免自我赋值，参见 条款11</span></span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] data_;</span><br><span class="line">        size_ = str.size_;                          <span class="comment">// 转移资源所有权</span></span><br><span class="line">        data_ = str.data_;</span><br><span class="line">        str.data_ = <span class="literal">nullptr</span>;</span><br><span class="line">        str.size_ = <span class="number">0</span>;</span><br><span class="line">        move_assign_cnt_++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MyString</span>() &#123;                                   <span class="comment">// 析构函数</span></span><br><span class="line">        size_ = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">delete</span>[] data_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, data_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* data_;</span><br><span class="line">    <span class="keyword">size_t</span> size_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> MyString::cnt_ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> MyString::copy_cnt_ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> MyString::copy_assign_cnt_ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> MyString::move_cnt_ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> MyString::move_assign_cnt_ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">(MyString str)</span> </span>&#123;</span><br><span class="line">    str = <span class="built_in">MyString</span>(<span class="string">&quot;hello string&quot;</span>);</span><br><span class="line">    str.<span class="built_in">Print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;MyString&gt; vecStr;</span><br><span class="line">    vecStr.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        vecStr.<span class="built_in">push_back</span>(<span class="built_in">MyString</span>(<span class="string">&quot;hello world&quot;</span>));</span><br><span class="line">        <span class="comment">//DoSomething(MyString(&quot;hello world&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;constructor time: &quot;</span> &lt;&lt; MyString::cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;copy constructor time: &quot;</span> &lt;&lt; MyString::copy_cnt_ &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;copy assignment time: &quot;</span> &lt;&lt; MyString::copy_assign_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;move constructor time: &quot;</span> &lt;&lt; MyString::move_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;move assignment time: &quot;</span> &lt;&lt; MyString::move_assign_cnt_ &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上述实现中可以看出，移动语义的核心在于资源所有权的转移，而不是从新开辟资源并拷贝。在C++11之前，也可以通过<strong>仅拷贝指针并令原指针置0</strong>的方式实现类似移动语义的操作。但是没有语法约束移动语义和拷贝语义的使用，而右值引用（仅可绑定右值）的出现给予了移动语义的正当性，即当传递右值时，可以优先调用移动构造函数（若实现）而非拷贝构造函数；而传递左值时，只可以调用拷贝构造函数，不可以调用移动构造函数。</p><h2 id="std-move">std::move</h2><p>所以，移动语义也是一种浅拷贝，但明确指定了资源所有权的转移（而不是共享），并且用了右值引用的语法对使用场景做了约束（仅右值才可移动）。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">... <span class="comment">// 类实现不变</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;MyString&gt; vecStr;</span><br><span class="line">    vecStr.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="function">MyString <span class="title">tmp</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">        vecStr.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;constructor time: &quot;</span> &lt;&lt; MyString::cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;copy constructor time: &quot;</span> &lt;&lt; MyString::copy_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;copy assignment time: &quot;</span> &lt;&lt; MyString::copy_assign_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;move constructor time: &quot;</span> &lt;&lt; MyString::move_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;move assignment time: &quot;</span> &lt;&lt; MyString::move_assign_cnt_ &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// constructor time: 10</span></span><br><span class="line"><span class="comment">// copy constructor time: 10</span></span><br><span class="line"><span class="comment">// copy assignment time: 0</span></span><br><span class="line"><span class="comment">// move constructor time: 0</span></span><br><span class="line"><span class="comment">// move assignment time: 0</span></span><br></pre></td></tr></table></figure><p>从上例可有看出，传递左值时，调用了拷贝构造函数，即便这个左值只是个局部变量。我们希望它是可以被移动的，C++11给出的解决方案是提供了<code>std::move</code>方法，可以将一个左值转换成右值，从而使用移动语义。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">... <span class="comment">// 类实现不变</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;MyString&gt; vecStr;</span><br><span class="line">    vecStr.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="function">MyString <span class="title">tmp</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">        vecStr.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(tmp));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;constructor time: &quot;</span> &lt;&lt; MyString::cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;copy constructor time: &quot;</span> &lt;&lt; MyString::copy_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;copy assignment time: &quot;</span> &lt;&lt; MyString::copy_assign_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;move constructor time: &quot;</span> &lt;&lt; MyString::move_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;move assignment time: &quot;</span> &lt;&lt; MyString::move_assign_cnt_ &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// constructor time: 10</span></span><br><span class="line"><span class="comment">// copy constructor time: 0</span></span><br><span class="line"><span class="comment">// copy assignment time: 0</span></span><br><span class="line"><span class="comment">// move constructor time: 10</span></span><br><span class="line"><span class="comment">// move assignment time: 0</span></span><br></pre></td></tr></table></figure><p>关于<code>std::move</code>，还有几点需要注意：</p><ul><li>通过<code>std::move</code>完成移动语义后，原左值对象并不会马上析构，而是待到其生命周期结束时才析构，此时该左值对象已不持有资源，继续使用可能会出现未定义行为；</li><li>如果没有提供移动构造函数，只提供了拷贝构造函数，<code>std::move</code>会失效但是不会发生错误，编译器找不到移动构造函数就去寻找拷贝构造函数；</li><li><code>std::move</code>只会对持有资源的对象产生实质的作用，对基本类型如<code>int</code>或<code>char[10]</code>使用<code>std::move</code>虽不致出错，但没有意义，该拷贝还是会拷贝。</li></ul><h2 id="push-back和emplace-back">push_back和emplace_back</h2><p>这里还想提一下<code>push_back</code>和<code>emplace_back</code>的区别，<code>push_back</code> 向容器尾部添加元素时，首先会创建这个元素，然后再将这个元素拷贝或者移动到容器中（如果是拷贝的话，事后会自行销毁先前创建的这个元素）；而 <code>emplace_back</code> 在实现时，则是直接在容器尾部创建这个元素，省去了拷贝或移动元素的过程。</p><p>其实<code>push_back(std::move(tmp))</code>和<code>emplace_back(std::move(tmp))</code>之间，甚至<code>push_back(MyString(&quot;hello world&quot;))</code>和<code>emplace_back(MyString(&quot;hello world&quot;))</code>之间并没有区别，因为已经在<code>emplace_back</code>外显示构建了元素对象，<code>emplace_back</code>是无法省去拷贝或移动的过程的，只有下面这种调用方式才会在<code>emplace_back</code>内直接构建元素对象，并放到容器尾部。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;MyString&gt; vecStr;</span><br><span class="line">    vecStr.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">//vecStr.push_back(&quot;hello world&quot;);</span></span><br><span class="line">        vecStr.<span class="built_in">emplace_back</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;constructor time: &quot;</span> &lt;&lt; MyString::cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;copy constructor time: &quot;</span> &lt;&lt; MyString::copy_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;copy assignment time: &quot;</span> &lt;&lt; MyString::copy_assign_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;move constructor time: &quot;</span> &lt;&lt; MyString::move_cnt_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;move assignment time: &quot;</span> &lt;&lt; MyString::move_assign_cnt_ &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// constructor time: 10</span></span><br><span class="line"><span class="comment">// copy constructor time: 0</span></span><br><span class="line"><span class="comment">// copy assignment time: 0</span></span><br><span class="line"><span class="comment">// move constructor time: 0</span></span><br><span class="line"><span class="comment">// move assignment time: 0</span></span><br></pre></td></tr></table></figure><h2 id="swap函数">swap函数</h2><p>利用移动语义也可以方便的实现高性能的swap函数：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">tmp</span><span class="params">(std::move(a))</span></span>;</span><br><span class="line">    a = std::<span class="built_in">move</span>(b);</span><br><span class="line">    b = std::<span class="built_in">move</span>(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若T类型是可以移动的（存在移动构造函数），则通过移动语义可以实现高效的置换；若T类型不可移动，也不会出错，就像普通的swap函数一样，通过深拷贝完成交换。</p><h1>通用引用</h1><p><strong>通用引用</strong>（universal reference）是Scott Meyers在C++ and Beyond 2012演讲中自创的一个词，用来特指一种引用的类型。这种引用在源代码中（<code>T&amp;&amp;</code>）看起来像右值引用，但是它也可以表现的左值引用（即<code>T&amp;</code>）的行为。它们的双重性质允许它们绑定右值（就像右值引用那样）和左值（就像左值引用那样）。而且，它们可以绑定const或者非const对象，可以绑定volatile和非volatile对象，还可以绑定const和volatile同时作用的对象。它们实际上可以绑定任何东西。构成通用引用有两个条件：</p><ul><li>必须精确满足<code>T&amp;&amp;</code>这种形式（即使加上const也不行）</li><li>类型T必须是通过<strong>推断</strong>得到的（最常见的就是模板函数参数或者auto类型）</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp;&amp; param)</span></span>; <span class="comment">//T类型需要推导，为&amp;&amp;通用引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(Test&amp;&amp; rhs);  <span class="comment">// 虽然是类模板，但Test是一个特定的类型，不需要类型推导，所以&amp;&amp;为右值引用</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(Test&amp;&amp; param)</span></span>; <span class="comment">// 右值引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(std::vector&lt;T&gt;&amp;&amp; param)</span></span>; <span class="comment">// 在调用这个函数之前，std::vector&lt;T&gt;中的推断类型已经确定了</span></span><br><span class="line"><span class="comment">// 所以调用f函数的时候没有类型推断了，所以是 右值引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> T&amp;&amp; param)</span></span>; <span class="comment">// 右值引用有 const 限定</span></span><br></pre></td></tr></table></figure><p>关于类型推断及通用类型究竟是表现为左值引用还是右值引用，需要结合前面提到的引用折叠来看：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp;&amp; param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (std::is_same&lt;std::string, T&gt;::value) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;string&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (std::is_same&lt;std::string&amp;, T&gt;::value) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;string&amp;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (std::is_same&lt;std::string&amp;&amp;, T&gt;::value) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;string&amp;&amp;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (std::is_same&lt;<span class="keyword">int</span>, T&gt;::value) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;int&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (std::is_same&lt;<span class="keyword">int</span>&amp;, T&gt;::value) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;int&amp;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (std::is_same&lt;<span class="keyword">int</span>&amp;&amp;, T&gt;::value) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;int&amp;&amp;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;unkown&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>&amp;&amp; rref_a = <span class="number">1</span>;</span><br><span class="line">    std::string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">f</span>(<span class="number">1</span>);                   <span class="comment">// 传入右值，推断为int，int&amp;&amp; 右值引用</span></span><br><span class="line">    <span class="built_in">f</span>(a);                   <span class="comment">// 传入左值，推断为int&amp;，int&amp; &amp;&amp; 折叠为左值引用</span></span><br><span class="line">    <span class="built_in">f</span>(rref_a);              <span class="comment">// 传入右值引用（实为左值），推断为int&amp;，int&amp; &amp;&amp; 折叠为左值引用</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">f</span>(std::<span class="built_in">string</span>(<span class="string">&quot;hello&quot;</span>));<span class="comment">// 传入右值，推断为std::string，std::string&amp;&amp; 右值引用</span></span><br><span class="line">    <span class="built_in">f</span>(str);                 <span class="comment">// 传入左值，推断为std::string&amp;，std::string&amp; &amp;&amp; 折叠为左值引用</span></span><br><span class="line">    <span class="built_in">f</span>(std::<span class="built_in">move</span>(str));      <span class="comment">// 传入右值，推断为std::string，std::string&amp;&amp; 右值引用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述例子中可以看出，传入左值，就表现为左值引用；传入右值，就表现为右值引用。不愧为<strong>通用</strong>引用。</p><h1>完美转发</h1><p>所谓转发，即通过一个函数将参数转交给另一个函数进行处理，若转发的过程中，参数的原有特性（如const属性，左值右值）不发生改变，则称为<strong>完美转发</strong>。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>&amp; i)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;process(int&amp;):&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>&amp;&amp; i)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;process(int&amp;&amp;):&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myforward</span><span class="params">(<span class="keyword">int</span>&amp;&amp; i)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;myforward(int&amp;&amp;):&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">process</span>(i);                 <span class="comment">// 转发</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">process</span>(a);               <span class="comment">// 传入左值       打印 process(int&amp;):0</span></span><br><span class="line">    <span class="built_in">process</span>(<span class="number">1</span>);               <span class="comment">// 传入右值       打印 process(int&amp;&amp;):1</span></span><br><span class="line">    <span class="built_in">process</span>(std::<span class="built_in">move</span>(a));    <span class="comment">// 传入右值       打印 process(int&amp;&amp;):0</span></span><br><span class="line">    <span class="built_in">myforward</span>(<span class="number">2</span>);             <span class="comment">// 传入右值，通过myforward函数转发给process函数 右值变成了右值引用（实为左值）打印 process(int&amp;):2</span></span><br><span class="line">    <span class="built_in">myforward</span>(std::<span class="built_in">move</span>(a));  <span class="comment">// 同上           打印 process(int&amp;):0</span></span><br><span class="line">    <span class="comment">// myforward(a);          // 错误用法，右值引用不接受左值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面便是一个非完美转发的例子，参数在转发的过程中其特性发生了改变，C++11提供了一个模板函数<code>std::forward&lt;T&gt;()</code>来解决这个问题。尝试修改<code>myforward</code>函数的实现：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myforward</span><span class="params">(<span class="keyword">int</span>&amp;&amp; i)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;myforward(int&amp;&amp;):&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//process(i);                   // 转发</span></span><br><span class="line">    <span class="built_in">process</span>(std::forward&lt;<span class="keyword">int</span>&gt;(i));  <span class="comment">// 转发</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">myforward</span>(<span class="number">2</span>);<span class="comment">// 打印 process(int&amp;&amp;):2</span></span><br></pre></td></tr></table></figure><p>上面的例子仍然不是完美转发，因为<code>myforward</code>函数不接受左值输入。完美转发需要<strong>通用引用</strong>和**<code>std::forward</code>**配合使用来实现。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>&amp; i)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;process(int&amp;):&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>&amp;&amp; i)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;process(int&amp;&amp;):&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; i)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;process(const int&amp;):&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp;&amp; i)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;process(const int&amp;&amp;):&quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">perfectForward</span><span class="params">(T&amp;&amp; i)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">process</span>(std::forward&lt;T&gt;(i));  <span class="comment">// 完美转发</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nonPerfectForward</span><span class="params">(T&amp;&amp; i)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">process</span>(i);                     <span class="comment">// 不完美转发</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> c = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> d = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">nonPerfectForward</span>(a);               <span class="comment">// process(int&amp;):0</span></span><br><span class="line">    <span class="built_in">nonPerfectForward</span>(std::<span class="built_in">move</span>(b));    <span class="comment">// process(int&amp;):1</span></span><br><span class="line">    <span class="built_in">nonPerfectForward</span>(c);               <span class="comment">// process(const int&amp;):2</span></span><br><span class="line">    <span class="built_in">nonPerfectForward</span>(std::<span class="built_in">move</span>(d));    <span class="comment">// process(const int&amp;):3</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">perfectForward</span>(a);                  <span class="comment">// process(int&amp;):0</span></span><br><span class="line">    <span class="built_in">perfectForward</span>(std::<span class="built_in">move</span>(b));       <span class="comment">// process(int&amp;&amp;):1</span></span><br><span class="line">    <span class="built_in">perfectForward</span>(c);                  <span class="comment">// process(const int&amp;):2</span></span><br><span class="line">    <span class="built_in">perfectForward</span>(std::<span class="built_in">move</span>(d));       <span class="comment">// process(const int&amp;&amp;):3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一种典型的多参数函数完美转发的例子如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, std::string b, <span class="keyword">bool</span> c)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a: &quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;b: &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;c: &quot;</span> &lt;&lt; c &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(Args&amp;&amp;... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">f</span>(std::forward&lt;Args&gt;(args)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    forward(<span class="number">10</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>...</code>出现了三次：</p><ul><li><code>typename... Args</code>表示<strong>模板参数打包（template parameter pack）</strong>，表示模板类型参数个数可变；</li><li><code>Args&amp;&amp;... args</code>表示<strong>函数参数打包（function parameter pack）</strong>，表示函数参数个数可变；</li><li><code>std::forward&lt;Args&gt;(args)...</code>表示<strong>参数解包（pack expansion）</strong>，表示将参数展开为逗号分割的参数列表；</li></ul><h1>参考</h1><p>[1] <a href="https://zh.cppreference.com/w/cpp/language/value_category">值类别</a></p><p>[2] <a href="https://www.jianshu.com/p/d19fc8447eaa">[c++11]我理解的右值引用、移动语义和完美转发</a></p><p>[3] <a href="https://blog.csdn.net/qq_38216239/article/details/80815142">通用引用、引用折叠与完美转发问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 右值引用 </tag>
            
            <tag> 移动语义 </tag>
            
            <tag> 完美转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非线性最小二乘 [1]: GetStart</title>
      <link href="/2022/07/13/NLS-1-GetStart/"/>
      <url>/2022/07/13/NLS-1-GetStart/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>非线性最小二乘法（NLS）是一种优化技术，可用于为包含非线性特征的数据集建立回归（回归即<strong>最佳拟合</strong>）模型。此类数据集的模型系数是非线性的。</p><h1>NLS回归理论</h1><p>在本文中将遵守如下的符号表示的惯例：</p><blockquote><p>“帽子”符号用来表示在数据上拟合回归模型过程中生成的值，如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\pmb{\hat{\beta}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></span> 代表拟合系数的向量；</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">y</mi><mrow><mi mathvariant="bold">o</mi><mi mathvariant="bold">b</mi><mi mathvariant="bold">s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\pmb{y_{obs}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 代表因变量y的观察值向量；</p><p>未加粗表示标量，加粗表示向量或矩阵。如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mrow><mi>o</mi><mi>b</mi><msub><mi>s</mi><mi>i</mi></msub></mrow></msub></mrow><annotation encoding="application/x-tex">y_{obs_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6807em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span> 表示向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">y</mi><mrow><mi mathvariant="bold">o</mi><mi mathvariant="bold">b</mi><mi mathvariant="bold">s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\pmb{y_{obs}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 中第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 个标量；</p><p>我们假设回归矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span> 的尺寸为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，即它有 m 行 n 列 回归变量。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 矩阵的尺寸为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，系数矩阵的尺寸为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>（转置形式）。</p></blockquote><p>下面将看到3个可用MLS训练的非线性模型的例子：</p><h2 id="例1">例1</h2><p>在下面这个模型中，回归系数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\beta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\beta_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 分别是2次幂和3次幂，所以模型的系数是非线性的：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>y</mi><mrow><mi>o</mi><mi>b</mi><mi>s</mi></mrow></msub><mo>=</mo><mover accent="true"><msub><mi>β</mi><mn>0</mn></msub><mo>^</mo></mover><mo>+</mo><mover accent="true"><msubsup><mi>β</mi><mn>1</mn><mn>2</mn></msubsup><mo>^</mo></mover><mo>∗</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mover accent="true"><msubsup><mi>β</mi><mn>2</mn><mn>3</mn></msubsup><mo>^</mo></mover><mo>∗</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">y_{obs} = \hat{\beta_0} + \hat{\beta_1^2} * x_1 + \hat{\beta_2^3} * x_2 + e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3257em;vertical-align:-0.2663em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0593em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span><span style="top:-3.3649em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3257em;vertical-align:-0.2663em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0593em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span><span style="top:-3.3649em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span>表示模型残差，即观察值和预测值（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>β</mi><mn>0</mn></msub><mo>^</mo></mover><mo>+</mo><mover accent="true"><msubsup><mi>β</mi><mn>1</mn><mn>2</mn></msubsup><mo>^</mo></mover><mo>∗</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mover accent="true"><msubsup><mi>β</mi><mn>2</mn><mn>3</mn></msubsup><mo>^</mo></mover><mo>∗</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\hat{\beta_0} + \hat{\beta_1^2} * x_1 + \hat{\beta_2^3} * x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3257em;vertical-align:-0.2663em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0593em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span><span style="top:-3.3649em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3257em;vertical-align:-0.2663em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0593em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span><span style="top:-3.3649em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）之间的差值。</p><h2 id="例2">例2</h2><p>下面这个模型是一个自回归时间序列模型，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\beta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\beta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是相乘的关系，所以本质上也是非线性的：</p><p><img src="/2022/07/13/NLS-1-GetStart/1.png" alt="1"></p><h2 id="例3">例3</h2><p>在下面这个模型中，预测值是回归变量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 的线性组合的指数函数：</p><p><img src="/2022/07/13/NLS-1-GetStart/2.png" alt="2"></p><p>该公式常用于泊松回归模型或其衍化模型，如广义泊松模型或负二项式回归模型。具体来说，拟合均值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi><mi mathvariant="normal">_</mi><mi>c</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">\mu\_cap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7406em;vertical-align:-0.31em;"></span><span class="mord mathnormal">μ</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span></span></span></span>表示为泊松概率分布的条件平均值，如下所示：</p><p><img src="/2022/07/13/NLS-1-GetStart/3.png" alt="3"></p><p>这种泊松回归模型用于拟合基于计数的数据集，如共享单车场景下，每天租用其中一辆自行车的人数。</p><h2 id="NLS优化如何工作？">NLS优化如何工作？</h2><p>在NLS中，我的目标是寻找能最小化残差平方和（Residual Sum of Squares，RSS）的模型参数向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">β</mi></mrow><annotation encoding="application/x-tex">\pmb{\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></span>，换句话说，我们要减小：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mi>S</mi><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mi>i</mi><mi>m</mi></munderover><msub><mi>r</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mi>i</mi><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>o</mi><mi>b</mi><msub><mi>s</mi><mi>i</mi></msub></mrow></msub><mo>−</mo><mover accent="true"><msub><mi>μ</mi><mi>i</mi></msub><mo>^</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">RSS = \sum_i^mr_i = \sum_i^m(y_{obs_i} - \hat{\mu_i})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">RSS</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>μ</mi><mi>i</mi></msub><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{\mu_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span>是模型对数据集中第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 行的预测，是模型参数向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\pmb{\hat{\beta}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></span> 和回归变量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub></mrow><annotation encoding="application/x-tex">\pmb{x_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 的函数，如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>μ</mi><mo>^</mo></mover><mo stretchy="false">(</mo><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover><mo separator="true">,</mo><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{\mu}(\pmb{x_i}) = f(\pmb{\hat{\beta}},\pmb{x_i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">μ</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2079em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>将其替换进上述RSS等式中：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mi>S</mi><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mi>i</mi><mi>m</mi></munderover><msub><mi>r</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mi>i</mi><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>o</mi><mi>b</mi><msub><mi>s</mi><mi>i</mi></msub></mrow></msub><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover><mo separator="true">,</mo><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">RSS = \sum_i^mr_i = \sum_i^m(y_{obs_i} - f(\pmb{\hat{\beta}},\pmb{x_i}))^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">RSS</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2079em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>最小化RSS的一种方法就是对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\pmb{\hat\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></span> 求微分，对微分为0进行求解，即：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mi>j</mi></msub></mrow></mfrac><mo stretchy="false">(</mo><mi>R</mi><mi>S</mi><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mspace width="1em"><mi mathvariant="normal">∀</mi><mi>j</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo></mspace></mrow><annotation encoding="application/x-tex">\frac{\partial}{\partial\hat\beta_j}(RSS) = 0 \quad \forall j \in [1,n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5054em;vertical-align:-1.134em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.1521em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.134em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">RSS</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">∀</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span></span></p><p>由于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\pmb{\hat\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></span> 是一个长度为 n 的向量，对应于 n 个回归变量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，… ，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，需要对每一个分量的偏微分为0进行求解，如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub></mrow></mfrac><mo stretchy="false">(</mo><mi>R</mi><mi>S</mi><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub></mrow></mfrac><munderover><mo>∑</mo><mi>i</mi><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>o</mi><mi>b</mi><msub><mi>s</mi><mi>i</mi></msub></mrow></msub><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover><mo separator="true">,</mo><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mo>−</mo><mn>2</mn><munderover><mo>∑</mo><mi>i</mi><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>o</mi><mi>b</mi><msub><mi>s</mi><mi>i</mi></msub></mrow></msub><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover><mo separator="true">,</mo><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>∗</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi><mo stretchy="false">(</mo><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover><mo separator="true">,</mo><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub></mrow></mfrac><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{\partial}{\partial\hat\beta_1}(RSS) = 0 \\\implies \frac{\partial}{\partial\hat\beta_1}\sum_i^m(y_{obs_i} - f(\pmb{\hat{\beta}},\pmb{x_i}))^2 = 0 \\\implies -2\sum_i^m(y_{obs_i} - f(\pmb{\hat{\beta}},\pmb{x_i})) * \frac{\partial f(\pmb{\hat\beta}, \pmb{x_i})}{\partial\hat\beta_1} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4138em;vertical-align:-1.0423em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.1521em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0423em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">RSS</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.1521em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0423em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2079em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2079em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.6772em;vertical-align:-1.0423em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6349em;"><span style="top:-2.1521em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0423em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><p>因为有 n 个参数从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\hat\beta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\hat\beta_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所以就得到了 n 个等式组成的方程组。但是，与<strong>普通最小二乘法</strong>（Ordinary Least Squares，OLS）估计不同，n 个方程组没有封闭形式的解。因此，需要使用迭代优化技术，在每次迭代中（迭代次数用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 表示），对参数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\hat\beta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\hat\beta_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 做一个微小的调整，如下所示，并重新评估RSS。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mover accent="true"><mi>β</mi><mo>^</mo></mover><mi>j</mi><mi>k</mi></msubsup><mo>=</mo><msubsup><mover accent="true"><mi>β</mi><mo>^</mo></mover><mi>j</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup><mo>+</mo><mi>δ</mi><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\hat\beta_j^k = \hat\beta_j^{(k-1)} + \delta\hat\beta_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.341em;vertical-align:-0.3831em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-2.453em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4578em;vertical-align:-0.413em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.244em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>目前有几种算法可以用来有效地更新 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\pmb{\hat\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></span>向量，直到更新到一组最佳的值，以使得RSS最小化。其中主要是基于信赖域（<a href="https://en.wikipedia.org/wiki/Trust_region">Trust Region</a>）的<a href="https://optimization.mccormick.northwestern.edu/index.php/Trust-region_methods">方法</a>，如信赖域反射（<a href="https://epubs.siam.org/doi/10.1137/S1064827595289108">Trust Region Reflective</a>）算法、<a href="https://en.wikipedia.org/wiki/Levenberg%E2%80%93Marquardt_algorithm">Levenberg-Marquardt</a> 算法和<a href="https://nmayorov.wordpress.com/2015/06/19/dogbox-algorithm/">Dogbox</a> 算法。SciPy支持这三种算法。</p><p>再来回看上面例3中的指数平均模型：</p><p><img src="/2022/07/13/NLS-1-GetStart/2.png" alt="4"></p><p>将其代入RSS等式有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mi>S</mi><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mi>i</mi><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>o</mi><mi>b</mi><msub><mi>s</mi><mi>i</mi></msub></mrow></msub><mo>−</mo><msup><mi>e</mi><mrow><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover></mrow></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">RSS = \sum_i^m(y_{obs_i} - e^{\pmb{x_i}\pmb{\hat{\beta}}})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">RSS</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3335em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0835em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord vbox mtight"><span class="thinbox mtight"><span class="rlap mtight"><span class="strut" style="height:0.5736em;vertical-align:-0.143em;"></span><span class="inner"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace mtight" style="margin-right:0.0717em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span><span class="mord mtight"><span class="mord vbox mtight"><span class="thinbox mtight"><span class="rlap mtight"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span><span style="top:-2.9634em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord mtight">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace mtight" style="margin-right:0.0717em;"></span><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span><span style="top:-2.9634em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord mtight">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub></mrow><annotation encoding="application/x-tex">\pmb{x_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>的尺寸为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\pmb{\hat\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></span> 的尺寸为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，两者的矩阵乘结果为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1 \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>矩阵，即为标量。</p><p>上述等式对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\pmb{\hat\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></span> 求微分，并令微分等于0，可以得到如下方程组（这里以向量形式表示），需要使用上述迭代优化算法之一进行求解：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mi>i</mi><mi>m</mi></munderover><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>o</mi><mi>b</mi><msub><mi>s</mi><mi>i</mi></msub></mrow></msub><mo>−</mo><msup><mi>e</mi><mrow><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover></mrow></msup><mo stretchy="false">)</mo><mo>∗</mo><msup><mi>e</mi><mrow><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mover accent="true"><mi mathvariant="bold">β</mi><mo>^</mo></mover></mrow></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\sum_i^m\pmb{x_i}(y_{obs_i} - e^{\pmb{x_i}\pmb{\hat{\beta}}}) * e^{\pmb{x_i\hat\beta}} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="inner"><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace" style="margin-right:0.0502em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3335em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0835em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord vbox mtight"><span class="thinbox mtight"><span class="rlap mtight"><span class="strut" style="height:0.5736em;vertical-align:-0.143em;"></span><span class="inner"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace mtight" style="margin-right:0.0717em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span><span class="mord mtight"><span class="mord vbox mtight"><span class="thinbox mtight"><span class="rlap mtight"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span><span style="top:-2.9634em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord mtight">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace mtight" style="margin-right:0.0717em;"></span><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span><span style="top:-2.9634em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord mtight">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0835em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0835em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord vbox mtight"><span class="thinbox mtight"><span class="rlap mtight"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span><span style="top:-2.9634em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord mtight">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span class="fix"></span></span></span></span><span class="mspace mtight" style="margin-right:0.0717em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span><span style="top:-2.9634em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord mtight">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><h1>使用Python+SciPy实现NLS回归</h1><h2 id="数据准备">数据准备</h2><p>让我们使用非线性最小二乘法将**泊松回归（Poisson regression）**模型拟合到为期两年的自行车租赁日使用量数据集。在<a href="https://gist.github.com/sachinsdate/413910079ab4ef4332e7a97cae55d13a">这里</a>下载数据，数据的前10行如下：</p><p><img src="/2022/07/13/NLS-1-GetStart/4.png" alt="4"></p><h2 id="回归模型">回归模型</h2><h1>参考</h1><p>[1] <a href="https://towardsdatascience.com/a-guide-to-building-nonlinear-least-squares-nls-regression-models-310b97a7baeb">A Guide to Building Nonlinear Least Squares (NLS) Regression Models</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLS </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eigen[1]: GetStart</title>
      <link href="/2022/07/08/EIGEN-1-GetStart/"/>
      <url>/2022/07/08/EIGEN-1-GetStart/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>Eigen是一个高层次开源C++库，有效支持线性代数、矩阵和矢量运算、数值分析及其相关算法。</p><h1>编译安装</h1><p>下载<a href="https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip">Eigen源码</a>，解压缩后，用Cmake-GUI打开，选择MSVC编译：</p><p><img src="/2022/07/08/EIGEN-1-GetStart/1.png" alt="1"></p><p>Configure后修改install目录：</p><p><img src="/2022/07/08/EIGEN-1-GetStart/2.png" alt="2"></p><p>点击Generate生成工程，然后点击open Project打开VS .sln工程文件，编译INSTALL项目</p><p><img src="/2022/07/08/EIGEN-1-GetStart/3.png" alt="3"></p><p>编译结束后，便可以在上面指定的install文件夹下找到Eigen库。</p><h1>测试用例</h1><p>新建<code>CMakeLists.txt</code>和<code>eigen_test.cpp</code>文件，内容分别如下：</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(eigen_test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Eigen3 REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;EIGEN3_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(-----<span class="variable">$&#123;EIGEN3_INCLUDE_DIRS&#125;</span>-----)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(eigen_test eigen_test.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(eigen_test)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Eigen/Dense&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Matrix&lt;<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">2</span>&gt; a, b;</span><br><span class="line">    a &lt;&lt; <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">         <span class="number">1</span>, <span class="number">0</span>;</span><br><span class="line">    b &lt;&lt; <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">         <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line">    std::cout &lt;&lt; a * b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样选择用Cmake-GUI MSVC编译，注意修改<code>Eigen3_DIR</code>：</p><p><img src="/2022/07/08/EIGEN-1-GetStart/4.png" alt="4"></p><p>打开工程，编译eigen_test项目，执行有如下打印：</p><blockquote><p>1 1<br>1 0</p></blockquote><h1>Linux安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install libeigen3-dev</span><br><span class="line">whereis eigen3</span><br></pre></td></tr></table></figure><h1>进阶学习</h1><p>代码可以参考<a href="https://github.com/no5-aaron-wu/EigenChineseDocument">[2]</a>，有能力可以直接阅读<a href="http://eigen.tuxfamily.org/dox/modules.html">官网文档</a></p><h1>参考</h1><p>[1] <a href="http://eigen.tuxfamily.org/dox/modules.html">Eigen官方文档</a></p><p>[2] <a href="https://github.com/no5-aaron-wu/EigenChineseDocument">Eigen中文翻译</a></p>]]></content>
      
      
      <categories>
          
          <category> Eigen </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eigen </tag>
            
            <tag> install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++ 读书笔记04</title>
      <link href="/2022/06/20/EffectiveC-4-ReadNote04/"/>
      <url>/2022/06/20/EffectiveC-4-ReadNote04/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>本文是阅读《Effective C++ 改善程序与设计的55个具体做法（第三版）》的心得笔记第四部分，文章也会按照原书的顺序依次记录各个条款。</p><p>第一部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/04/25/EffectiveC-1-ReadNote01/">effective C++ 读书笔记01</a>。</p><p>第二部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/05/06/EffectiveC-2-ReadNote02/">effective C++ 读书笔记02</a>。</p><p>第三部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/05/24/EffectiveC-3-ReadNote03/">effective C++ 读书笔记03</a>。</p><h1>实现</h1><h2 id="条款26：尽可能延后变量定义式的出现时间">条款26：尽可能延后变量定义式的出现时间</h2><p>尽可能延后变量定义式的出现时间，理由如下：</p><ol><li><p>可以避免不必要的构造和析构成本：比如在使用某对象前，因某些原因函数返回或抛出异常，若已定义了该对象，便仍需要承担构造和析构成本，即便你并未真正的使用它；</p></li><li><p>延后变量定义式的真正意义并不只是延后变量定义式的位置，甚至应当延后定义直到你能为其提供初值实参为止。这样可以避免无意义的default构造成本，而且用具有明显意义的初值来初始化变量，还可以附带说明变量的目的；</p></li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">encryptPassword</span><span class="params">(<span class="keyword">const</span> std::string&amp; password)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(password.<span class="built_in">length</span>() &lt; <span class="number">8</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(<span class="string">&quot;Password is too short&quot;</span>);</span><br><span class="line">&#125;<span class="comment">// 考虑1：在异常之后定义变量</span></span><br><span class="line">    <span class="function">std::string <span class="title">encrypted</span><span class="params">(password)</span></span>;<span class="comment">//考虑2：定义延后至变量能赋初值的时机</span></span><br><span class="line">    <span class="built_in">encrypt</span>(encrypted);</span><br><span class="line">    <span class="keyword">return</span> encrypted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>对于循环而言，变量定义在循环内还是循环外？</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义于循环外 成本：1次构造 + 1次析构 + n次赋值</span></span><br><span class="line">Widget w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; n; ++i)&#123;</span><br><span class="line">    w = <span class="built_in">foo</span>(i);</span><br><span class="line">   <span class="comment">// other...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定于于循环内 成本：n次构造 + n次析构</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; n; ++i)&#123;</span><br><span class="line">    <span class="function">Widget <span class="title">w</span><span class="params">(foo(i))</span></span>;</span><br><span class="line">   <span class="comment">// other...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何选择取决于<strong>赋值成本</strong>和<strong>构造+析构成本</strong>的大小关系，且定义于循环外会导致变量的作用域更大，会一定程度破坏程序的可理解性和易维护性。所以除非你明确地知道<strong>赋值成本</strong>要低于<strong>构造+析构成本</strong>，且你对这段循环代码的效率非常在意，那么更应该选择的是定义于循环内。</p><h2 id="条款27：尽量少做转型动作">条款27：尽量少做转型动作</h2><p>转型（casts）会破坏C++的类型系统（type system）。</p><h3 id="C风格的转型动作（旧式转型）：">C风格的转型动作（旧式转型）：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(new_type)<span class="function">expression</span></span><br><span class="line"><span class="function"><span class="title">new_type</span><span class="params">(expression)</span></span></span><br></pre></td></tr></table></figure><h3 id="C-风格的转型动作（新式转型）：">C++风格的转型动作（新式转型）：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const_cast</span>&lt;new_type&gt; (expression)</span><br><span class="line"><span class="keyword">dynamic_cast</span>&lt;new_type&gt; (expression)</span><br><span class="line"><span class="keyword">reinterpret_cast</span>&lt;new_type&gt; (expression)</span><br><span class="line"><span class="keyword">static_cast</span>&lt;new_type&gt; (expression)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// C++11推出针对智能指针的转型</span></span><br><span class="line">const_pointer_cast&lt;new_type&gt; (expression)</span><br><span class="line">dynamic_pointer_cast&lt;new_type&gt; (expression)</span><br><span class="line">reinterpret_pointer_cast&lt;new_type&gt; (expression)</span><br><span class="line">static_pointer_cast&lt;new_type&gt; (expression)</span><br></pre></td></tr></table></figure><ul><li><code>const_cast</code>：通常用来将对象的<strong>常量性转除</strong>，除了<code>const</code>修饰符外，<code>new_type</code>和<code>expression</code>的类型一致。它是唯一有此功能的C++风格的转型操作符；</li><li><code>dynamic_cast</code>：主要用来执行<strong>安全向下转型</strong>（safe downcasting），即将基类的指针或引用安全地转换成派生类的指针或引用，从而能够用派生类的指针或引用调用非虚函数。这是唯一无法用旧式语法执行的动作，也是唯一可能耗费巨大执行成本的转型动作。当指针是智能指针时候，向下转型需要使用<code>dynamic_pointer_cast</code>；</li><li><code>reinterpret_cast</code>：用来处理无关类型之间的<strong>低级转型</strong>，即新类型的值与原始参数<code>expression</code>有完全相同的比特位，只是被强行解释为新类型。错误的使用<code>reinterpret_cast</code>很容易造成程序的不安全，除非你明确的知道你在做什么；</li><li><code>static_cast</code>：用来强制隐形转换（implicit conversions），即显示转型。编译时检查安全性，但<strong>没有运行时类型检查来保证转换的安全性</strong>。主要有如下几种用法：<ul><li>用于类层次结构中基类和派生类之间指针或引用的转型：<ul><li>进行向上转型（把派生类指针或引用转换成基类表示）是安全的；</li><li>进行向下转型（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。</li></ul></li><li>用于基本数据类型之间的转换，如把int转换成char，把int转换成enum等。这种转换的安全性也要开发人员来保证；</li><li>把void指针转换成目标类型的指针；</li><li>把任何类型的表达式转换成void类型；</li><li>可以将non-const对象转换成const对象，反之则不行（只能通过<code>const_cast</code>）；</li></ul></li></ul><p>旧式转型依旧合法，但新式转型更受欢迎。理由如下：首先，新式转型更容易辨识（无论是人工还是通过工具检索），从而更容易在DEBUG时找出类型系统被破坏的位置；其次，转型动作的分工更加细化，一方面是提醒开发人员是否真的选对了转型动作，另一方面也让编译器更容易发现错误。</p><h3 id="一些错误的转型尝试">一些错误的转型尝试</h3><h4 id="尝试1">尝试1</h4><p>单一对象可能拥有一个以上的地址，即指向它的基类指针和派生类指针可能并不相同，这会随着编译器的不同而不同。所以一些<strong>尝试对对象地址进行转型的骚操作，几乎总是会导致未定义行为</strong>。</p><h4 id="尝试2">尝试2</h4><p>转型操作会返回一个原参数的新类型的副本，所以如下操作会出问题：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onResize</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpecialWindow</span> :</span> <span class="keyword">public</span> Window &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onResize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;Window&gt;(*<span class="keyword">this</span>).<span class="built_in">onResize</span>();<span class="comment">// 通用操作</span></span><br><span class="line">        ...<span class="comment">// 专属操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述代码的本意是希望派生类中的虚函数先调用基类的虚函数实现（通用操作），然后再执行一些派生类专属的操作。但是转型动作构建了一个<code>*this</code>对象的基类类型副本，并由这个副本调用<code>onResize</code>函数，那么通用操作所修改的属性是这个副本的，而不是<code>*this</code>对象的。正确的写法如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpecialWindow</span> :</span> <span class="keyword">public</span> Window &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onResize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Window::<span class="built_in">onResize</span>();<span class="comment">// 通用操作</span></span><br><span class="line">        ...<span class="comment">// 专属操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="尝试3">尝试3</h4><p>过度的使用<code>dynamic_cast</code>会导致程序效率低下。如前所述，一般我们使用<code>dynamic_cast</code>的目的是为了将基类的指针或引用安全地转换成派生类的指针或引用，从而能够用派生类的指针或引用调用非虚函数。那么想要规避使用<code>dynamic_cast</code>无非有下面两个思路：</p><ul><li>修改代码，窄化类型，直接持有派生类的指针即可；</li><li>将想要调用的非虚函数实现为虚函数，基类中缺省实现（条款34有进一步讨论），派生类中有具体实现，用多态的方式去解决；</li></ul><h3 id="总结">总结</h3><ol><li>尽量避免使用转型，尤其是在注重效率的代码中避免使用<code>dynamic_cast</code>；</li><li>当转型不可避免时，可以将其封装在函数中供用户使用；</li><li>优先使用新式转型，而不是旧式转型。</li></ol><h2 id="条款28：避免返回-handles-指向对象内部成分">条款28：避免返回 handles 指向对象内部成分</h2><p>所谓的handles（号码牌）包括指针、引用和迭代器。</p><p>应当避免返回指向对象内部成分的handles，原因有2：</p><ul><li><ol><li>这样做会破坏封装性</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Point</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : <span class="built_in">x_</span>(x), <span class="built_in">y_</span>(y) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        x_ = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        y_ = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x_;</span><br><span class="line">    <span class="keyword">int</span> y_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RectData</span> &#123;</span></span><br><span class="line">    Point ulhc_;</span><br><span class="line">    Point lrhc_;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RectData</span>(<span class="keyword">const</span> Point&amp; p1, <span class="keyword">const</span> Point&amp; p2) : <span class="built_in">ulhc_</span>(p1), <span class="built_in">lrhc_</span>(p2) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rectangle</span>(<span class="keyword">const</span> Point&amp; p1, <span class="keyword">const</span> Point&amp; p2) &#123;</span><br><span class="line">        pData = std::make_shared&lt;RectData&gt;(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point&amp; <span class="title">getUpperLeft</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pData-&gt;ulhc_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Point&amp; <span class="title">getLowerRight</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pData-&gt;lrhc_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;RectData&gt; pData = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">100</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> Rectangle <span class="title">rect</span><span class="params">(p1, p2)</span></span>;</span><br><span class="line"></span><br><span class="line">    rect.<span class="built_in">getUpperLeft</span>().<span class="built_in">setX</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子虽然能通过编译，但实际上是与设计初衷相违背的。<code>getUpperLeft</code>和<code>getLowerRight</code>被声明为const成员函数，即表明了它们会给用户返回相关坐标点，但并不允许用户修改它。但是这里返回的是内部private变量的引用，这一方面相当于把priavte变量的封装性降低到public，更糟糕的是用户就可以通过返回的引用间接的更改<code>rect</code>对象的内部数据，即便<code>rect</code>对象被声明为const。</p><p>解决方法也很简单，只要对给返回类型加上const即可。虽然仍然降低了封装性，但是是有限度的降低，即只赋予了用户读权限，而没有放开写权限。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">const</span> Point&amp; <span class="title">getUpperLeft</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pData-&gt;ulhc_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> Point&amp; <span class="title">getLowerRight</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pData-&gt;lrhc_;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>这样做可能会导致空悬的handles</li></ol></li></ul><p>虽然使用const能解决封装性的问题，但无法解决<strong>handles可能比其所指的内部对象更长寿</strong>的问题。即可能存在内部对象已析构，但handles还留存的问题。尤其是临时变量的析构，不太容易察觉。考虑如下情况：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GUIObject</span> &#123;</span> ... &#125;;</span><br><span class="line"><span class="function"><span class="keyword">const</span> Rectangle <span class="title">boundingBox</span><span class="params">(<span class="keyword">const</span> GUIObject&amp; obj)</span></span>;<span class="comment">// 以by-value方式返回一个矩形</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户调用</span></span><br><span class="line">GUIObject* pgo;<span class="comment">// </span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> Point* pUL = &amp;(<span class="built_in">boundingBox</span>(*pgo).<span class="built_in">getUpperLeft</span>());</span><br></pre></td></tr></table></figure><p>上述代码中，<code>boundingBox</code>函数会返回一个临时的<code>Rectangle</code>对象，然后这个临时对象调用<code>getUpperLeft</code>返回一个引用（handle）指向对象内部成分，更具体的说，是表征矩形右上角点坐标的<code>Point</code>成员对象的引用。然后用一个指针指向了该引用。但是随着该语句的结束，临时的<code>Rectangle</code>对象将会析构，相应的，其中的<code>Point</code>成员对象也会被析构，最终导致<code>pUL</code>指针指向一个不复存在的对象，形成空悬/虚吊（dangling）！</p><p>所以，应当尽量避免返回 handles 指向对象内部成分，但并不意味着绝对禁止，有时候你不得不这样做。比如<code>std::string</code>和<code>std::vector</code>的<code>operator[]</code>操作符就允许返回容器内元素的引用。但不可避免的，这些元素也会随容器的销毁而销毁，所以也要谨慎。</p><h2 id="条款29：为“异常安全”而努力是值得的">条款29：为“异常安全”而努力是值得的</h2><h3 id="两个条件">两个条件</h3><p>异常安全（Exception Safety）是指，在异常被抛出时，满足以下两个条件：</p><ul><li><p><strong>不泄露任何资源</strong>。这里资源包括动态内存、互斥锁等；</p></li><li><p><strong>不允许数据败坏</strong>。不会因为异常抛出而导致出现空悬指针等未定义行为。</p></li></ul><p>如下示例则不满足上述两个条件：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrettyMenu</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeBackground</span><span class="params">(std::istream&amp; imgSrc)</span></span>;<span class="comment">// 改变背景图像</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Mutex mutex;<span class="comment">// 互斥器，用于多线程环境下的并发控制</span></span><br><span class="line">    Image* bgImage;<span class="comment">// 目前的北京图像</span></span><br><span class="line">    <span class="keyword">int</span> imageChanges;<span class="comment">// 背景图像被改变的次数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrettyMenu::changeBackground</span><span class="params">(std::istream&amp; imgSrc)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lock</span>(&amp;mutex);<span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">delete</span> bgImage;<span class="comment">// 销毁旧的背景图像</span></span><br><span class="line">    ++imageChanges;<span class="comment">// 图像变更次数+1</span></span><br><span class="line">    bgImage = <span class="keyword">new</span> <span class="built_in">Image</span>(imgSrc);<span class="comment">// 创建新的背景图像</span></span><br><span class="line">    <span class="built_in">unlock</span>(&amp;mutex);<span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述例子中，若<code>new Image</code>时抛出异常，则<code>unlock(&amp;mutex)</code>无法被调用到，互斥锁资源泄漏；<code>bgImage</code>已经被销毁却没有指向新的背景图像，出现了空悬指针。</p><h3 id="三个等级">三个等级</h3><p>异常安全函数会提供如下三种等级的保证之一：</p><ul><li><p><strong>基本承诺</strong>：如果异常被抛出，程序内的任何事务仍然保持在有效状态下，没有资源泄漏，也没有数据败坏。在上例中，可以修改<code>changeBackground</code>函数，使<code>PrettyMenu</code>在异常被抛出时，继续拥有原背景图像，或者拥有一个缺省背景图像，让程序能够继续有效运行（只要合法就行，不能强求如何实现，此所谓<strong>基本</strong>）；</p></li><li><p><strong>强烈保证</strong>：如果异常被抛出，程序状态不改变。即在此异常安全等级保证下的函数要么完全成功执行，要么回退到函数执行之前的状态；</p></li><li><p><strong>不抛掷保证</strong>：函数承诺绝不抛出异常，总是能够完成原来承诺的功能。如所有针对内置类型的操作都能够提供nothrow保证。</p><ul><li><p>在原书中，提到了<code>throw()</code>，用法如函数声明<code>int dosomething() throw();</code>并不是指不会抛出异常，而是指如果抛出异常，则将是严重错误，会调用unexpected函数进而abort；</p></li><li><p><code>throw()</code>在不同编译器上的表现不一致，现在已经不推荐使用。详细讨论可参考[<a href="https://stackoverflow.com/questions/88573/should-i-use-an-exception-specifier-in-c">Should I use an exception specifier in C++?</a>]和<a href="http://gotw.ca/publications/mill22.htm">A Pragmatic Look at Exception Specifications</a>；</p></li><li><p>在C++11中，有了更可靠有效的关键字<code>noexcept</code>，具体用法参见<a href="https://zh.cppreference.com/w/cpp/language/noexcept_spec">noexcept 说明符</a>和<a href="https://zh.cppreference.com/w/cpp/language/noexcept">noexcept 运算符</a>。</p></li></ul></li></ul><p>如果可能的话，我们应当尽可能的提供最强等级的nothrow保证。但很多时候这很难实现，对于大多数函数而言，往往需要在基本承诺和强烈保证之间进行选择。之前的例子提供<strong>强烈保证</strong>的实现版本如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrettyMenu</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeBackground</span><span class="params">(std::istream&amp; imgSrc)</span></span>;<span class="comment">// 改变背景图像</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Mutex mutex;<span class="comment">// 互斥器，用于多线程环境下的并发控制</span></span><br><span class="line">    std::shared_ptr&lt;Image&gt; bgImage;<span class="comment">// RAII 防止内存泄漏，参见条款13</span></span><br><span class="line">    <span class="keyword">int</span> imageChanges;<span class="comment">// 背景图像被改变的次数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrettyMenu::changeBackground</span><span class="params">(std::istream&amp; imgSrc)</span> </span>&#123;</span><br><span class="line">    <span class="function">Lock <span class="title">ml</span><span class="params">(&amp;mutex)</span></span>;<span class="comment">// RAII 资源管理类，参见条款13，14</span></span><br><span class="line">    bgImage.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Image</span>(imgSrc));<span class="comment">// 若new失败，则不会reset</span></span><br><span class="line">    ++imageChanges;<span class="comment">// 事情真的完成了再++cnt</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="copy-and-swap-策略">copy and swap 策略</h3><p><strong>copy and swap</strong> 策略的原则是：为你打算修改的对象（原件）拷贝一份副本，然后在副本上做一切必要的修改。若有任何修改动作抛出异常，原对象仍保持未改变状态。待所有修改操作都成功后，再将修改过的那个副本和原对象在一个不抛出异常的swap操作中进行置换。</p><p>基于上述示例的改写如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PMImpl</span> &#123;</span><span class="comment">// Pretty Menu Impl</span></span><br><span class="line">std::shared_ptr&lt;Image&gt; bgImage;</span><br><span class="line"><span class="keyword">int</span> imageChanges;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrettyMenu</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeBackground</span><span class="params">(std::istream&amp; imgSrc)</span></span>;<span class="comment">// 改变背景图像</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Mutex mutex;<span class="comment">// 互斥器，用于多线程环境下的并发控制</span></span><br><span class="line">    std::shared_ptr&lt;PMImpl&gt; pImpl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrettyMenu::changeBackground</span><span class="params">(std::istream&amp; imgSrc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::swap;<span class="comment">// 参见条款25</span></span><br><span class="line">    <span class="function">Lock <span class="title">ml</span><span class="params">(&amp;mutex)</span></span>;<span class="comment">// RAII 资源管理类</span></span><br><span class="line">    <span class="function">std::shared_ptr&lt;PMImpl&gt; <span class="title">pNew</span><span class="params">(<span class="keyword">new</span> PMImpl(*pImpl))</span></span>;<span class="comment">// 拷贝副本</span></span><br><span class="line">    pNew-&gt;bgImage.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Image</span>(imgSrc)); <span class="comment">// 修改副本</span></span><br><span class="line">    ++pNew-&gt;imageChanges;</span><br><span class="line">    <span class="built_in">swap</span>(pImpl, pNew);<span class="comment">// 置换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，用到了pimpl手法，即将隶属于对象的数据从原对象放进另一个对象中，然后赋予原对象一个指针，指向那个所谓的实现对象（implementation object）。这里让<code>PMImpl</code>成为一个struct而不是一个class，是因为在其封装性因<code>pImpl</code>是private成员而得到保证的前提下，用struct实现会更方便。</p><h3 id="异常安全的连带影响（side-effects）">异常安全的连带影响（side effects）</h3><p>函数提供的“异常安全保证等级”只<strong>取决于</strong>其调用的<strong>各个子函数的“最不安全者”</strong>。</p><p>考虑如下使用了 copy and swap 策略的示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> someFunc &#123;</span><br><span class="line">    ...<span class="comment">// 对local状态做一份副本</span></span><br><span class="line">    <span class="built_in">f1</span>();</span><br><span class="line">    <span class="built_in">f2</span>();</span><br><span class="line">    ...<span class="comment">// 将修改后的状态置换过来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然 copy and swap 策略在尽力<strong>强烈保证</strong>异常安全，但如果<code>f1</code>或<code>f2</code>函数的异常安全等级比<strong>强烈保证</strong>低，则<code>someFunc</code>就很难成为<strong>强烈异常安全</strong>。即便<code>f1</code>和<code>f2</code>都是强烈异常安全的，但<code>f1</code>成功做了修改，<code>f2</code>随后抛出异常而回退状态（<code>f1</code>成功执行后的状态），却也无法恢复<code>someFunc</code>函数被调用前的状态，故也称不上<strong>强烈异常安全</strong>。</p><p>除此之外，copy and swap 策略会为每一个即将被改动的对象创建副本，这可能会对内存和效率产生不小的挑战。</p><p>综上所述，当你在撰写代码时，应当思考如何让代码具有异常安全性：首先，以对象管理资源，可以阻止内存泄漏；其次，在三个异常安全等级中选择一个合适的实施于你写的每一个函数上，且应当选择实际可实施的最强烈等级。</p><p>但总是想要提供<strong>强烈保证</strong>的异常安全并非易事，如果你能证明实现<strong>强烈保证</strong>不切实际时，可以退而求其次，选择<strong>基本保证</strong>。若你调用了不具备异常安全性的旧代码，你才别无选择地不提供任何异常安全性的保证。</p><h2 id="条款30：透彻了解-inlining-的里里外外">条款30：透彻了解 inlining 的里里外外</h2><p>inline函数，即内联函数会在函数调用处展开代码，直接将函数体插入函数调用处，从而省去了函数调用的开销。但相应地，代价就是会导致函数无法被复用，从而导致代码膨胀，（过度的inlining）进而可能会导致额外的换页行为（paging），降低指令cache的命中率，反而降低了代码效率。</p><p>关于inline，还有如下几点需要注意：</p><h3 id="inline只是对编译器的申请">inline只是对编译器的申请</h3><p>inline只是对编译器的申请或建议，并不是强制命令，<strong>编译器有权利</strong>对其认为不适合inline的函数<strong>拒绝</strong>inline。此外，原书还提到如果编译器拒绝，通常它会给出warning信息，但在VS2019中实测并未看到。</p><p>inline的申请方式有两种：</p><ul><li>显示inline：在函数定义时使用<code>inline</code>关键字；</li><li>隐式inline：在（头文件中）类内实现的成员函数或者friend函数；</li></ul><h3 id="inline和template并无必然联系">inline和template并无必然联系</h3><p>inline函数和template函数通常都被定义于头文件中（这是因为inline的<strong>函数体替换操作</strong>和template的<strong>具现化操作</strong>通常都是在编译期执行的），而且不少简短的template函数都是带有<code>inline</code>关键字（如下例），但这并不代表两者有着必然的因果关系。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <span class="title">std::max</span><span class="params">(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</span></span>&#123; <span class="comment">//可以申请inline，但不是必须申请</span></span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? b : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不适合（编译器拒绝）进行inline的函数类型">不适合（编译器拒绝）进行inline的函数类型</h3><ul><li><strong>复杂函数</strong>：如函数体内有循环或者递归；</li><li><strong>虚函数</strong>：inline是编译器决定的，而虚函数需要等到运行期才能确定；</li><li><strong>构造/析构函数</strong>：即便构造函数体为空，但编译器在编译时会生成调用基类或者成员对象的构造函数的代码，同时为其生成精致复杂的异常处理代码；若<strong>基类</strong>或者<strong>派生类成员对象</strong>的构造/析构函数为inline，其在派生类中的代码展开也会导致不合理的代码膨胀；</li><li><strong>通过函数指针调用的函数</strong>：函数指针不可能指向一个并不存在的函数，因此通过函数指针调用的函数仍会生成一个outlined函数本体，示例如下：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;...&#125; <span class="comment">// 假设编译器不拒绝 inline “对f的调用”</span></span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span> (* pf)() = f;<span class="comment">// pf 指向 f</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">f</span>();     <span class="comment">// 这个调用将被inlined，因为是个正常调用</span></span><br><span class="line"><span class="built_in">pf</span>();     <span class="comment">// 这个很可能不被inlined，因为是通过函数指针调用的</span></span><br></pre></td></tr></table></figure><h3 id="过度inline会为调试和发布带来困难">过度inline会为调试和发布带来困难</h3><p>inline是代码嵌入与展开，而非函数调用，所以某些编译器不支持inline的单步Debug（就像宏展开一样不支持调试），某些支持inline函数调试的编译环境也只是在Debug中禁止发生inlining来实现的。</p><p>此外，若inline函数发生修改，则（客户端）调用它的代码全都要重新编译，而non-inline函数则只需要重新链接即可。如果采用动态库的方式进行发布，non-inline函数的升级甚至都可以不被察觉。</p><h2 id="条款31：将文件间的编译依存关系降到最低">条款31：将文件间的编译依存关系降到最低</h2><p>C++并没有把<strong>将接口从实现中分离</strong>这件事做的很好。即（头文件中）类定义式中不仅包含了接口，而且可以有实现。如下示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;date.h&quot;</span><span class="comment">// 定义 Date 类</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;address.h&quot;</span><span class="comment">// 定义 Address 类</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 接口</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr);</span><br><span class="line">    <span class="function">std::string <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">address</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 实现</span></span><br><span class="line">    std::string theName;</span><br><span class="line">    Date theBirthDate;</span><br><span class="line">    Address theAddress;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上例中，<code>Person</code>类的定义文件（大概率也是头文件）通过<code>#include</code>与<code>date.h</code>和<code>address.h</code>形成了<strong>编译依存关系</strong>（compilation dependency），如果这些头文件中有任何变化，或者这些头文件所依赖（include）的其他头文件有任何变化，则任何使用了<code>Person</code>类的文件都得重新编译。</p><p>当然，该定义文件与标准库<code>&lt;string&gt;</code>也存在编译依存关系，但标准头文件一般不会改动，且由于<strong>预编译头</strong>的加持，其编译不会成为瓶颈，故这里我们仅讨论自己实现定义的头文件。</p><h3 id="Handle-Class（pimpl-手法）">Handle Class（pimpl 手法）</h3><p>使用pimpl（pointer to implementation）手法可以实现接口和实现的分离：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// person.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span><span class="comment">// std::string 定义</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span><span class="comment">// std::shared_ptr 定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 前置声明 替代 #include</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonImpl</span>;</span><span class="comment">// Person实现类的前置声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 接口 只声明，实现部分放到cpp中</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr);</span><br><span class="line">    <span class="function">std::string <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">address</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;PersonImpl&gt; pImpl;<span class="comment">// 指针指向Person实现类</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;person.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;person_impl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;date.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;address.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr)</span><br><span class="line">    : <span class="built_in">pImpl</span>(<span class="keyword">new</span> <span class="built_in">PersonImpl</span>(name, birthday, addr)) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">Person::name</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pImpl-&gt;<span class="built_in">name</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在上例中，<code>Person</code>类的使用者（<code>#include &quot;person.h&quot;</code>）完全不用关心<code>Person</code>类接口及其实现类<code>PersonImpl</code>的实现细节（<code>PersonImpl</code>与<code>Person</code>有着完全相同的成员函数，两者接口完全相同），也不需要关心其他关联类<code>Date</code>和<code>Address</code>的实现细节。这些类的实现的任何修改也不需要使用者代码的重新编译，真正实现了<strong>接口与实现分离</strong>！像<code>Person</code>这样使用pimpl手法的类通常称为<strong>Handle class</strong>。</p><p>这里做到分离的<strong>关键</strong>点在于用<strong>声明的依存性</strong>替代<strong>定义的依存性</strong>。这正是<strong>编译依存性最小化</strong>的<strong>本质</strong>：让头文件尽可能自我满足，如果做不到，则也要依赖于其他文件的声明式而非定义式。</p><p>具体到设计策略，有如下几点：</p><ul><li><strong>如果使用 object references 或 object pointers 可以完成任务，就不要使用objects</strong>。如果定义某类型的objects，就需要使用该类型的定义式；而定义该类型的指针或引用，则只需要类型声明式。</li><li><strong>尽量以 class 声明式替换 class 定义式</strong>。函数声明中的 class 类型可以只用声明式，而并不需要类的定义，即使函数是以by-value的形式传递参数（虽然这样不好，参见条款20），亦是如此。</li><li><strong>为声明式和定义式提供不同的头文件</strong>。比如上面提到的<code>Date</code>类，可以分为提供声明式的<code>datefwd.h</code>和提供定义式的<code>date.h</code>，那么就可以用声明式头文件代替前置声明，在真正调用函数的源文件中include定义式头文件。这种方式在STL库中使用较多，具体可参考<code>&lt;iosfwd&gt;</code>与<code>sstream</code>，<code>fstream</code>，<code>iostream</code>等。</li></ul><h3 id="Interface-class">Interface class</h3><p>另一个实现Handle class的方法就是构建一个abstract base class（抽象基类），称为<strong>Interface class</strong>。</p><p>这种类的目的是一一描述派生类的接口，因此它通常不会包含成员变量，也没有构造函数， 只有一个virtual析构函数以及一组pure virtual函数，用来描述整个接口。<code>Person</code>类的例子如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// person.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Person</span>();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">address</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> std::shared_ptr&lt;Person&gt; <span class="title">create</span><span class="params">(<span class="keyword">const</span> std::string&amp; name, </span></span></span><br><span class="line"><span class="params"><span class="function">                                          <span class="keyword">const</span> Date&amp; birthday, </span></span></span><br><span class="line"><span class="params"><span class="function">                                          <span class="keyword">const</span> Address&amp; addr)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person.cpp</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;Person&gt; <span class="title">Person::create</span><span class="params">(<span class="keyword">const</span> std::string&amp; name, </span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">const</span> Date&amp; birthday, </span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">const</span> Address&amp; addr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::shared_ptr&lt;Person&gt;(<span class="keyword">new</span> <span class="built_in">RealPerson</span>(name, birthday, addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~<span class="built_in">Person</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// real_person.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealPerson</span>:</span> <span class="keyword">public</span> Person &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RealPerson</span>(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> Date&amp; birthday, </span><br><span class="line">               <span class="keyword">const</span> Address&amp; addr)</span><br><span class="line">        : <span class="built_in">theName</span>(name), <span class="built_in">theBirthDate</span>(birthday), <span class="built_in">theAddress</span>(addr) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">RealPerson</span>() &#123;&#125;</span><br><span class="line">    <span class="function">std::string <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">address</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string theName;</span><br><span class="line">    Date theBirthDate;</span><br><span class="line">    Address theAddress;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户代码</span></span><br><span class="line">std::string name;</span><br><span class="line">Date dateOfBirth;</span><br><span class="line">Address address;</span><br><span class="line">...</span><br><span class="line"><span class="function">std::shared_ptr&lt;Person&gt; <span class="title">pp</span><span class="params">(Person::create(name, dateOfBirth, address))</span></span>;</span><br><span class="line">...</span><br><span class="line">std::cout &lt;&lt; pp-&gt;<span class="built_in">name</span>() &lt;&lt; <span class="string">&quot; was born on &quot;</span> &lt;&lt; pp-&gt;<span class="built_in">birthDate</span>()</span><br><span class="line">    &lt;&lt; <span class="string">&quot; and now lives at &quot;</span> &lt;&lt; pp-&gt;<span class="built_in">address</span>();</span><br></pre></td></tr></table></figure><p>在上述例子中，<code>create</code>函数是一个工厂函数，用于返回基类指针，指向动态分配的派生类对象。该工厂函数可以基于额外的参数值等条件，创建不同派生类的对象。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIMD[3]: NEON 内联汇编</title>
      <link href="/2022/06/14/SIMD-3-NeonAssembly/"/>
      <url>/2022/06/14/SIMD-3-NeonAssembly/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>汇编作为代码的最底层实现，大概的流程就是加载数据到寄存器，计算，把寄存器的值写回内存。</p><p>一般运行瓶颈就在于数据的加载和写出还有指令之间的数据依赖等等，所以怎么更高效的读写数据还有使相邻指令之间的数据依赖最小等等，是做优化经常都会遇到的问题，当然这个很吃经验，但是也总是会有一些套路可寻。</p><h1>ARMv7与ARMv8对比</h1><h2 id="寄存器">寄存器</h2><h3 id="通用寄存器">通用寄存器</h3><p>ARMv7（或 ARMv8 的AArch32执行状态） 有 <strong>16 个 32-bit 通用寄存器</strong>，用 <code>R0-R15</code> 表示。</p><p>ARMv8（默认指AArch64执行状态） 有 <strong>31 个 64-bit 通用寄存器</strong>，用 <code>X0-X30</code> 表示。还有一个不同名称（取决于使用它的上下文）的特殊寄存器。和ARMv7不一样的是，这31个寄存器也可以作为 32-bit 寄存器来用，用 <code>W0-W30</code> 表示，其中 <code>Wn</code> 是 <code>Xn</code> 的低32位。</p><h3 id="向量寄存器">向量寄存器</h3><p>ARMv7 包含 <strong>16 个 128-bit 向量寄存器</strong>，用 <code>Q0-Q15</code> 表示，其中每个Q寄存器又可以拆分成两个 64-bit 向量寄存器来用，用 <code>D0-D31</code> 来表示，对应关系如下图：</p><p><img src="/2022/06/14/SIMD-3-NeonAssembly/1.png" alt="1"></p><p>ARMv8（AArch64）具有<strong>32 x 128位向量寄存器</strong>，用<code>V0-V31</code>表示。用法参见<a href="https://no5-aaron-wu.github.io/2022/06/13/SIMD-1-NEON/">NEON入门</a>。每个V寄存器也可以只使用其低若干位，只使用低64-bit的叫做<strong>D（双字）寄存器</strong>，只使用低32位的叫做<strong>S（单字）寄存器</strong>，只使用低16位的叫做<strong>H（半字）寄存器</strong>。对应关系如下图：</p><p><img src="/2022/06/14/SIMD-3-NeonAssembly/1.svg" alt="1"></p><h2 id="指令格式">指令格式</h2><h3 id="ARMv7-AArch32指令语法">ARMv7/AArch32指令语法</h3><p>ARMv7-A/AArch32 NEON 指令（与 VFP 一样）的所有助记符都以字母V开头。 指令通常能够对不同的数据类型进行操作，这在指令编码中指定。 尺寸用指令的后缀表示。 元素的数量由指定的寄存器大小和操作的数据类型指示。 指令具有以下一般格式：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">V&#123;&lt;mod&gt;&#125;&lt;op&gt;&#123;&lt;shape&gt;&#125;&#123;&lt;cond&gt;&#125;&#123;.&lt;dt&gt;&#125;&#123;&lt;dest&gt;&#125;, src1, src2</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p><code>&#123;&#125;</code>表示可选参数</p></li><li><p><code>&lt;mod&gt;</code> - 意为modifilers，有如下几种取值：</p><ul><li><code>Q</code>：指令采用饱和算法，使结果在指定数据类型范围内饱和，如<code>VQABS</code>、<code>VQSHL</code>等；</li><li><code>H</code>：指令将结果减半。 它通过右移一位（实际上是除2并截断）来实现，例如 <code>VHADD</code>、<code>VHSUB</code>；</li><li><code>D</code>：指令将结果加倍，如<code>VQDMULL</code>、<code>VQDMLAL</code>、<code>VQDMLSL</code>和<code>VQ&#123;R&#125;DMULH</code>；</li><li><code>R</code>：指令会对结果进行四舍五入，相当于在截断前给结果加0.5，如<code>VRHADD</code>、<code>VRSHR</code>。</li></ul></li><li><p><code>&lt;op&gt;</code> - 操作名，例如加<code>ADD</code>，减<code>SUB</code>，乘<code>MUL</code>；</p></li><li><p><code>&lt;shape&gt;</code> - 尺寸</p><ul><li><code>Long（L）</code>：指令对双字向量操作数进行运算并产生四字向量结果。 结果元素是操作数宽度的两倍。 <code>加长(lengthening)</code>指令在指令后附加一个 L；</li></ul><p><img src="/2022/06/14/SIMD-3-NeonAssembly/2.png" alt="2"></p><ul><li><code>Wide（W）</code>：指令对双字向量操作数和四字向量操作数进行运算，产生四字向量结果。 结果和第一个操作数的元素是第二个操作数元素宽度的两倍。 <code>加宽(widening)</code>指令在指令后附加了一个W；</li></ul><p><img src="/2022/06/14/SIMD-3-NeonAssembly/3.png" alt="3"></p><ul><li><code>Narrow（N）</code>：指令对四字向量操作数进行操作，产生双字向量结果。结果元素是操作数元素宽度的一半。<code>窄化(narrowing)</code>指令是再指令后附加一个N；</li></ul><p><img src="/2022/06/14/SIMD-3-NeonAssembly/4.png" alt="4"></p></li><li><p><code>&lt;cond&gt;</code> - 条件，与 IT 指令一起使用；</p></li><li><p><code>&lt;.dt&gt;</code> - 数据类型，例如 s8、u8、f32 等；</p></li><li><p><code>&lt;dest&gt;</code> - 目标；</p></li><li><p><code>&lt;src1&gt;</code> - 源操作数 1；</p></li><li><p><code>&lt;src2&gt;</code> - 源操作数 2；</p></li></ul><h3 id="AArch64指令语法">AArch64指令语法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;&lt;prefix&gt;&#125;&lt;op&gt;&#123;&lt;suffix&gt;&#125;  Vd.&lt;T&gt;, Vn.&lt;T&gt;, Vm.&lt;T&gt;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p><code>&lt;prefix&gt;</code> - 前缀，如使用 <code>S/U/F/P</code> 来表示有符号/无符号/浮点/布尔数据类型；</p></li><li><p><code>&lt;op&gt;</code> - 操作名，例如 <code>ADD</code>、<code>AND</code> 等；</p></li><li><p><code>&lt;suffix&gt;</code> - 后缀</p><ul><li><code>P</code>：将向量按对操作，例如<code>ADDP</code>；</li><li><code>V</code>：跨所有的数据通道操作，例如<code>FMAXV</code>；</li><li><code>2</code>：在宽（widening）指令/窄（narrowing）指令中操作数据的高位部分。例如<code>ADDHN2</code>，<code>SADDL2</code>；</li></ul></li><li><p><code>&lt;T&gt;</code> - 数据类型，通常是8B/16B/4H/8H/2S/4S/2D等。B（字节）代表8位数据类型；H（半字）代表16位数据宽度；S（单字）代表32位数据宽度，可以是32位整数或单精度浮点；D（双字）代表64位数据宽度，可以是64位整数或双精度浮点。</p></li></ul><h1>内联汇编的一般格式</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">qualifiers</span> <span class="params">( </span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">// 汇编代码部分</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    : OutputOperands <span class="comment">//在内联汇编代码中被修改的变量列表</span></span></span></span><br><span class="line"><span class="params"><span class="function">    : InputOperands  <span class="comment">//在内联汇编代码中用到的变量列表</span></span></span></span><br><span class="line"><span class="params"><span class="function">    : Clobbers       <span class="comment">//在内联汇编代码中用到的寄存器列表</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>更为具体的解释可以参见<a href="https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C">这篇文档</a>，这里简要说明如下：</p><ul><li><code>asm</code>：也可写作<code>__asm__</code></li><li><code>qualifiers</code>：一般用<code>volatile</code>修饰词，实际没有作用，整个汇编块都是隐式的volatile；</li><li><code>OutputOperands</code>：在内联汇编中会被修改的变量列表，变量之间用逗号隔开，每个变量的格式是：<code>[asmSymbolicName] &quot;constraint&quot;(cvariablename)</code><ul><li><code>cvariablename</code>：表示变量原来的名字；</li><li><code>asmSymbolicName</code>：表示变量在内联汇编代码中的别名，一般和<code>cvariablename</code>一样，在汇编代码中就可以通过<code>%[asmSymbolicName]</code>去使用该变量，<code>asmSymbolicName</code>可以省略，此时可以通<code>%0</code>，<code>%1</code>等去使用变量；</li><li><code>constraint</code>：用于定义变量的存放位置，一般填<code>=r</code>，具体如下：<ul><li><code>r</code> 表示使用任何可用的寄存器</li><li><code>w</code> 表示浮点寄存器</li><li><code>m</code> 表示使用变量的内存地址</li><li><code>+</code> 可读可写</li><li><code>=</code> 只写</li><li><code>&amp;</code> 表示该输出操作数不能使用输入部分使用过的寄存器，只能用<code>+&amp;</code>或<code>=&amp;</code>的方式使用</li></ul></li></ul></li><li><code>InputOperands</code>：在内联汇编中用到的输入变量列表，变量之间用逗号隔开，每个变量的格式是：<code>[asmSymbolicName] &quot;constraint&quot;(cexpression)</code>。和输出不一样地方是，首先要按OutputOperands列表的顺序再列一遍，但是constraint用数字代替从0开始（<em>个人理解，再列一遍的原因输出变量列表中将其约束为只写<code>=</code>，若输出变量真的是只写，这里其实不用再列一遍</em>）。然后才是写其他只读变量（输入变量），只读变量constraint填<code>r</code>等。同样<code>asmSymbolicName</code>可以省略，此时可以通<code>%0</code>，<code>%1</code>等去使用变量，按声明顺序，输出变量在前，只读变量在后（注意<code>InputOperands</code>的序号会接着<code>OutputOperands</code>的序号递增，如下）；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">qualifiers</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">// 汇编代码部分</span></span></span></span><br><span class="line"><span class="params"><span class="function">: <span class="string">&quot;=r&quot;</span>(a),<span class="comment">// %0</span></span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="string">&quot;=r&quot;</span>(b),<span class="comment">// %1</span></span></span></span><br><span class="line"><span class="params"><span class="function">    : <span class="string">&quot;0&quot;</span>(a),<span class="comment">// %2</span></span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="string">&quot;1&quot;</span>(b),<span class="comment">// %3</span></span></span></span><br><span class="line"><span class="params"><span class="function">     <span class="string">&quot;r&quot;</span>(c)<span class="comment">// %4</span></span></span></span><br><span class="line"><span class="params"><span class="function">    : <span class="string">&quot;cc&quot;</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">     <span class="string">&quot;memory&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      ...</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>Clobbers</code>：一般是<code>&quot;cc&quot;</code>，<code>&quot;memory&quot;</code>开头，然后接着填内联汇编中用到的通用寄存器和向量寄存器：<ul><li><code>&quot;cc&quot;</code>表示内联汇编代码修改了标志寄存器；</li><li><code>&quot;memory&quot;</code>表示汇编代码对输入和输出操作数执行内存读取或写入操作（读写参数列表之一的变量指向的内存）；</li></ul></li></ul><h1>常用汇编符号</h1><ul><li><code>[]</code>：方括号表示取地址值，类似于C语言中<code>*ptr</code>，将括号内的值作为地址，获取该地址处的值；</li><li><code>!</code>：感叹号用于数据转移指令（<code>LD</code>，<code>ST</code>）中，用于<strong>自增/减</strong>或者<strong>预索引</strong>操作：</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指令末尾的!表示，写完内容后地址会自增</span></span><br><span class="line"><span class="comment">// 增加的字节数就是读取的字节数</span></span><br><span class="line"><span class="comment">// &#123;d4-d5&#125;就是q2寄存器</span></span><br><span class="line"><span class="string">&quot;vld1.f32   &#123;d4-d5&#125;, [%[arr1Ptr]]!   \n&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//预索引：该指令先令R1=R1+20，把地址R1处的值加载到R0，即先根据寻址规则修改寄存器，然后根据寄存器中的值访问内存</span></span><br><span class="line"><span class="comment">//如果没有!，则仅将R1+20处的值加载到R0，R1本身不会更新</span></span><br><span class="line">LDR.W  R0,  [R1,#<span class="number">20</span>]! </span><br><span class="line"><span class="comment">//后索引：先将地址R1处的值加载到R0，然后令R1=R1+20</span></span><br><span class="line">LDR.W  R0, [R1], #<span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li><code>%</code>：<code>%[xxx]</code>使用名为<code>xxx</code>的变量；<code>%0</code>使用输出/输入列表中第0个变量；在ARMv8中，可以为变量加上约束，<code>%w[xxx]</code>或者<code>%w0</code>将使用变量的W寄存器（低32-bit），<code>%x[xxx]</code>或<code>%x0</code>将使用变量的X寄存器，与<code>%[xxx]</code>或<code>%0</code>一致；对于表示向量寄存器的也可以为其添加后缀，<code>%0.4S</code>将表示使用128-bit向量寄存器，并且其包含4个32-bit的数据元素。</li></ul><h1>常用汇编指令</h1><h2 id="预加载指令">预加载指令</h2><p>数据预取通过将代码中后续可能使用到的数据提前加载到cache中，减少CPU等待数据从内存中加载的时间，提升cache命中率，进而提升软件的运行效率。预取指令格式通常如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PRFM prfop, [Xn|SP&#123;, <span class="meta">#pimm&#125;]</span></span><br></pre></td></tr></table></figure><p><code>prfop</code>由<code>type&lt;target&gt;&lt;policy&gt;</code>三部分组成。</p><ul><li><code>type</code>可选模式如下：<ul><li><code>PLD</code>：数据预加载；</li><li><code>PLI</code>：指令预取；</li><li><code>PST</code>：数据预存储；</li></ul></li><li><code>&lt;target&gt;</code>可选模式如下：<code>L1</code>、<code>L2</code>、<code>L3</code>，分别表示对三个不同的cache层级进行操作。</li><li><code>&lt;policy&gt;</code>可选模式如下：<ul><li><code>KEEP</code>：数据预取使用后保存一定时间，适用于数据多次使用的场景；</li><li><code>STRM</code>：流式或非临时预取，数据使用后将淘汰，用于仅使用一次的数据；</li></ul></li></ul><p><code>Xn|SP</code>通常表示64位通用寄存器或栈指针，使用场景中通常为预取的起始地址。</p><p><code>pimm</code>是以字节为单位的偏移量，代表预取的字节长度，取值为8的整数倍，范围是0~32760，默认为0。预取长度可结合实际业务场景设定，尝试预取不同长度数据，获取最佳预取值。</p><h1>参考</h1><p>[1] <a href="https://community.arm.com/arm-community-blogs/b/operating-systems-blog/posts/arm-neon-programming-quick-reference?CommentId=9ae98643-a035-4321-841d-e1aad399b931">Arm NEON programming quick reference</a></p>]]></content>
      
      
      <categories>
          
          <category> SIMD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SIMD </tag>
            
            <tag> NEON </tag>
            
            <tag> 指令集 </tag>
            
            <tag> Assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIMD[2]: NEON Intrinsics</title>
      <link href="/2022/06/14/SIMD-2-NeonIntrinsics/"/>
      <url>/2022/06/14/SIMD-2-NeonIntrinsics/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p><strong>Neon Intrinsics <strong>是对ARM架构下的高级SIMD指令的拓展实现，本质是编译器知道其精确实现的函数。Neon Intrinsics是在<code>arm_neon.h</code>中定义的一组</strong>C/C++函数</strong>，由Arm编译器和GCC支持。这些函数让你不用直接编写汇编代码就可以使用Neon，因为这些函数本身包含内联到调用代码处的短汇编内核。此外，寄存器分配和流水线优化由编译器处理，从而避免了汇编程序员面临的许多困难。</p><p>Neon Intrinsics的<strong>优势</strong>：</p><ul><li>强大：内在函数使程序员无需手写汇编代码即可直接访问 Neon 指令集。</li><li>移植性强：对于不同的目标处理器，手写的 Neon 汇编指令可能需要重写。但包含 Neon 内在函数的 C 和 C++ 代码 在新目标或新执行状态（例如，从 AArch32 迁移到 AArch64）下编译时，代码更改最少或无需更改。</li><li>灵活：程序员可以按需切换使用 Neon 或者 C/C++，同时避免许多底层的工程问题。</li></ul><p>Neon Intrinsics的<strong>劣势</strong>：</p><ul><li>跟直接使用库或通过编译器优化比，学习成本更高；</li><li>跟手写汇编比，可能性能改善不能最大化；</li></ul><h1>函数检索</h1><p>Neon Intrinsics 的使用可以通过<a href="https://developer.arm.com/architectures/instruction-sets/intrinsics/">官网</a>检索，支持模糊搜索，支持通过汇编指令名搜索Intrinsics，以下图中加法指令为例，搜索结果依次包括操作描述，出参，对应汇编指令，入参，支持架构和伪代码。</p><p><img src="/2022/06/14/SIMD-2-NeonIntrinsics/1.png" alt="1"></p><h1>编程约定</h1><h2 id="宏（Macros）">宏（Macros）</h2><p>当如下宏被定义并等于1时，代表对应的特性是可用的：</p><ul><li><code>__ARM_NEON</code>：编译器支持<code>Advanced SIMD</code>，对<code>aarch64</code>总为1；</li><li><code>__ARM_NEON_FP</code>：支持 Neon 浮点操作，对<code>aarch64</code>总为1；</li><li><code>__ARM_FEATURE_CRYPTO</code>：<code>Crypto</code>指令集可用，因此<code>Cryptographic Neon intrinsics</code>可用</li><li><code>__ARM_FEATURE_FMA</code>：融合乘累加（<code>Fused Multiply Accumulate</code>）指令可用，因此使用了这些指令的<code>Neon intrinsics</code>可用。</li></ul><h2 id="类型（Types）">类型（Types）</h2><p><code>baseW_t</code>： 标量数据类型</p><p><code>baseWxL_t</code>：向量数据类型 对应64/128位寄存器</p><p><code>baseWxLxN_t</code>：向量数组数据类型 对应那些在多个寄存器上操作的指令</p><p>其中：</p><ul><li><code>base</code>：数据的基础类型；</li><li><code>W</code>：数据宽度（bits）；</li><li><code>L</code>：向量数据类型中标量数据类型实例的数量；</li><li><code>N</code>：向量数组类型中向量数据类型实例的数量；</li><li>举例：<code>float32x4x3_t</code></li></ul><h2 id="函数（Functions）">函数（Functions）</h2><p>函数的一般表示如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ret v[p][q][r]name[u][n][q][x][_high][_lane | _laneq][_n][_result]_type(args)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>ret</code>：函数返回类型；</li><li><code>v</code>：<code>vector</code>的缩写；</li><li><code>p</code>: 表示成对操作（<code>[value]</code>可能会出现）；</li><li><code>q</code>：表示饱和操作（除了AArch64操作中的<code>vqtb[l][x]</code>，其中q表示128位索引和结果操作数）（所谓饱和处理就是如果计算结果超出了要求的数据格式能存储的数据的最大值，那么就用最大值去表示这个数据，如果计算结果超出了要求的数据格式能存储的数据的最最小值，那么就用最小值去表示这个数据）；</li><li><code>r</code>：表示舍入操作；</li><li><code>name</code>：基本操作的描述性名称。这通常是一个高级SIMD指令，但也不总是；</li><li><code>u</code>：表示有符号到无符号饱和；</li><li><code>n</code>：表示收缩操作；</li><li><code>q</code>：在<code>name</code>后表示对128位向量进行操作；</li><li><code>x</code>：表示<code>AArch64</code>中的<code>高级SIMD</code>标量操作。它可以是<code>b</code>、<code>h</code>、<code>s</code>或<code>d</code>中的一个(即8、16、32或64位)；</li><li><code>_high</code>：在<code>AArch64</code>中，用于涉及128位操作数的扩大和收缩操作。对于扩大128位操作数，high指源操作数的高64位；对于收缩，它指的是目标操作数的高64位；</li><li><code>_n</code>：指示作为参数提供的标量操作数；</li><li><code>_lane</code>：表示取自向量通道的标量操作数。<code> _laneq</code> 表示从 128 位宽度的输入向量的通道中获取的标量操作数。 （ <code>|</code> 表示两者只会出现其中之一 ）；</li><li><code>type</code>：主操作数类型的简写形式；</li><li><code>args</code>：函数参数；</li></ul><h1>示例1：RGB通道分离</h1><p><img src="/2022/06/14/SIMD-2-NeonIntrinsics/2.png" alt="2"></p><p>c代码实现：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rgb_deinterleave_c</span><span class="params">(<span class="keyword">uint8_t</span> *r, <span class="keyword">uint8_t</span> *g, <span class="keyword">uint8_t</span> *b, <span class="keyword">uint8_t</span> *rgb, <span class="keyword">int</span> len_color)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Take the elements of &quot;rgb&quot; and store the individual colors &quot;r&quot;, &quot;g&quot;, and &quot;b&quot;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; len_color; i++) &#123;</span><br><span class="line">        r[i] = rgb[<span class="number">3</span>*i];</span><br><span class="line">        g[i] = rgb[<span class="number">3</span>*i+<span class="number">1</span>];</span><br><span class="line">        b[i] = rgb[<span class="number">3</span>*i+<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Neon Intrinsics 实现（未考虑corner case）：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rgb_deinterleave_neon</span><span class="params">(<span class="keyword">uint8_t</span> *r, <span class="keyword">uint8_t</span> *g, <span class="keyword">uint8_t</span> *b, <span class="keyword">uint8_t</span> *rgb, <span class="keyword">int</span> len_color)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Take the elements of &quot;rgb&quot; and store the individual colors &quot;r&quot;, &quot;g&quot;, and &quot;b&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> num8x16 = len_color / <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">uint8x16x3_t</span> intlv_rgb;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; num8x16; i++) &#123;</span><br><span class="line">        intlv_rgb = <span class="built_in">vld3q_u8</span>(rgb+<span class="number">3</span>*<span class="number">16</span>*i);</span><br><span class="line">        <span class="built_in">vst1q_u8</span>(r+<span class="number">16</span>*i, intlv_rgb.val[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">vst1q_u8</span>(g+<span class="number">16</span>*i, intlv_rgb.val[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">vst1q_u8</span>(b+<span class="number">16</span>*i, intlv_rgb.val[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>示例2：矩阵乘法</h1><p><img src="/2022/06/14/SIMD-2-NeonIntrinsics/3.png" alt="3"></p><blockquote><p>假设矩阵是按列存储的，<code>nxm</code>（n行m列）的矩阵M中元素索引方式为<code>M_ij=M[n*j+i]</code></p></blockquote><p>C实现（A矩阵<code>nxk</code>，B矩阵<code>kxm</code>，C矩阵<code>nxm</code>）：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_multiply_c</span><span class="params">(<span class="keyword">float32_t</span> *A, <span class="keyword">float32_t</span> *B, <span class="keyword">float32_t</span> *C, <span class="keyword">uint32_t</span> n, <span class="keyword">uint32_t</span> m, <span class="keyword">uint32_t</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i_idx=<span class="number">0</span>; i_idx &lt; n; i_idx++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j_idx=<span class="number">0</span>; j_idx &lt; m; j_idx++) &#123;</span><br><span class="line">            C[n*j_idx + i_idx] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k_idx=<span class="number">0</span>; k_idx &lt; k; k_idx++) &#123;</span><br><span class="line">                C[n*j_idx + i_idx] += A[n*k_idx + i_idx]*B[k*j_idx + k_idx];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Neon intrinsics实现（<code>4x4</code>矩阵）：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_multiply_4x4_neon</span><span class="params">(<span class="keyword">float32_t</span> *A, <span class="keyword">float32_t</span> *B, <span class="keyword">float32_t</span> *C)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// these are the columns A</span></span><br><span class="line">        <span class="keyword">float32x4_t</span> A0;</span><br><span class="line">        <span class="keyword">float32x4_t</span> A1;</span><br><span class="line">        <span class="keyword">float32x4_t</span> A2;</span><br><span class="line">        <span class="keyword">float32x4_t</span> A3;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// these are the columns B</span></span><br><span class="line">        <span class="keyword">float32x4_t</span> B0;</span><br><span class="line">        <span class="keyword">float32x4_t</span> B1;</span><br><span class="line">        <span class="keyword">float32x4_t</span> B2;</span><br><span class="line">        <span class="keyword">float32x4_t</span> B3;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// these are the columns C</span></span><br><span class="line">        <span class="keyword">float32x4_t</span> C0;</span><br><span class="line">        <span class="keyword">float32x4_t</span> C1;</span><br><span class="line">        <span class="keyword">float32x4_t</span> C2;</span><br><span class="line">        <span class="keyword">float32x4_t</span> C3;</span><br><span class="line">        </span><br><span class="line">        A0 = <span class="built_in">vld1q_f32</span>(A);</span><br><span class="line">        A1 = <span class="built_in">vld1q_f32</span>(A+<span class="number">4</span>);</span><br><span class="line">        A2 = <span class="built_in">vld1q_f32</span>(A+<span class="number">8</span>);</span><br><span class="line">        A3 = <span class="built_in">vld1q_f32</span>(A+<span class="number">12</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Zero accumulators for C values</span></span><br><span class="line">        C0 = <span class="built_in">vmovq_n_f32</span>(<span class="number">0</span>);</span><br><span class="line">        C1 = <span class="built_in">vmovq_n_f32</span>(<span class="number">0</span>);</span><br><span class="line">        C2 = <span class="built_in">vmovq_n_f32</span>(<span class="number">0</span>);</span><br><span class="line">        C3 = <span class="built_in">vmovq_n_f32</span>(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Multiply accumulate in 4x1 blocks, i.e. each column in C</span></span><br><span class="line">        B0 = <span class="built_in">vld1q_f32</span>(B);</span><br><span class="line">        C0 = <span class="built_in">vfmaq_laneq_f32</span>(C0, A0, B0, <span class="number">0</span>);</span><br><span class="line">        C0 = <span class="built_in">vfmaq_laneq_f32</span>(C0, A1, B0, <span class="number">1</span>);</span><br><span class="line">        C0 = <span class="built_in">vfmaq_laneq_f32</span>(C0, A2, B0, <span class="number">2</span>);</span><br><span class="line">        C0 = <span class="built_in">vfmaq_laneq_f32</span>(C0, A3, B0, <span class="number">3</span>);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(C, C0);</span><br><span class="line">        </span><br><span class="line">        B1 = <span class="built_in">vld1q_f32</span>(B+<span class="number">4</span>);</span><br><span class="line">        C1 = <span class="built_in">vfmaq_laneq_f32</span>(C1, A0, B1, <span class="number">0</span>);</span><br><span class="line">        C1 = <span class="built_in">vfmaq_laneq_f32</span>(C1, A1, B1, <span class="number">1</span>);</span><br><span class="line">        C1 = <span class="built_in">vfmaq_laneq_f32</span>(C1, A2, B1, <span class="number">2</span>);</span><br><span class="line">        C1 = <span class="built_in">vfmaq_laneq_f32</span>(C1, A3, B1, <span class="number">3</span>);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(C+<span class="number">4</span>, C1);</span><br><span class="line">        </span><br><span class="line">        B2 = <span class="built_in">vld1q_f32</span>(B+<span class="number">8</span>);</span><br><span class="line">        C2 = <span class="built_in">vfmaq_laneq_f32</span>(C2, A0, B2, <span class="number">0</span>);</span><br><span class="line">        C2 = <span class="built_in">vfmaq_laneq_f32</span>(C2, A1, B2, <span class="number">1</span>);</span><br><span class="line">        C2 = <span class="built_in">vfmaq_laneq_f32</span>(C2, A2, B2, <span class="number">2</span>);</span><br><span class="line">        C2 = <span class="built_in">vfmaq_laneq_f32</span>(C2, A3, B2, <span class="number">3</span>);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(C+<span class="number">8</span>, C2);</span><br><span class="line">        </span><br><span class="line">        B3 = <span class="built_in">vld1q_f32</span>(B+<span class="number">12</span>);</span><br><span class="line">        C3 = <span class="built_in">vfmaq_laneq_f32</span>(C3, A0, B3, <span class="number">0</span>);</span><br><span class="line">        C3 = <span class="built_in">vfmaq_laneq_f32</span>(C3, A1, B3, <span class="number">1</span>);</span><br><span class="line">        C3 = <span class="built_in">vfmaq_laneq_f32</span>(C3, A2, B3, <span class="number">2</span>);</span><br><span class="line">        C3 = <span class="built_in">vfmaq_laneq_f32</span>(C3, A3, B3, <span class="number">3</span>);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(C+<span class="number">12</span>, C3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的<code>4x4</code>矩阵相乘中，对于B的列，尽管我们可以使用同一个变量重新加载，但我们还是为B的列使用了唯一的变量名，这样做将提示编译器给这些变量分配不同的寄存器，使得处理器在等待另一列加载的同时完成当前列的算术指令。</p><p>Neon Intrinsics实现（一般矩阵）：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_multiply_neon</span><span class="params">(<span class="keyword">float32_t</span>  *A, <span class="keyword">float32_t</span>  *B, <span class="keyword">float32_t</span> *C, <span class="keyword">uint32_t</span> n, <span class="keyword">uint32_t</span> m, <span class="keyword">uint32_t</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * Multiply matrices A and B, store the result in C. </span></span><br><span class="line"><span class="comment">     * It is the user&#x27;s responsibility to make sure the matrices are compatible.</span></span><br><span class="line"><span class="comment">     */</span>     </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> A_idx;</span><br><span class="line">    <span class="keyword">int</span> B_idx;</span><br><span class="line">    <span class="keyword">int</span> C_idx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// these are the columns of a 4x4 sub matrix of A</span></span><br><span class="line">    <span class="keyword">float32x4_t</span> A0;</span><br><span class="line">    <span class="keyword">float32x4_t</span> A1;</span><br><span class="line">    <span class="keyword">float32x4_t</span> A2;</span><br><span class="line">    <span class="keyword">float32x4_t</span> A3;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// these are the columns of a 4x4 sub matrix of B</span></span><br><span class="line">    <span class="keyword">float32x4_t</span> B0;</span><br><span class="line">    <span class="keyword">float32x4_t</span> B1;</span><br><span class="line">    <span class="keyword">float32x4_t</span> B2;</span><br><span class="line">    <span class="keyword">float32x4_t</span> B3;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// these are the columns of a 4x4 sub matrix of C</span></span><br><span class="line">    <span class="keyword">float32x4_t</span> C0;</span><br><span class="line">    <span class="keyword">float32x4_t</span> C1;</span><br><span class="line">    <span class="keyword">float32x4_t</span> C2;</span><br><span class="line">    <span class="keyword">float32x4_t</span> C3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i_idx=<span class="number">0</span>; i_idx&lt;n; i_idx+=<span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j_idx=<span class="number">0</span>; j_idx&lt;m; j_idx+=<span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">// Zero accumulators before matrix op</span></span><br><span class="line">            C0 = <span class="built_in">vmovq_n_f32</span>(<span class="number">0</span>);</span><br><span class="line">            C1 = <span class="built_in">vmovq_n_f32</span>(<span class="number">0</span>);</span><br><span class="line">            C2 = <span class="built_in">vmovq_n_f32</span>(<span class="number">0</span>);</span><br><span class="line">            C3 = <span class="built_in">vmovq_n_f32</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k_idx=<span class="number">0</span>; k_idx&lt;k; k_idx+=<span class="number">4</span>) &#123;</span><br><span class="line">                <span class="comment">// Compute base index to 4x4 block</span></span><br><span class="line">                A_idx = i_idx + n*k_idx;</span><br><span class="line">                B_idx = k*j_idx + k_idx;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Load most current A values in row </span></span><br><span class="line">                A0 = <span class="built_in">vld1q_f32</span>(A+A_idx);</span><br><span class="line">                A1 = <span class="built_in">vld1q_f32</span>(A+A_idx+n);</span><br><span class="line">                A2 = <span class="built_in">vld1q_f32</span>(A+A_idx+<span class="number">2</span>*n);</span><br><span class="line">                A3 = <span class="built_in">vld1q_f32</span>(A+A_idx+<span class="number">3</span>*n);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Multiply accumulate in 4x1 blocks, i.e. each column in C</span></span><br><span class="line">                B0 = <span class="built_in">vld1q_f32</span>(B+B_idx);</span><br><span class="line">                C0 = <span class="built_in">vfmaq_laneq_f32</span>(C0, A0, B0, <span class="number">0</span>);</span><br><span class="line">                C0 = <span class="built_in">vfmaq_laneq_f32</span>(C0, A1, B0, <span class="number">1</span>);</span><br><span class="line">                C0 = <span class="built_in">vfmaq_laneq_f32</span>(C0, A2, B0, <span class="number">2</span>);</span><br><span class="line">                C0 = <span class="built_in">vfmaq_laneq_f32</span>(C0, A3, B0, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">                B1 = <span class="built_in">vld1q_f32</span>(B+B_idx+k);</span><br><span class="line">                C1 = <span class="built_in">vfmaq_laneq_f32</span>(C1, A0, B1, <span class="number">0</span>);</span><br><span class="line">                C1 = <span class="built_in">vfmaq_laneq_f32</span>(C1, A1, B1, <span class="number">1</span>);</span><br><span class="line">                C1 = <span class="built_in">vfmaq_laneq_f32</span>(C1, A2, B1, <span class="number">2</span>);</span><br><span class="line">                C1 = <span class="built_in">vfmaq_laneq_f32</span>(C1, A3, B1, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">                B2 = <span class="built_in">vld1q_f32</span>(B+B_idx+<span class="number">2</span>*k);</span><br><span class="line">                C2 = <span class="built_in">vfmaq_laneq_f32</span>(C2, A0, B2, <span class="number">0</span>);</span><br><span class="line">                C2 = <span class="built_in">vfmaq_laneq_f32</span>(C2, A1, B2, <span class="number">1</span>);</span><br><span class="line">                C2 = <span class="built_in">vfmaq_laneq_f32</span>(C2, A2, B2, <span class="number">2</span>);</span><br><span class="line">                C2 = <span class="built_in">vfmaq_laneq_f32</span>(C2, A3, B2, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">                B3 = <span class="built_in">vld1q_f32</span>(B+B_idx+<span class="number">3</span>*k);</span><br><span class="line">                C3 = <span class="built_in">vfmaq_laneq_f32</span>(C3, A0, B3, <span class="number">0</span>);</span><br><span class="line">                C3 = <span class="built_in">vfmaq_laneq_f32</span>(C3, A1, B3, <span class="number">1</span>);</span><br><span class="line">                C3 = <span class="built_in">vfmaq_laneq_f32</span>(C3, A2, B3, <span class="number">2</span>);</span><br><span class="line">                C3 = <span class="built_in">vfmaq_laneq_f32</span>(C3, A3, B3, <span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Compute base index for stores</span></span><br><span class="line">            C_idx = n*j_idx + i_idx;</span><br><span class="line">            <span class="built_in">vst1q_f32</span>(C+C_idx, C0);</span><br><span class="line">            <span class="built_in">vst1q_f32</span>(C+C_idx+n, C1);</span><br><span class="line">            <span class="built_in">vst1q_f32</span>(C+C_idx+<span class="number">2</span>*n, C2);</span><br><span class="line">            <span class="built_in">vst1q_f32</span>(C+C_idx+<span class="number">3</span>*n, C3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>参考</h1><p>[1] <a href="https://developer.arm.com/documentation/102467/latest/">Optimizing C Code with Neon Intrinsics</a></p>]]></content>
      
      
      <categories>
          
          <category> SIMD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SIMD </tag>
            
            <tag> NEON </tag>
            
            <tag> 指令集 </tag>
            
            <tag> Intrinsics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIMD[1]: NEON入门</title>
      <link href="/2022/06/13/SIMD-1-NEON/"/>
      <url>/2022/06/13/SIMD-1-NEON/</url>
      
        <content type="html"><![CDATA[<h1>简介</h1><p>ARM CPU 最初只有普通的寄存器，可以进行基本数据类型的基础运算。从 ARMv5 架构开始引入 VFP（vector-floating-point） 指令扩展，可以通过使用短向量指令来加速浮点计算。从 ARMv7 架构开始引入 NEON 技术，NEON 技术同样是依靠向量指令来加速计算。鉴于 NEON 技术提供的向量技术加速效果体验更优秀，从 ARMv7 架构开始 VFP 向量指令加速的模式被弃用，因此 VFP 单元有时也称之为 FPU（Floating Point Unit）单元。</p><p>ARM NEON 技术本质上是一种高级的**单指令多数据（SIMD）**架构扩展，这种扩展仅在一些 ARMv7-A 和 ARMv7-R 架构以及 ARMv8 架构上支持。</p><p>这里将先以ARMv8中的NEON展开介绍，后续文章再讨论ARMv7和ARMv8的差异。</p><h1>ARMv8 NEON</h1><p><strong>ARMv8-A</strong>包括32位和64位执行状态，每一种都有自己的指令集：</p><ul><li><strong>AArch64</strong>是用来描述ARMv8-A架构64位执行状态的名称。在AArch64状态下，处理器执行<strong>A64指令集</strong>，其中包含<strong>NEON指令</strong>（也称为<strong>SIMD指令</strong>）。GNU和Linux文档有时将AArch64称为<strong>ARM64</strong>。</li><li><strong>AArch32</strong>描述了ARMv8-A架构的32位执行状态，它几乎与<strong>ARMv7</strong>相同。在AArch32状态下，处理器可以执<strong>A32</strong>（在该架构的早期版本中称为<strong>ARM</strong>）或<strong>T32</strong> （Thumb）指令集。A32和T32指令集与Armv7向后兼容，包括<strong>NEON指令</strong>。</li></ul><h1>ARMv8 NEON 寄存器</h1><p><strong>NEON寄存器文件</strong>是一组**寄存器（Register）**的集合（ARMv8 有32个128bit寄存器），可以作为8位、16位、32位、64位和128位寄存器进行访问。</p><p>NEON寄存器包含相同数据类型的<strong>元素向量（Vector）</strong>。在输入和输出寄存器中相同的元素位置被称为一个<strong>通道（lane）</strong>。</p><p>通常每个NEON指令会导致<code>n</code>个并行操作，其中<code>n</code>是输入向量被划分的通道数。每个操作都包含在通道内。从一个通道到另一个通道不会产生进位或溢出。</p><p>矢量中的通道数取决于矢量的大小和矢量中的数据元素（element）的类型。</p><p>一个128位的NEON矢量可以包含以下元素大小：</p><ul><li>16个8位元素（操作数后缀为<code>.16B</code>，其中<code>B</code>表示字节）</li><li>8个16位元素（操作数后缀<code>.8H</code>，其中<code>H</code>表示半字）</li><li>4个32位元素（操作数后缀<code>.4S</code>，其中<code>S</code>表示单字）</li><li>2个64位元素（操作数后缀<code>.2D</code>，其中<code>D</code>表示双字）</li></ul><p>一个64位的NEON向量可以包含以下元素大小（128位寄存器的高64位未使用）:</p><ul><li>8个8位元素（操作数后缀<code>.8B</code>，其中<code>B</code>表示字节）</li><li>4个16位元素（操作数后缀<code>.4H</code>，其中<code>H</code>表示半字）</li><li>2个32位元素（操作数后缀<code>.2S</code>，其中<code>S</code>表示单字）</li><li>1个64位元素（操作数后缀<code>.1D</code>，其中<code>D</code>表示双字）</li></ul><p><img src="/2022/06/13/SIMD-1-NEON/1.png" alt="1"></p><p>向量中的元素按最低有效位排序。也就是说，元素0使用寄存器的最低有效位。如下是两个向量运算的示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD V0.8H, V1.8H, V2.8H</span><br></pre></td></tr></table></figure><img src="/2022/06/13/SIMD-1-NEON/2.png" alt="2" style="zoom:80%;"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MUL V0.4S, V2.4S, V3.S[2]</span><br></pre></td></tr></table></figure><img src="/2022/06/13/SIMD-1-NEON/3.png" alt="3" style="zoom:80%;"><h1>ARMv8 NEON 调用方式</h1><p>想要使用NEON指令加速代码，可以通过如下几种方式：</p><ul><li>导入一个使用了NEON的库：如<a href="https://github.com/projectNe10/Ne10">Ne10</a>，Libyuv，Skia，OpenMax DL等；</li><li>使用支持生成NEON代码的编译器：如the Arm Compilers GCC，在GCC选项中加入向量化表示能有助于C代码生成NEON代码，如<code>-ftree-vectorize</code>；</li><li>使用 <strong>NEON intrinsics</strong>：NEON指令的高级封装，类似调用C语言函数的方法调用NEON指令，并由编译器生成最终的二进制代码；</li><li>手撸 <strong>NEON 汇编</strong>：内联汇编或汇编文件，直接生成二级制代码；</li></ul><h1>参考</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/431971424">ARM NEON技术之NEON基础介绍</a></p><p>[2] <a href="https://developer.arm.com/documentation/102474/latest">Introducing Neon for Armv8-A</a></p>]]></content>
      
      
      <categories>
          
          <category> SIMD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SIMD </tag>
            
            <tag> NEON </tag>
            
            <tag> 指令集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代C++ [2]: 模板特化</title>
      <link href="/2022/06/01/cpp-modern-2-templateSpecialization/"/>
      <url>/2022/06/01/cpp-modern-2-templateSpecialization/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>模板就是实现代码重用机制的一种工具，它可以实现类型参数化，即把类型定义为参数， 从而实现了真正的代码可重用性。</p><h1>模板</h1><h2 id="类模板">类模板</h2><p>适用于描述通用但类型安全的数据结构，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class template</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compare</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">equal</span><span class="params">(T a, T b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> Compare&lt;T&gt;::<span class="built_in">equal</span>(T a, T b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a == b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Compare&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    std::cout &lt;&lt; C.<span class="built_in">equal</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数模板">函数模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function template</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Compare</span><span class="params">(T1 a, T2 b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a == b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">Compare</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<strong>类的成员函数模板不能为虚函数</strong>。因为每个包含虚函数的类具有一个virtual table,包含该类的所有虚函数的地址，因此virtual table的大小是确定的。模板只有被使用时才会被实例化，将其声明为虚函数会使virtual table的大小不确定。所以，成员函数模板不能为虚函数。</p><h1>特化</h1><p>所谓特化就是实现模板的一个特例，即将全部或部分模板类型参数固定，用于解决特定类型下的实现与通用模板实现不一样的问题。将模板类型参数全部固定的称为<strong>全特化</strong>（total/fully template specialization），而只固定部分模板类型参数的称为<strong>偏特化</strong>（partially specialization）。</p><h2 id="全特化">全特化</h2><p>类模板和函数模块都支持全特化。全特化的特征之一就是<code>template &lt;&gt;</code>，即我们不再需要为其提供任何不确定的模板参数。</p><p>类模板的全特化：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class template</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compare</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">equal</span><span class="params">(T a, T b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> Compare&lt;T&gt;::<span class="built_in">equal</span>(T a, T b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a == b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class template total specialization</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compare</span>&lt;</span><span class="keyword">float</span>&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">equal</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Compare&lt;<span class="keyword">float</span>&gt;::<span class="built_in">equal</span>(<span class="keyword">float</span> a, <span class="keyword">float</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">abs</span>(a - b) &lt; <span class="number">10e-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Compare&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    std::cout &lt;&lt; C.<span class="built_in">equal</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; std::endl;</span><br><span class="line">    Compare&lt;<span class="keyword">float</span>&gt; Cf;</span><br><span class="line">    std::cout &lt;&lt; Cf.<span class="built_in">equal</span>(<span class="number">1.00001</span>, <span class="number">1.00002</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数模板的全特化：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function template</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Compare</span><span class="params">(T1 a, T2 b)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;uniform template&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> a == b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function template total specialization</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* a, <span class="keyword">const</span> <span class="keyword">char</span>* b)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;total template specialization&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(a, b) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">Compare</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">Compare</span>(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="偏特化">偏特化</h2><p>只有类模板可以偏特化，而函数模板没有偏特化。至于为什么？因为C++规定不行。再深究原因的话，我个人不严谨的推测是：函数本身是可以重载的，重载和（全）特化在某些情况下就已经纠缠不清了（这点后面会详细阐述）。再把偏特化搅和进来，两者的用途和区分规则就更难定义清楚了。所以干脆禁止吧。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(T1 a, T2 b) : <span class="built_in">a_</span>(a), <span class="built_in">b_</span>(b) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;class template&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T1 a_;</span><br><span class="line">    T2 b_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;</span><span class="keyword">int</span>, <span class="keyword">int</span>&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : <span class="built_in">a_</span>(a), <span class="built_in">b_</span>(b) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;total specialization&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a_;</span><br><span class="line">    <span class="keyword">int</span> b_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;</span><span class="keyword">int</span>, T&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> a, T b) : <span class="built_in">a_</span>(a), <span class="built_in">b_</span>(b) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;partially specialization&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a_;</span><br><span class="line">    T b_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; <span class="title">t1</span><span class="params">(<span class="number">1.01</span>, <span class="number">1.01</span>)</span></span>;</span><br><span class="line">    <span class="function">Test&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="title">t2</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">Test&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; <span class="title">t3</span><span class="params">(<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要清楚的是，并不是只有两个（多个）模板类型参数确定其中一个（多个）的情况才叫偏特化，只要确定了任意一个模板类型参数的部分信息就是偏特化。一个例子如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">X</span>(T a) : <span class="built_in">a_</span>(a) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;class Template&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T a_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>&lt;</span>T*&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">X</span>(T* a) : <span class="built_in">a_</span>(a) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;partially specialization&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* a_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    X&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>);</span><br><span class="line">    X&lt;<span class="keyword">char</span>*&gt;((<span class="keyword">char</span>*)<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>特化与重载</h1><p>普通的C++类不会重载，因此模板类也不会重载；普通的C++函数会重载，因此模板函数也会重载。没有特化的模板称为<strong>基础模板（base templates）</strong>。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A class template</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span> <span class="comment">/*...*/</span> &#125;;      <span class="comment">// (a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A function template with two overloads</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">f</span><span class="params">( T )</span></span>;              <span class="comment">// (b)</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span>, T, <span class="keyword">double</span> )</span></span>; <span class="comment">// (c)</span></span><br></pre></td></tr></table></figure><p>进一步，基础模板可以被特化。类模板和函数模板在此进一步分化，类模板可以全特化和偏特化；而函数模板只可以进行全特化。但由于函数模板可以重载，我们可以通过重载获得与偏特化近乎一致的效果。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A partial specialization of (a) for pointer types </span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">X</span>&lt;</span>T*&gt; &#123; <span class="comment">/*...*/</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A full specialization of (a) for int </span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">X</span>&lt;</span><span class="keyword">int</span>&gt; &#123; <span class="comment">/*...*/</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A separate base template that overloads (b) and (c) </span></span><br><span class="line"><span class="comment">// -- NOT a partial specialization of (b), because </span></span><br><span class="line"><span class="comment">// there&#x27;s no such thing as a partial specialization </span></span><br><span class="line"><span class="comment">// of a function template! </span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">f</span><span class="params">( T* )</span></span>;             <span class="comment">// (d)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A full specialization of (b) for int </span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">void</span> f&lt;<span class="keyword">int</span>&gt;( <span class="keyword">int</span> );              <span class="comment">// (e)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A plain old function that happens to overload with </span></span><br><span class="line"><span class="comment">// (b), (c), and (d) -- but not (e), which we&#x27;ll </span></span><br><span class="line"><span class="comment">// discuss in a moment </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( <span class="keyword">double</span> )</span></span>;                           <span class="comment">// (f)</span></span><br></pre></td></tr></table></figure><p>那么，对于函数模板的重载和特化，调用时的匹配规则如下：</p><ul><li>首先，非模板函数是第一公民。将优先选择与参数匹配的非模板函数，而不是同样能够匹配的模板函数；</li><li>其次，当没有合适的一等公民时，基础模板将作为二等公民被选择。当多个基础模板的重载存在时，选择参数类型匹配最好的基础模板。</li><li>最后，如果该基础模板还有满足参数匹配要求的特化，则选择该特化；若没有满足的，则选择基础模板本身。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> b; </span><br><span class="line"><span class="keyword">int</span> i; </span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f</span>( b );        <span class="comment">// calls (b) with T = bool </span></span><br><span class="line"><span class="built_in">f</span>( i, <span class="number">42</span>, d ); <span class="comment">// calls (c) with T = int </span></span><br><span class="line"><span class="built_in">f</span>( &amp;i );       <span class="comment">// calls (d) with T = int </span></span><br><span class="line"><span class="built_in">f</span>( i );        <span class="comment">// calls (e) </span></span><br><span class="line"><span class="built_in">f</span>( d );        <span class="comment">// calls (f)</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<strong>特化的函数模板的选择是在确定了基础模板之后才开始执行的</strong>。而且<strong>特化函数没有重载</strong>。怎么理解呢？看下面两个例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="comment">// (a) a base template </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( T )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="comment">// (b) a second base template, overloads (a) </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( T* )</span></span>;     <span class="comment">//     (function templates can&#x27;t be partially </span></span><br><span class="line">                  <span class="comment">//     specialized; they overload instead)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;        <span class="comment">// (c) explicit specialization of (b) </span></span><br><span class="line"><span class="keyword">void</span> f&lt;&gt;(<span class="keyword">int</span>*);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p; </span><br><span class="line"><span class="built_in">f</span>( p );           <span class="comment">// calls (c)</span></span><br></pre></td></tr></table></figure><p>在上例中，<code>(c)</code>是<code>(b)</code>的特化（若没有<code>(b)</code>，<code>(c)</code>将会成为<code>(a)</code>的特化），这符合我们的预期，因为<code>(b)</code>比<code>(a)</code>更“接近”我们的特化。函数调用时的选择<code>(c)</code>也符合我们的预期。那么再往下看：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="comment">// (a) same old base template as before </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( T )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;        <span class="comment">// (c) explicit specialization, this time of (a)</span></span><br><span class="line"><span class="keyword">void</span> f&lt;&gt;(<span class="keyword">int</span>*);</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="comment">// (b) a second base template, overloads (a) </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( T* )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p; </span><br><span class="line"><span class="built_in">f</span>( p );           <span class="comment">// calls (b)! overload resolution ignores </span></span><br><span class="line">                  <span class="comment">// specializations and operates on the base </span></span><br><span class="line">                  <span class="comment">// function templates only</span></span><br></pre></td></tr></table></figure><p>仅仅是交换了一下声明的顺序，结果便发生了变化。理解的关键就是<strong>特化不会重载</strong>。即<code>(b)</code>不是<code>c</code>的重载，而是<code>a</code>的重载。而基础模板的重载是二等公民（此处没有一等公民），是要在特化的选择之前就确定的。也就是说，编译器先在<code>(a)</code>和<code>(b)</code>之间做选择，发现<code>(b)</code>更合适，就确定了<code>(b)</code>为待选，而<code>(b)</code>没有特化（由于声明顺序的改变，<code>(c)</code>成为了<code>(a)</code>的特化），就直接用基础模板了。</p><h1>参考</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/346400616">C++ 模板 全特化与偏特化</a></p><p>[2] <a href="http://www.gotw.ca/publications/mill17.htm"> Why Not Specialize Function Templates?</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++ 读书笔记03</title>
      <link href="/2022/05/24/EffectiveC-3-ReadNote03/"/>
      <url>/2022/05/24/EffectiveC-3-ReadNote03/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>本文是阅读《Effective C++ 改善程序与设计的55个具体做法（第三版）》的心得笔记第三部分，文章也会按照原书的顺序依次记录各个条款。</p><p>第一部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/04/25/EffectiveC-1-ReadNote01/">effective C++ 读书笔记01</a>。</p><p>第二部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/05/06/EffectiveC-2-ReadNote02/">effective C++ 读书笔记02</a>。</p><h1>设计与声明</h1><h2 id="条款18：让接口容易被正确使用，不易被误用">条款18：让接口容易被正确使用，不易被误用</h2><p>想要开发一个<strong>容易被正确使用，不易被误用</strong>的接口，首先要考虑使用者会犯什么错误，并设法阻止。</p><h3 id="导入新（自定义）类型，预防接口被误用">导入新（自定义）类型，预防接口被误用</h3><p>考虑如下一个<code>Date</code>类：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Date</span>(<span class="keyword">int</span> month, <span class="keyword">int</span> day, <span class="keyword">int</span> year);<span class="comment">// 1. int数值范围太大,有可能传入非法值</span></span><br><span class="line">    ...<span class="comment">// 2. 都是int类型，没有区分，可能传参次序错误</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以通过封装<code>Month</code>，<code>Day</code>和<code>Year</code>的struct/class，构建新的数据类型，并限制其数值范围。如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装结构体类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Day</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Day</span><span class="params">(<span class="keyword">int</span> d)</span> : val(d) &#123;</span>&#125;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Month</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Month</span><span class="params">(<span class="keyword">int</span> m)</span> : val(m) &#123;</span>&#125;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Year</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Year</span><span class="params">(<span class="keyword">int</span> y)</span> : val(y) &#123;</span>&#125;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Date</span>(<span class="keyword">const</span> Month&amp; m, <span class="keyword">const</span> Day&amp; d, <span class="keyword">const</span> Year&amp; y);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="function">Date <span class="title">d</span><span class="params">(Month(<span class="number">5</span>), Day(<span class="number">24</span>), Year(<span class="number">2022</span>))</span></span>;  <span class="comment">// 可以解决传参次序错误的问题</span></span><br></pre></td></tr></table></figure><p>但上述类型封装并不没有约束类型的数值范围，还是可能出现<code>Date d(Month(13), Day(24), Year(2022))</code>这样的情况，文中提到<code>enum</code>可以实现数值枚举，但不是类型安全的（可以隐式转换成整型），所以实现了如下类：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Month</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Month <span class="title">Jan</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Month</span>(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Month <span class="title">Feb</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Month</span>(<span class="number">2</span>); &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Month <span class="title">Dec</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Month</span>(<span class="number">12</span>); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Month</span><span class="params">(<span class="keyword">int</span> m)</span></span>;<span class="comment">// 隐藏构造函数，仅通过函数获取对象，可参见条款04</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="built_in">Date</span>(Month::<span class="built_in">Mar</span>(), <span class="built_in">Day</span>(<span class="number">30</span>), <span class="built_in">Year</span>(<span class="number">2022</span>));</span><br></pre></td></tr></table></figure><p>其实，C++11已经支持了枚举的强化，即类型安全的<code>enum class</code>，它不能隐式地转换为整数；也无法与整数数值做比较。故<code>Month</code>类型也可实现成：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">Month</span> &#123;</span></span><br><span class="line">    Jan = <span class="number">1</span>,</span><br><span class="line">    Feb = <span class="number">2</span>,</span><br><span class="line">    ...</span><br><span class="line">    Dec = <span class="number">12</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="built_in">Date</span>(Month::Mar, <span class="built_in">Day</span>(<span class="number">30</span>), <span class="built_in">Year</span>(<span class="number">2022</span>));</span><br></pre></td></tr></table></figure><h3 id="限制类型内什么事情可做，什么事情不可做">限制类型内什么事情可做，什么事情不可做</h3><p>最常见的就是使用<code>const</code>限定符，如<strong>条款03</strong>中提到的<strong>用<code>const</code>修饰<code>operator*</code>的返回类型</strong>可以避免<code>a * b = c</code>这样的错误。</p><h3 id="尽量让你的自定义类型的行为与内置类型一致">尽量让你的自定义类型的行为与内置类型一致</h3><p>这句话的进一步延申就是<strong>提供行为一致的接口</strong>，除非你有更好的理由。道理也很简单，不一致就意味着有用错的风险。任何接口如果要求使用者必须记住某件事，那它就有着“不被正确使用”的倾向，因为使用者总有可能忘了做那件事。这也引申出了下一点：</p><h3 id="不要寄希望于使用者为你的接口“擦屁股”">不要寄希望于使用者为你的接口“擦屁股”</h3><p>如<strong>条款13</strong>中提到的一个factory函数会对象指针：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Investment* <span class="title">createInvestment</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>这就是把对象析构的责任推给了使用者，当然使用者如果看过<strong>条款13</strong>，知道将返回的对象指针存储于一个智能指针中，将对象析构的责任再次推给指针指针。但你不能期望使用者永远不犯错，使用者也许不会用智能指针，也许根本没有意识到自己要对<code>delete</code> 对象指针负责。所以不如先发制人，自己返回一个智能指针：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::shared_ptr&lt;Investment&gt; <span class="title">createInvestment</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>使用智能指针的好处之一在于可以自己指定用于销毁对象的deleter，而不是简单地使用<code>delete</code>对象指针。这又进一步杜绝了使用者<strong>企图使用错误的资源析构机制</strong>的可能性。</p><p>指定每个智能指针专属的deleter的还有一个好处：可以消除潜在的<strong>cross-DLL problem</strong>，即对象在某个DLL中被<code>new</code>创建，却在另一个DLL中被<code>delete</code>销毁。在许多平台上，这样的<strong>跨DLL之间new/delete成对运用</strong>会导致Runtime-Error。</p><p>总而言之，接口内创建的资源，接口内负责销毁。智能指针是个好东西，能用则用。</p><h2 id="条款19：设计class犹如设计type">条款19：设计class犹如设计type</h2><p>想要设计一个优秀的class，往往需要回答以下问题：</p><ul><li><ol><li>**新 type 的对象应当如何被创建和销毁？**决定构造函数和析构函数的实现。</li></ol></li><li><ol start="2"><li>**对象的初始化和对象的赋值该有什么样的差别？**决定构造函数和赋值操作符的实现。</li></ol></li><li><ol start="3"><li>**新 type 的对象如果被 passed by value（传值），意味着什么？**决定拷贝构造函数的实现。</li></ol></li><li><ol start="4"><li>**什么是新 type 的“合法值”？**决定class必须维护的约束条件（invariants）,必须进行的错误检查工作，异常抛出，非法值拦截，返回错误码等。</li></ol></li><li><ol start="5"><li>**新 type 需要配合某个继承图谱（inheritance graph）吗？**如果继承自某个基类，则受限于基类virtual和non-virtual函数的设计；若允许其他class继承你的类，则要考虑你所声明的函数，特别是析构函数（条款07），是否应当为virtual。</li></ol></li><li><ol start="6"><li><strong>你的新 type 需要什么样的类型转换？<strong>若希望<code>T1</code>类型可以隐式的转换为<code>T2</code>类型，要么在<code>class T1</code>内实现一个类型转换函数<code>operator T2()</code>，要么在<code>class T2</code>中实现一个non-explicit-one-argument构造函数。若你不希望隐式转换存在，则得专门实现负责执行转换操作的函数。关于隐式转换和显示转换的讨论还可见</strong>条款15</strong>。</li></ol></li><li><ol start="7"><li><strong>什么样的操作符和函数对此新 type 而言是合理的？<strong>决定class将要声明哪些函数，函数是成员函数还是非成员函数，参见</strong>条款23，24，26</strong>。</li></ol></li><li><ol start="8"><li><strong>什么样的标准函数应当被驳回？<strong>参见</strong>条款06</strong>，不希望被拷贝的类应当将copy构造函数和copy赋值操作符声明为private，或使用C++新特性<code>=delete</code>。</li></ol></li><li><ol start="9"><li>**谁该取用新type的成员？**决定成员该为private/protected/public，以及决定哪一个外部类或函数能成为friend。</li></ol></li><li><ol start="10"><li><strong>什么是新 type 的“未声明清楚的接口”（undeclared interface）？<strong>参见</strong>条款29</strong>。</li></ol></li><li><ol start="11"><li>**新 type 有多么一般化？**对于一般化的问题处理，考虑定义一个新的class template而不是一个新的class。</li></ol></li><li><ol start="12"><li>**你真的需要一个新 type 吗？**如果只是定义一个派生类为既有的类添加新的功能，说不定单纯定义一个或多个非成员函数或者模板更合适。</li></ol></li></ul><h2 id="条款20：宁可pass-by-reference-to-const代替pass-by-value">条款20：宁可pass-by-reference-to-const代替pass-by-value</h2><h3 id="通常情况下，前者会比后者要高效。">通常情况下，前者会比后者要高效。</h3><p><strong>以值传递参数</strong>时，函数形参是实参的一个副本（确保函数不会修改实参），这意味着要执行拷贝构造函数，然后在函数退出时，函数形参生命周期结束，会再执行析构函数。这些可能是不小的开销，尤其是当类存在成员对象或者继承关系时，成员对象和基类的构造和析构也在这个过程中。</p><p>以<strong>const引用传递参数</strong>时，没有任何新对象被创建，因此不涉及构造和析构操作。其中const是关键，其同样可以保证函数不会修改实参。</p><p>不只是函数参数，<strong>返回值</strong>也遵循同样的规则。但请注意，<strong>不要返回局部变量的引用</strong>，因为局部变量会在函数退出时到达生命周期的终点，返回局部变量的引用只会得到一个<strong>悬空</strong>的变量。</p><h3 id="以-by-reference-方式传递参数可以避免对象切割问题">以 by reference 方式传递参数可以避免对象切割问题</h3><p>所谓<strong>对象切割</strong>，指的是当一个派生类对象以by value的方式传递给一个基类参数时，基类的copy构造函数会被调用，从而导致该对象作为派生类的特性被<strong>切割</strong>掉，完全**“退化”**成一个基类对象。而以 by reference-to-const 的方式传递参数则可以避免对象切割问题。</p><h3 id="对于C-内置类型（如int），以值传递通常效率更高">对于C++内置类型（如int），以值传递通常效率更高</h3><p>从C++编译器的底层实现来看，references往往以指针形式来实现，因此pass by reference通常意味着真正传递的是指针。所以对于内置数据类型，直接传值反而效率更高。</p><p>这一规则还适用于<strong>STL的迭代器和函数对象</strong>。</p><p>因为内置类型通常比较小，所以所有小型types都更适合于pass-by-value的推论是<strong>不合理</strong>的。因为小型对象的copy构造的代价不一定低，且自定义的小型types有可能是变化的，目前是小的，将来也许会变大。所以，除了<strong>C++内置类型</strong>和<strong>STL的迭代器和函数对象</strong>外，请尽量遵守<strong>以pass-by-reference-to-const代替pass-by-value</strong>的准则。</p><h2 id="条款21：必须返回对象时，别妄想返回其reference">条款21：必须返回对象时，别妄想返回其reference</h2><p>通常情况下，不要返回如下几种对象的引用（指针也同理）：</p><h3 id="不要返回局部栈对象（局部变量）的引用">不要返回局部栈对象（局部变量）的引用</h3><p>局部变量会在函数退出时到达生命周期的终点，返回局部变量的引用只会得到一个<strong>悬空</strong>的变量。这将会掉入<strong>未定义行为</strong>的深渊。</p><h3 id="不要返回局部堆对象（函数中new的对象）的引用">不要返回局部堆对象（函数中new的对象）的引用</h3><p>这样做的不合理之处在于，将销毁对象的责任推到了函数之外，甚至有时候连销毁的机会都没有。考虑如下情况：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rational</span>(<span class="keyword">int</span> numberator = <span class="number">0</span>, <span class="keyword">int</span> denominator = <span class="number">1</span>);<span class="comment">// 条款24解释为什么声明为explicit</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> n, d;<span class="comment">// 分子（numerator）和分母（denominator）</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">const</span> Rational&amp; <span class="keyword">operator</span>* (<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Rational&amp; <span class="keyword">operator</span>* (<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs) &#123;</span><br><span class="line">    Rational* result = <span class="keyword">new</span> <span class="built_in">Rational</span>(lhs.n * rhs.n, lhs.d * rhs.d);</span><br><span class="line">    <span class="keyword">return</span> *result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用如下连乘时，将没有销毁的机会</span></span><br><span class="line">Rational w, x, y, z;</span><br><span class="line">w = x * y * z; <span class="comment">// y * z 返回的引用无迹可寻，因此无法销毁，导致内存泄漏</span></span><br></pre></td></tr></table></figure><h3 id="不要返回局部static对象（静态局部变量）的引用">不要返回局部static对象（静态局部变量）的引用</h3><p>和所有static对象一样，首先能够想到的就是多线程安全性的顾虑。除此之外，静态局部变量只有一份，只初始化一次，不同函数更新的是同一份变量。继续上面的例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Rational&amp; <span class="keyword">operator</span>* (<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">static</span> Rational result;</span><br><span class="line">    </span><br><span class="line">    result = ... ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再重载一个比较操作符，省略实现</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下代码会出问题</span></span><br><span class="line">Rational a, b ,c, d;</span><br><span class="line"><span class="keyword">if</span> ((a * b) == (c * d)) &#123;</span><br><span class="line">    <span class="comment">// always be true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// never to goto this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子中，<code>a * b</code>和<code>c * d</code>都返回同一个local static 对象，所以结果总是相等。</p><h3 id="就没有适合返回引用的场景吗？">就没有适合返回引用的场景吗？</h3><p>absolutely not，条款10种提到copy赋值操作符可以返回<code>*this</code>的引用；类成员作为返回值时，也可以返回其引用，但最好时const。</p><h2 id="条款22：将成员变量声明为-private">条款22：将成员变量声明为 private</h2><p>一般情况下，应当将成员变量声明为 private，好处如下：</p><ul><li><strong>语法一致性</strong>：访问对象成员变量的唯一方法就是通过get成员函数；</li><li>精确控制成员变量的<strong>访问权限</strong>：根据是否有get/set成员函数来控制成员的读写权限；</li><li>提供<strong>实现弹性</strong>：成员变量的计算方法的调整，移除和变更名称等操作都隐藏在函数接口之后，不会被类的使用者感知到；</li><li><strong>封装性</strong>：成员变量的封装性与<strong>成员变量的内容改变时所破坏的代码数量</strong>成反比。public和protected都不具备封装性。怎么理解呢？比如，一个public成员变量被移除（或改为private），所有直接使用它的客户代码都会被破坏，无法通过编译；一个protected成员变量被移除（或改为private），所有使用它的派生类（派生类可以访问基类的protected成员变量）都会被破坏，无法通过编译。也就是说，一旦你将一个成员变量公开且被广泛使用，后面再想对它做修改就异常艰难。</li></ul><h2 id="条款23：宁以-non-member、non-friend替换-member-函数">条款23：宁以 non-member、non-friend替换 member 函数</h2><p>考虑如下例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebBrowser</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearHistory</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeCookies</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要实现一个执行所有清除操作的函数</span></span><br><span class="line"><span class="comment">// 选择1：实现为类成员函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebBrowser</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearEverything</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">clearCache</span>();</span><br><span class="line">        <span class="built_in">clearHistory</span>();</span><br><span class="line">        <span class="built_in">removeCookies</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择2：实现为non-member函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearBrowser</span><span class="params">(WebBrowser&amp; wb)</span> </span>&#123;</span><br><span class="line">    wb.<span class="built_in">clearCache</span>();</span><br><span class="line">wb.<span class="built_in">clearHistory</span>();</span><br><span class="line">wb.<span class="built_in">removeCookies</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装性考虑">封装性考虑</h3><p>从面向对象守则考虑，你也许会选择1，认为数据及操作数据的函数应当捆绑在一起，但这是一种误解。因为面向对象守则是<strong>要求数据（而不是函数）被尽可能的封装</strong>。数据封装性即其不可见程度，越少的函数能够看到/访问它，则其封装性就越强。条款22中提到，成员变量应当为private，否则就有无限量的函数可以访问它们，也就毫无封装性。而对private成员变量而言，能访问它的就只有成员函数和友元函数。故成员函数和友元函数越少，成员变量的封装性更强。当能够提供相同的功能时，non-member、non-friend函数并不增加<strong>能够访问类内成员变量的数量</strong>，与member函数相比，能为class提供更强的封装性，故应当选择2。</p><p>需要注意的是，考虑封装性而让函数成为class的non-member函数，并不意味着它不可以成为另一个类的成员函数。这句话有点绕，还以上述例子为例，可以让<code>clearBrowser</code>成为某个工具类（utility class）的一个static member函数，只要它不是WebBrowser类的成员函数或友元函数，就不影响WebBrowser成员变量的封装性。</p><p>在C++中，比较自然的做法是让<code>clearBrowser</code>成为一个non-member函数，并且与WebBrowser位于同一namespace内，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> WebBrowserStuff &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WebBrowser</span> &#123;</span> ... &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearBrowser</span><span class="params">(WebBrowser&amp; wb)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译依赖考虑">编译依赖考虑</h3><p><code>namespace</code>可以跨越多个源码文件，而<code>class</code>不能，因此可以将不同功能的non-member函数放在不同的<code>.h</code>头文件的同一<code>namespace</code>下，这样可以让模块划分更清晰，还可以降低不必要的编译依赖关系。这也是C++标准程序库的组织方式，使用者只需要包含自己需要使用的模块的头文件（如<code>#include &lt;vector&gt;</code>）。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头文件 webbrowser.h</span></span><br><span class="line"><span class="comment">// class WebBrowser自身及其核心机能</span></span><br><span class="line"><span class="keyword">namespace</span> WebBrowserStuff &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebBrowser</span> &#123;</span> ... &#125;;</span><br><span class="line">    ...<span class="comment">// 核心机能，例如几乎所有使用者都需要的 non-member 函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头文件 webbrowserbookmarks.h</span></span><br><span class="line"><span class="comment">// 与书签相关的便利函数</span></span><br><span class="line"><span class="keyword">namespace</span> WebBrowserStuff &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头文件 webbrowsercookies.h</span></span><br><span class="line"><span class="comment">// 与cookie相关的便利函数</span></span><br><span class="line"><span class="keyword">namespace</span> WebBrowserStuff &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加其他头文件，扩展新的便利函数</span></span><br></pre></td></tr></table></figure><h2 id="条款24：若所有参数皆需类型转换-，请为此采用-non-member-函数">条款24：若所有参数皆需类型转换 ，请为此采用 non-member 函数</h2><p>考虑如下这个例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有理数类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rational</span>(<span class="keyword">int</span> numerator = <span class="number">0</span>, <span class="keyword">int</span> denominator = <span class="number">1</span>)</span><br><span class="line">        : <span class="built_in">numerator_</span>(numerator), <span class="built_in">denominator_</span>(denominator) &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> Rational <span class="keyword">operator</span>* (<span class="keyword">const</span> Rational &amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Rational</span>(numerator_ * rhs.numerator_,<span class="comment">// 类的成员函数可以直接访问作为其参数的同类型对象的私有成员</span></span><br><span class="line">                        denominator_ * rhs.<span class="built_in">denominator</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numerator</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> numerator_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">denominator</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> denominator_; &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> numerator_ = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> denominator_ = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述实现中有几点需要注意：</p><ul><li>构造函数是non-explicit的，是为了支持整数到有理数的隐式转换；</li><li>重载的<code>operator*</code>实现为成员函数，参数passed-by-reference-to-const，返回一个const-by-value，具体可参考<strong>条款20</strong>和<strong>条款21</strong>；</li><li>上述实现在混合运算时会有问题：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Rational <span class="title">oneEighth</span><span class="params">(<span class="number">1</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line"><span class="function">Rational <span class="title">oneHalf</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">Rational result = oneHalf * oneEighth;<span class="comment">// 大丈夫</span></span><br><span class="line">result = result * oneEighth;<span class="comment">// 大丈夫</span></span><br><span class="line">result = oneHalf * <span class="number">2</span>;<span class="comment">// 大丈夫，存在隐式转换</span></span><br><span class="line">result = <span class="number">2</span> * oneHalf;<span class="comment">// 打咩！</span></span><br></pre></td></tr></table></figure><p>为了让混合运算支持交换律，可以将<code>operator*</code>改实现为non-member函数，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Rational <span class="keyword">operator</span>*(<span class="keyword">const</span> Rational &amp;lhs, <span class="keyword">const</span> Rational &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Rational</span>(lhs.<span class="built_in">numerator</span>() * rhs.<span class="built_in">numerator</span>(),</span><br><span class="line">                    lhs.<span class="built_in">denominator</span>() * rhs.<span class="built_in">denominator</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意，<code>operator*</code>没有必要实现为<code>Rational</code>类的友元函数，因为其完全可以通过<code>Rational</code>类的public接口（<code>numerator()</code>方法和<code>denominator()</code>方法）来完成功能实现。因此也导出一个结论：成员函数的反面是非成员函数，而不是友元函数；应当尽可能避免使用友元函数，除非没有别的选择，因为这为封装性打开了一个缺口，可能会导致不可控的局面。</p><h2 id="条款25：考虑写出一个不抛异常的swap函数">条款25：考虑写出一个不抛异常的swap函数</h2><p>所谓swap，就是将两个对象的值置换。std中提供了swap的典型实现如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(T&amp; a, T&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="function">T <span class="title">temp</span><span class="params">(a)</span></span>;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要类型<code>T</code>支持copying，即实现了拷贝构造函数和拷贝赋值操作符，则<code>std::swap</code>就能正常工作。</p><p>但是，能正常工作不代表效率高。比如当需要swap一个用pimpl（point to implementation）手法设计的类时：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetImpl</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    std::vector&lt;<span class="keyword">double</span>&gt; v;<span class="comment">// vector很大时，深拷贝效率低</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span><span class="comment">// 该类使用了pimpl手法</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(<span class="keyword">const</span> Widget&amp; rhs);</span><br><span class="line">    Widget&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</span><br><span class="line">        ...</span><br><span class="line">        *pImpl = *(rhs.pImpl);<span class="comment">// 关于operator=的详细讨论参见条款10~12</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    WidgetImpl *pImpl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于<code>Widget</code>类而言，要置换其两个对象，实际只需要交换两个对象的<code>pImpl</code>指针即可。但<code>std::swap</code>并不知道这一点，他还是会严格执行深复制，不止复制了3个<code>Widget</code>对象，还复制了其包含的3个<code>WidgetImpl</code>对象。</p><p>要解决这个问题，与STL容器一致的做法是，为<code>Widget</code>类提供一个<strong>public swap成员函数</strong>，并基于此，实现一个**<code>std::swap</code>的特化版本**。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Widget&amp; other)</span> </span>&#123;<span class="comment">// public swap 成员函数</span></span><br><span class="line">        <span class="keyword">using</span> std::swap;<span class="comment">// 令std::swap可用，但又不一定非得用</span></span><br><span class="line">        <span class="built_in">swap</span>(pImpl, other.pImpl);<span class="comment">// 仅置换pImpl指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;&gt;</span><br><span class="line">    <span class="keyword">void</span> swap&lt;Widget&gt; (Widget&amp; a, Widget&amp; b) &#123;<span class="comment">// std::swap的特化版本</span></span><br><span class="line">        a.<span class="built_in">swap</span>(b);<span class="comment">// 调用上面实现的swap成员函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述解决办法在处理类时可以工作的很好，但是当<code>Widget</code>和<code>WidgetImpl</code>作为类模板实现时，就会出现新的问题。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetImpl</span> &#123;</span> ... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span> ... &#125;;</span><br></pre></td></tr></table></figure><p>其中，public swap成员函数的实现照旧，不会有任何问题。但<code>std::swap</code>的特化版本将会遇到问题：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="keyword">void</span> swap&lt; Widget&lt;T&gt; &gt;(Widget&lt;T&gt;&amp; a, Widget&lt;T&gt;&amp; b) &#123;<span class="comment">// 错误实现</span></span><br><span class="line">        a.<span class="built_in">swap</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述实现是不合法的。如果你看过我对<a href="https://no5-aaron-wu.github.io/2022/06/01/cpp-modern-2-templateSpecialization/">特化的讨论</a>，应该能意识到这是一个偏特化的实现（确定了部分信息）。而函数模板是没有偏特化的，所以这段代码是无法编译通过的。然后，很容易想到的是，偏特化的替代手段就是函数模板重载。因此我们可以改为实现成如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Widget&lt;T&gt;&amp; a, Widget&lt;T&gt;&amp; b)</span> </span>&#123;<span class="comment">// 这是std::swap的一个重载</span></span><br><span class="line">        a.<span class="built_in">swap</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述实现也是不合法的。对函数模板做重载是没有问题的，但问题出在std命名空间。std是个特殊的命名空间，用户可以全特化std内的函数模板，但不可以添加新的函数模板（即重载）到std中。C++标准委员会禁止我们膨胀那些已经声明好的东西。那到底要怎么做呢？答案很简单，<strong>将这个swap函数模板作为一个non-member函数模板置于<code>Widget</code>类模板所在的命名空间</strong>（置于global命名空间也合法，但不优雅）。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> WidgetStuff &#123;</span><br><span class="line">   ...</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WidgetImpl</span> &#123;</span> ... &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span> ... &#125;;<span class="comment">// 内含 swap 成员函数</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Widget&lt;T&gt;&amp; a, Widget&lt;T&gt;&amp; b)</span> </span>&#123;<span class="comment">// 这是一个non-member swap 函数</span></span><br><span class="line">        a.<span class="built_in">swap</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述实现我们姑且称之为 swap 之于 Widget 的专属版本。这种实现其实对于<strong>类</strong>和<strong>类模板</strong>都是适用，那是不是就代表着不用再针对类实现其对应的<code>std::swap</code>的特化版本了呢？答案是：为了尽可能的让你的swap优化版本适用于各种情况，建议即在类所在的命名空间实现一个non-member专属版本，有实现一个<code>std::swap</code>的特化版本。考虑如下两种情况：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户调用方法1</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(T&amp; a, T&amp; b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> std::swap;</span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种调用方式的好处是，编译器会基于类型去匹配最合适的调用。如果<code>T</code>是<code>Widget</code>类型，且其命名空间中存在专属版本的<code>swap</code>，则会调用它；若不存在，则由于<code>using std::swap</code>的存在，编译器还可以用<code>std::swap</code>作为保底答案，若<code>std::swap</code>的特化版本存在，则会选择特化版本。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户调用方法2</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(T&amp; a, T&amp; b)</span> </span>&#123;</span><br><span class="line">    std::<span class="built_in">swap</span>(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种调用方式不推荐，因为这限制编译器只能选择<code>std::swap</code>及其特化版本（若有）。这时实现一个<code>std::swap</code>的特化版本的作用就体现出来了：即便用户使用了不被推荐的调用方式，也能够让你的swap优化版本得以被调用。</p><h3 id="总结">总结</h3><ul><li>首先，如果缺省版本的<code>std::swap</code>能够提供可接受的效率，则你只需要定义好你的对象的拷贝动作即可；</li><li>其次，如果缺省版本的效率不足（几乎总是意味着你的class或class template使用了某种pimpl手法），则可以考虑如下：<ul><li>提供一个 public swap 成员函数，能够高效的处理置换操作，且该函数绝不该抛出异常（条款29对此有进一步讨论）（不抛出异常的约束仅针对成员函数，不施加于下面两种非成员函数，因为缺省版本的swap是以copy构造函数和copy赋值操作符为基础实现的，而一般情况下两者都允许抛出异常）；</li><li>在类或类模板所在的命名空间中提供一个 non-member swap 函数，并令其调用上述成员函数；</li><li>如果你在实现一个类，而非类模板，则为你的类特化<code>std::swap</code>函数，令其调用上述成员函数；</li></ul></li><li>最后，在调用时，请包含一个<code>using</code>声明式，让<code>std::swap</code>可用，并在调用<code>swap</code>时不加任何namespace修饰符。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代C++ [1]: 智能指针</title>
      <link href="/2022/05/06/cpp-modern-1-SmartPointers/"/>
      <url>/2022/05/06/cpp-modern-1-SmartPointers/</url>
      
        <content type="html"><![CDATA[<h1>简介</h1><p>智能指针主要用于管理在堆上分配的内存，它将普通的指针封装为一个栈对象（类）。当栈对象的生存周期结束后（离开对象的作用域，如函数结束），会在析构函数中释放掉申请的内存，不需要手动释放内存空间，从而规避内存泄漏的风险。</p><h1>auto_ptr</h1><p><code>auto_ptr</code>是C++ 98标准的方案，在C++ 11标准中已经弃用，采用独占所有权模式，看下面这个例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::auto_ptr&lt;string&gt; <span class="title">p1</span> <span class="params">(<span class="keyword">new</span> string (<span class="string">&quot;Hello World&quot;</span>))</span></span>; </span><br><span class="line">std::auto_ptr&lt;string&gt; p2; </span><br><span class="line">p2 = p1; <span class="comment">// 编译不会报错，但p1会被置成nullptr</span></span><br></pre></td></tr></table></figure><p><code>auto_ptr</code>的赋值操作在编译时不会报错，但<code>p2</code>剥夺了<code>p1</code>的所有权，使得<code>p1</code>成为一个空指针。所以当程序运行时访问<code>p1</code>将会报错。这也是促使<code>auto_ptr</code>的被弃用的原因。</p><h1>unique_ptr</h1><p>作为接替<code>auto_ptr</code>的独占资源所有权的智能指针，其特点如下：</p><ul><li>独占式拥有或严格拥有, 保证同一时间内只有一个智能指针可以指向该对象；</li><li>常见用法：使用 std::unique_ptr 自动管理内存，基本的RAII（Resource Acquisition Is Initialization）思想；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    std::unique_ptr&lt;<span class="keyword">int</span>&gt; uptr = std::make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// 离开 uptr 的作用域的时候自动释放内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>采用独占所有权模式，不允许左值赋值操作，但可以接受临时右值（引用）的赋值，即这里的<code>operator=</code>不是copy赋值操作符，而是move赋值操作符；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;string&gt; <span class="title">p1</span> <span class="params">(<span class="keyword">new</span> string (<span class="string">&quot;Hello World&quot;</span>))</span></span>; </span><br><span class="line">std::unique_ptr&lt;string&gt; p2; </span><br><span class="line">p2 = p1; <span class="comment">// 编译报错</span></span><br><span class="line">std::unique_ptr&lt;string&gt; p3;</span><br><span class="line">p3 = unique_ptr&lt;string&gt;(<span class="keyword">new</span> <span class="built_in">string</span> (<span class="string">&quot;Hello World&quot;</span>));   <span class="comment">// 允许</span></span><br><span class="line">std::unique_ptr&lt;string&gt; p4;</span><br><span class="line">p4 = std::<span class="built_in">move</span>(p1);<span class="comment">// 允许</span></span><br></pre></td></tr></table></figure><p>其内在逻辑是左值（拷贝）赋值操作<code>p2 = p1;</code>后，无法合理的处理左值<code>p1</code>的去留。若采用<code>auto_ptr</code>的思路，将<code>p1</code>置为nullptr，则会重走带来潜在的访问null指针而程序崩溃风险的老路，若置之不理，则不满足独占的属性，所以干脆就不允许这样做。而右值赋值则不存在这样的问题，右值本身就是临时的，在赋值给左值后就会被销毁，左值仍然独占资源。<code>std::move</code>就是将一个左值转换成右值引用，从而实现<a href="https://zhuanlan.zhihu.com/p/357869032"><strong>移动语义</strong></a>。移动语义的存在就是在强调转移所有权，即这时候你是清楚地知道<code>p1</code>对资源的所有权发生了转移，所以即便还是出现了<code>p1</code>已经被销毁，不再可用的情况，那么后面乱用<code>p1</code>而导致程序崩溃的代价也应当由乱用者来承担。</p><ul><li>可以指向一个数组；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实测C++14标准下，以下两种写法都支持</span></span><br><span class="line">std::unique_ptr&lt;<span class="keyword">int</span>[]&gt; uptr = std::make_unique&lt;<span class="keyword">int</span>[]&gt;(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;<span class="keyword">int</span>[]&gt; <span class="title">uptr</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>])</span></span>;</span><br></pre></td></tr></table></figure><ul><li>可以自定义deleter；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">FileCloser</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(FILE* fp)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (fp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="built_in">fclose</span>(fp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="function">std::unique_ptr&lt;FILE, FileCloser&gt; <span class="title">uptr</span><span class="params">(fopen(<span class="string">&quot;test_file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>))</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以使用lambda函数形式的deleter；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    std::unique_ptr&lt;FILE, std::function&lt;<span class="built_in"><span class="keyword">void</span></span>(FILE*)&gt;&gt; <span class="built_in">uptr</span>(</span><br><span class="line">        <span class="built_in">fopen</span>(<span class="string">&quot;test_file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>), [](FILE* fp) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(fp);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>shared_ptr</h1><p><code>std::shared_ptr</code>是引用<strong>计数型智慧指针</strong>（reference-counting smart pointers，RCSP），其特点如下：</p><ul><li>共享式拥有，多个智能指针可以指向相同的对象，该对象和其相关资源会在<strong>最后一个指向它的指针被销毁</strong>时被释放；</li><li>使用计数机制来表明资源被几个指针共享。可以通过成员函数<code>use_count()</code>来查看资源的所有者个数;</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    std::shared_ptr&lt;<span class="keyword">int</span>&gt; sptr = std::make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">assert</span>(sptr.<span class="built_in">use_count</span>() == <span class="number">1</span>);  <span class="comment">// 此时引用计数为 1</span></span><br><span class="line">    &#123;   </span><br><span class="line">        std::shared_ptr&lt;<span class="keyword">int</span>&gt; sptr1 = sptr;</span><br><span class="line">        <span class="built_in">assert</span>(sptr.<span class="built_in">get</span>() == sptr1.<span class="built_in">get</span>());</span><br><span class="line">        <span class="built_in">assert</span>(sptr.<span class="built_in">use_count</span>() == <span class="number">2</span>);   <span class="comment">// sptr 和 sptr1 共享资源，引用计数为 2</span></span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">assert</span>(sptr.<span class="built_in">use_count</span>() == <span class="number">1</span>);   <span class="comment">// sptr1 已经释放</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// use_count 为 0 时自动释放内存</span></span><br></pre></td></tr></table></figure><ul><li>可以指向一个数组；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实测 std::make_shared&lt;int[]&gt; 这种写法直到C++20标准才支持</span></span><br><span class="line">std::shared_ptr&lt;<span class="keyword">int</span>[]&gt; sptr = std::make_shared&lt;<span class="keyword">int</span>[]&gt;(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="keyword">int</span>[]&gt; <span class="title">sptr</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>])</span></span>;</span><br></pre></td></tr></table></figure><ul><li>可以自定义deleter；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;FILE&gt; <span class="title">sptr</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        fopen(<span class="string">&quot;test_file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>), [](FILE* fp) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            std::cout &lt;&lt; <span class="string">&quot;close &quot;</span> &lt;&lt; fp &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="params"><span class="function">            fclose(fp);</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>常用的成员函数：<ul><li><p><code>use_count</code>：返回引用计数的个数；</p></li><li><p><code>unique</code>：返回是否为独占所有权( use_count 为 1)，C++17标准已弃用；</p></li><li><p><code>swap</code>：交换两个 shared_ptr 所拥有的对象；</p></li><li><p><code>reset</code>：放弃拥有对象的所有权或拥有对象的变更（参数为一个新的对象，表示放弃原对象，转而指向新对象），会引起原有对象的引用计数的减少；</p></li><li><p><code>get</code>：返回内部对象的裸指针,；</p></li></ul></li><li>出于性能和异常安全的考虑，尽量使用make_shared进行初始化，详细讨论见<a href="https://blog.csdn.net/yagerfgcs/article/details/72886630">这里</a>。</li></ul><h1>weak_ptr</h1><p>share_ptr智能指针还是有内存泄露的情况，当两个对象相互使用一个shared_ptr成员变量指向对方，会造成循环引用，使引用计数失效（两个指针的引用计数永远不可能下降为0），从而导致内存泄漏。可以看下面这个例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span><span class="comment">//声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">shared_ptr&lt;B&gt; pb_;</span><br><span class="line">~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A delete\n&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">shared_ptr&lt;A&gt; pa_;</span><br><span class="line">~<span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;B delete\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">pb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">pa</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">cout &lt;&lt; pb.<span class="built_in">use_count</span>() &lt;&lt; endl;<span class="comment">//1</span></span><br><span class="line">cout &lt;&lt; pa.<span class="built_in">use_count</span>() &lt;&lt; endl;<span class="comment">//1</span></span><br><span class="line">pb-&gt;pa_ = pa;</span><br><span class="line">pa-&gt;pb_ = pb;</span><br><span class="line">cout &lt;&lt; pb.<span class="built_in">use_count</span>() &lt;&lt; endl;<span class="comment">//2</span></span><br><span class="line">cout &lt;&lt; pa.<span class="built_in">use_count</span>() &lt;&lt; endl;<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数退出后，pa，pb指针析构，引用计数各自减1，但两者引用计数还是为1，从而导致A，B的析构函数不会被调用，资源没有被释放，造成内存泄漏</span></span><br></pre></td></tr></table></figure><p>weak_ptr 是为了配合shared_ptr而引入的智能指针，它是一种不控制对象生命周期的智能指针, 指向一个 shared_ptr 管理的对象，只可以从一个shared_ptr或另一个weak_ptr对象构造，是shared_ptr的<strong>附属</strong>。因此，真正管理对象的还是强引用的shared_ptr，weak_ptr只是提供了对管理对象的一个访问手段，类似于<strong>观察者</strong>的角色，weak_ptr的构造和析构不会引起引用记数的增加或减少，weak_ptr也无法直接访问对象的成员方法，除非将其转化成强引用的shared_ptr。其特点还有：</p><ul><li>weak_ptr和shared_ptr之间可以相互转化，shared_ptr可以直接赋值给weak_ptr，weak_ptr可以通过调用lock成员函数来转化为shared_ptr；</li><li>weak_ptr可以用来解决shared_ptr相互引用的死锁问题；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span><span class="comment">//声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">weak_ptr&lt;B&gt; pb_;</span><br><span class="line">~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A delete\n&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">shared_ptr&lt;A&gt; pa_;</span><br><span class="line">~<span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;B delete\n&quot;</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;B print\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">pb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">pa</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">cout &lt;&lt; pb.<span class="built_in">use_count</span>() &lt;&lt; endl;<span class="comment">//1</span></span><br><span class="line">cout &lt;&lt; pa.<span class="built_in">use_count</span>() &lt;&lt; endl;<span class="comment">//1</span></span><br><span class="line">pb-&gt;pa_ = pa;</span><br><span class="line">pa-&gt;pb_ = pb;</span><br><span class="line">cout &lt;&lt; pb.<span class="built_in">use_count</span>() &lt;&lt; endl;<span class="comment">//1</span></span><br><span class="line">cout &lt;&lt; pa.<span class="built_in">use_count</span>() &lt;&lt; endl;<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 资源B的引用开始就只有1，当pb指针析构时，B的计数变为0，B对象得到释放，调用B的析构函数（打印B delete），</span></span><br><span class="line"><span class="comment">// B释放的同时pa_指针析构，也会使A的计数减1，同时pa析构时使A的计数减1，那么A的计数为0，A得到释放，调用A的析构函数（打印A delete）。</span></span><br></pre></td></tr></table></figure><ul><li><p>常用的成员函数：</p><ul><li><code>expired</code>：用于检测所管理的对象是否已经释放, 如果已经释放, 返回 true; 否则返回 false；</li><li>weak_ptr 没有重载<code>operator*</code>和<code>operator-&gt;</code>，所以不能通过weak_ptr直接访问对象的方法，比如<code>B</code>类的对象中有一个方法<code>print()</code>，我们不能这样访问：<code>pa-&gt;pb_-&gt;print()</code>；</li><li><code>lock</code>：用于获取所管理的对象的强引用shared_ptr. 如果 expired 为 true, 返回一个空的 shared_ptr; 否则返回一个 shared_ptr, 其内部对象的指向与 weak_ptr 相同。故可以用如下方式访问<code>B</code>类对象的<code>print()</code>方法：</li></ul>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">shared_ptr&lt;B&gt; p = pa-&gt;pb_.<span class="built_in">lock</span>();</span><br><span class="line">p-&gt;<span class="built_in">print</span>();</span><br></pre></td></tr></table></figure><ul><li><code>use_count</code>：返回与 shared_ptr 共享的对象的引用计数；</li><li><code>reset</code>：将 weak_ptr 置空；</li><li>weak_ptr 支持拷贝或赋值, 但不会影响对应的 shared_ptr 内部对象的计数；</li></ul></li></ul><h1>参考</h1><p>[1] <a href="https://www.cnblogs.com/WindSun/p/11444429.html">详解C++11智能指针</a></p><p>[2] <a href="https://zhuanlan.zhihu.com/p/150555165">现代 C++：一文读懂智能指针</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 智能指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++ 读书笔记02</title>
      <link href="/2022/05/06/EffectiveC-2-ReadNote02/"/>
      <url>/2022/05/06/EffectiveC-2-ReadNote02/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>本文是阅读《Effective C++ 改善程序与设计的55个具体做法（第三版）》的心得笔记第二部分，文章也会按照原书的顺序依次记录各个条款。</p><p>第一部分的阅读笔记参见<a href="https://no5-aaron-wu.github.io/2022/04/25/EffectiveC-1-ReadNote01/">effective C++ 读书笔记01</a>。</p><h1>资源管理</h1><p>C++中最常使用的资源就是动态内存分配，除此之外，其他常见的资源还有文件描述符（file descriptors）、互斥锁（mutex locks）、图形界面中的字型和笔刷、数据库连接和网络sockets等。<strong>无论是何种资源，当不再使用它时，必须将其归还给系统</strong>。</p><h2 id="条款13：以对象管理资源">条款13：以对象管理资源</h2><p>关于资源泄漏的风险，考虑如下这样一种场景：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> f &#123;</span><br><span class="line">Investment* pInv = <span class="built_in">createInvestment</span>(); <span class="comment">// 工厂函数创建对象并返回对象指针</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">delete</span> pInv;<span class="comment">// 释放pInv指针所指对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的问题在于可能由于<code>...</code>中的某些操作导致代码无法执行到delete语句，比如：</p><ul><li><code>...</code>中存在某种特定的判断逻辑会提前触发return语句；</li><li>delete语句存在于某个循环当中，而该循环又存在<code>continue</code>或<code>break</code>语句导致提前退出；</li><li><code>...</code>中的语句抛出异常；</li></ul><p>当然你在函数设计之初可以拍着胸脯保证不会出现这样的低级错误，你可以在return前加上delete语句，可以try-catch逻辑中增加delete操作等等来规避风险。但代码不只你一个人在写，你后面的维护者依然有可能会在<code>...</code>中重新添加如上所述的跳过delete操作的逻辑，你不能寄希望于每个人都能完全理解他所增加的逻辑对资源管理的影响。所以<strong>不能</strong>单纯的依赖<strong>f函数总能执行到其delete语句</strong>。</p><p>还有就是上面这个例子在<code>createInvestment</code>内分配资源，然后却把锅甩给外部，寄希望于外部去释放资源，本身就不是一个好的接口设计，这点会在<strong>条款18</strong>中进行讨论。</p><p>为了确保<code>createInvestment</code>分配的资源总是能被释放，可以<strong>用对象管理资源</strong>：</p><ul><li><p><strong>获得资源后立即放进管理对象（managing object）中</strong>。即资源取得时机便是初始化时机（Resource Acquisition Is Initialization，RAII），我们在获得资源时立即初始化（或赋值给）某个管理对象，这个管理对象的类可以是自己特制的资源管理类，但更常见的是<strong>智能指针</strong>。其中原书中提到的<code>auto_ptr</code>在C++11标准中以弃用，取而代之的是<code>unique_ptr</code>，而当时还在TR1中的<code>shared_ptr</code>现也正式引入到C++11标准中。关于智能指针的详细讨论，请查看<a href="https://no5-aaron-wu.github.io/2022/05/06/cpp-modern-1-SmartPointers/">这里</a>。</p></li><li><p><strong>管理对象（managing object）运用析构函数确保资源被释放</strong>。将资源释放操作放在管理对象的析构函数中，一旦管理对象将要离开作用域，对象将被销毁，其析构函数自动被调用，从而自动的释放资源。关于资源释放动作可能会抛出异常的处理方式，请参照<strong>条款08</strong>。</p></li></ul><p>还有一点需要注意，原书中提到<code>tr1::shared_ptr</code>不支持数组资源的释放，即析构函数默认调用<code>delete</code>，而不是<code>delete[]</code>这一论断也成为了过去时。新的C++标准下（不确定是14/17/20）的<code>shared_ptr</code>已经重载了<code>[]</code>，即如下写法时合法的：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::shared_ptr&lt;Investment[]&gt; <span class="title">spInv</span><span class="params">(<span class="keyword">new</span> Investment[<span class="number">5</span>])</span></span>;</span><br></pre></td></tr></table></figure><p>但通常情况，更好的选择是使用<code>std::vector&lt;Investment&gt;(5)</code>。</p><h2 id="条款14：在资源管理类中小心copying行为">条款14：在资源管理类中小心copying行为</h2><p>并不是所有的资源都是在堆上管理的（heap-based），这时候智能指针就不适用，需要自己实现一个资源管理类。考虑如下互斥锁（一种资源）的设计：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mutex</span> &#123;</span><span class="comment">/*省略实现*/</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(Mutex* pm)</span></span>;  <span class="comment">//上锁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(Mutex* pm)</span></span>; <span class="comment">//解锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了确保不会忘记给一个上锁的Mutex解锁，设计如下资源管理类，遵循RAII准则</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Lock</span><span class="params">(Mutex* pm)</span> : pm_(pm) &#123;</span> <span class="built_in">lock</span>(pm_); &#125;<span class="comment">// 构建即获取资源</span></span><br><span class="line">    ~<span class="built_in">Lock</span>() &#123; <span class="built_in">unlock</span>(pm_); &#125;<span class="comment">// 析构即释放资源</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Mutex* pm_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法如下：</span></span><br><span class="line">Mutex m;<span class="comment">// 定义互斥锁</span></span><br><span class="line">...</span><br><span class="line">&#123;<span class="comment">// 建立一个块用来定义critical section</span></span><br><span class="line">    <span class="function">Lock <span class="title">ml</span><span class="params">(&amp;m)</span></span>;<span class="comment">// 锁定互斥锁</span></span><br><span class="line">    ...<span class="comment">// 执行critical section 中的操作</span></span><br><span class="line">&#125;<span class="comment">// 离开区块时，自动解锁互斥器</span></span><br></pre></td></tr></table></figure><p>在上述用法中，<code>Lock</code>能工作的很好。但当<code>Lock</code>对象被拷贝时（虽然有点奇怪，但你需要对此负责），事情就有点不太好了：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Lock <span class="title">ml1</span><span class="params">(&amp;m)</span></span>;<span class="comment">// 锁定m</span></span><br><span class="line"><span class="function">Lock <span class="title">ml2</span><span class="params">(ml1)</span></span>;<span class="comment">// 复制构造</span></span><br></pre></td></tr></table></figure><p>首先，在未自定义的情况下，default版本的copy构造函数和copy赋值操作符仅单纯的复制成员变量，<code>ml1</code>和<code>ml2</code>持有相同的<code>pm_</code>：</p><ul><li>若<code>ml1</code>和<code>ml2</code>的生命周期不同，比如<code>ml1</code>提前析构，这时锁已经解开，<code>ml2</code>已经失效；</li><li>即便<code>ml1</code>和<code>ml2</code>的生命周期相同，当它们被析构时，会<code>unlock</code>两次，这种未定义行为的危害程度取决于<code>unlock</code>的实现方式；</li></ul><p>以此为例，那么该如何处理RAII对象的拷贝行为呢？有如下几个选择：</p><ul><li><strong>禁止复制</strong>：参考<strong>条款06</strong>，私以为是<strong>最适合</strong>上述例子的处理，确实没有什么理由去拷贝<code>Lock</code>对象。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock</span> :</span> <span class="keyword">private</span> Uncopyable &#123;</span><br><span class="line">...<span class="comment">// 如前</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>共享底层资源的所有权</strong>：成员用<code>shared_ptr</code>管理，并自定义<code>deleter</code>（析构时<code>unlock</code>而不是释放<code>Mutex</code>对象）。对于上述例子，虽不那么适合，但也不至于招致危害。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Lock</span><span class="params">(Mutex* pm)</span> : pm_(pm, unlock) &#123;</span> <span class="built_in">lock</span>(pm_.<span class="built_in">get</span>()); &#125;<span class="comment">// 构建即获取资源</span></span><br><span class="line"><span class="comment">// 使用default析构函数即可，pm_在引用计数为0时得以释放，并调用自定义的deleter(即unlock函数)</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;Mutex&gt; pm_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>深度复制底层资源</strong>：自定义copy构造函数和copy赋值操作符，在拷贝RAII对象时，连带其所管理的资源（不仅是指针，还有指针所指的内容）一并做一份深拷贝。<strong>并不适合</strong>用于处理上述例子。</li><li><strong>转移底层资源的所有权</strong>：当你希望资源只有一份时，将底层资源用独占所有权的<code>unique_ptr</code>进行管理，自定义copy构造函数和copy赋值操作符以完成<strong>所有权转移</strong>（<code>std::move</code>）的动作。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Lock</span><span class="params">(Mutex* pm)</span> : pm_(pm, unlock) &#123;</span></span><br><span class="line">        <span class="built_in">lock</span>(pm_.<span class="built_in">get</span>());</span><br><span class="line">    &#125;  <span class="comment">// 构建即获取资源</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Lock</span><span class="params">(<span class="keyword">const</span> Lock&amp; ml)</span> </span>&#123;</span><br><span class="line">        pm_ = std::<span class="built_in">move</span>(<span class="keyword">const_cast</span>&lt;Lock&amp;&gt;(ml).pm_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用default析构函数即可，pm_在引用计数为0时得以释放，并调用自定义的deleter(即unlock函数)</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::unique_ptr&lt;Mutex, std::function&lt;<span class="built_in"><span class="keyword">void</span></span>(Mutex*)&gt;&gt; pm_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>既然自己定义了包含<code>std::move</code>的copy构造函数，你应当清楚地知道，所有权转移后原对象<code>ml1</code>便不可用了，之后你应当对错误的使用<code>ml1</code>负责。</p><h2 id="条款15：在资源管理类中提供对原始资源的访问">条款15：在资源管理类中提供对原始资源的访问</h2><p>很多时候，APIs直接指涉资源管理类中的原始资源（raw resources），这就需要资源管理类要提供访问原始资源的方法。</p><p>对智能指针而言，提供了<code>get</code>方法来获取其中的裸指针；此外，智能指针还重载了<code>operator-&gt;</code>和<code>operator*</code>操作符，使其能够隐式地转换成裸指针，从而能像裸指针一样去访问类的成员函数。</p><p>对于自定义的资源管理类，同样也有<strong>显式</strong>和<strong>隐式</strong>两种方式转换成原始资源。一般来讲，显示转换更安全，隐式转换更方便，具体怎么选，我个人是倾向于显示转换，坚持<strong>条款18</strong>的忠告，尤其是在多人合作开发的时候，因为你无法保证所有人都与你的想法一致。一个例子如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">FontHandle <span class="title">getFont</span><span class="params">()</span></span>;<span class="comment">// C API 获取字体资源</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseFont</span><span class="params">(FontHandle fh)</span></span>;<span class="comment">// C API 释放字体资源</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeFontSize</span><span class="params">(FontHandle f, <span class="keyword">int</span> newSize)</span></span>;<span class="comment">// C API 直接指涉原始资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义资源管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Font</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Font</span><span class="params">(FontHandle fh)</span> : f(fh)&#123;</span>&#125;</span><br><span class="line">~<span class="built_in">Font</span>() &#123; <span class="built_in">releaseFont</span>(f); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示转换函数</span></span><br><span class="line">    <span class="function">FontHandle <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> f; &#125;</span><br><span class="line">    <span class="comment">// 隐式转换函数</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">FontHandle</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> f; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">FontHandle f;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="function">Font <span class="title">f</span><span class="params">(getFont())</span></span>;</span><br><span class="line"><span class="keyword">int</span> newFontSize = <span class="number">10</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 显示转换</span></span><br><span class="line"><span class="built_in">changeFontSize</span>(f.<span class="built_in">get</span>(), newFontSize);</span><br><span class="line"><span class="comment">// 隐式转换</span></span><br><span class="line"><span class="built_in">changeFontSize</span>(f, newFontSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一种隐式转换的可能的误用</span></span><br><span class="line"><span class="function">Font <span class="title">f1</span><span class="params">(getFont())</span></span>;</span><br><span class="line">FontHandle f2 = f1;  <span class="comment">// 本意是复制一个Font对象，却复制了一个原始资源</span></span><br></pre></td></tr></table></figure><p>最后要澄清一点，<strong>RAII 类</strong>提供对原始资源的访问也许看起来违反了<strong>封装</strong>性，但这并不是什么设计缺陷。因为RAII类的设计初衷是保证资源得以合理释放，而不是保证封装。封装并不是什么都不暴露，而是暴露有必要暴露的部分。</p><h2 id="条款16：成对使用new和delete时要采取相同形式">条款16：成对使用new和delete时要采取相同形式</h2><p>一句话总结：<code>new</code>与<code>delete</code>搭配使用，<code>new[]</code>与<code>delete[]</code>搭配使用。不可遗漏，也不可错配。</p><p>尽量不要对数组形式使用<code>typedef</code>，容易造成<code>new</code>和<code>delete</code>的错配。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> std::string AddressLines[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">std::string* pal = <span class="keyword">new</span> AddressLines; <span class="comment">// 这里实际是new std::string[4]</span></span><br><span class="line"><span class="keyword">delete</span> pal; <span class="comment">// 错配，未定义行为，可能导致后续对象不能成功析构和释放内存</span></span><br><span class="line"><span class="keyword">delete</span>[] pal;<span class="comment">// 正解！</span></span><br></pre></td></tr></table></figure><h2 id="条款17：以独立语句将-newed-对象置入智能指针">条款17：以独立语句将 newed 对象置入智能指针</h2><p>考虑如下代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPriority</span><span class="params">()</span></span>;<span class="comment">// 获取优先级，可能抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processWidget</span><span class="params">(std::shared_ptr&lt;Widget&gt; pw, <span class="keyword">int</span> priority)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法1</span></span><br><span class="line"><span class="built_in">processWidget</span>(<span class="keyword">new</span> Widget, <span class="built_in">getPriority</span>()); <span class="comment">// 编译不通过，std::shared_ptr的构造函数是explicit构造函数，无法进行隐式转换</span></span><br><span class="line"><span class="comment">// 用法2</span></span><br><span class="line"><span class="built_in">processWidget</span>(std::shared_ptr&lt;Widget&gt;(<span class="keyword">new</span> Widget), <span class="built_in">getPriority</span>()); <span class="comment">// 编译通过，但有资源泄漏的风险</span></span><br><span class="line"><span class="comment">// 用法3</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;Widget&gt; <span class="title">pw</span><span class="params">(<span class="keyword">new</span> Widget)</span></span>;<span class="comment">// 在独立语句中将 newed 对象置入智能指针</span></span><br><span class="line"><span class="built_in">processWidget</span>(pw, <span class="built_in">getPriority</span>());<span class="comment">// 正解</span></span><br></pre></td></tr></table></figure><p>解释一下为什么用法2中会有资源泄漏的风险：</p><p>line7代码总共做了3件事：</p><ul><li><ol><li>调用<code>getPriority</code>;</li></ol></li><li><ol start="2"><li>执行<code>new Widget</code>;</li></ol></li><li><ol start="3"><li>调用<code>std::shared_ptr</code>的构造函数；</li></ol></li></ul><p>C++编译器总能保证先步骤2后步骤3的执行次序（因为2是3的入参），但却无法保证步骤1的执行次序不在2和3之间（可能出于优化性能的考虑）。若在这种情况下，步骤1的执行过程中抛出异常，步骤2返回的指针将会被遗弃，无法置入智能指针中，从而导致了资源泄漏。<strong>以独立语句将 newed 对象置入智能指针</strong>（用法3）可以规避该风险，因为编译器对于跨越语句的各项操作，没有重新排列的自由。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch源码解读 [1]: 编译源码</title>
      <link href="/2022/04/26/PyTorch-1-SourceInstall/"/>
      <url>/2022/04/26/PyTorch-1-SourceInstall/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>为了更好的理解，阅读和调试PyTorch后端的C++源码实现，需要从源码开始编译PyTorch。</p><p>参考文档：<a href="https://github.com/no5-aaron-wu/pytorch/tree/master#installation">PyTorch官方github的安装指引</a></p><h1>Windows编译（已放弃）</h1><p>已有环境如下：</p><blockquote><p>操作系统：windows11</p><p>conda 4.9.2</p><p>python3.8</p><p>VS studio 2019 16.11.3</p><p>CUDA 10.2</p><p>cudnn 8.1.1.33</p><p>ninja 1.10.2</p></blockquote><h2 id="准备工作">准备工作</h2><h3 id="新建conda环境">新建conda环境</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">conda info <span class="literal">-e</span></span><br><span class="line">conda create <span class="literal">-c</span> conda<span class="literal">-forge</span> <span class="literal">-n</span> PyTorchCompile python=<span class="number">3.8</span></span><br><span class="line">conda info <span class="literal">-e</span></span><br></pre></td></tr></table></figure><h3 id="安装依赖">安装依赖</h3><p>激活conda环境，注意不要用PowerShell，不支持Conda虚拟环境。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate PyTorchCompile</span><br><span class="line">conda install astunparse numpy ninja pyyaml mkl mkl-include setuptools cmake cffi typing_extensions future six requests dataclasses</span><br><span class="line">conda install -c conda-forge libuv=1.39</span><br></pre></td></tr></table></figure><h3 id="拉取源码仓库">拉取源码仓库</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone -<span class="literal">-recursive</span> https://github.com/pytorch/pytorch</span><br><span class="line"><span class="built_in">cd</span> pytorch</span><br><span class="line"><span class="comment"># if you are updating an existing checkout</span></span><br><span class="line">git submodule sync</span><br><span class="line">git submodule update -<span class="literal">-init</span> -<span class="literal">-recursive</span> -<span class="literal">-jobs</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>clone中如遇到网络问题，可以尝试使用<a href="https://github.com/docmirror/dev-sidecar">边车加速工具</a>。即便如此，可能还是有些submodule会clone失败。比如使用Google Git仓库的<a href="https://chromium.googlesource.com/linux-syscall-support/"><strong>linux-syscall-support</strong>仓库</a>。这里可以尝试修改<code>.gitmodule</code>中的url，用<a href="https://github.com/cpp-pm/linux-syscall-support">github上的仓库</a>去替换。替换后再次同步并更新。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule sync</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><h3 id="下载安装magma、mkl、sccache">下载安装magma、mkl、sccache</h3><p>这里准备利用pytorch工程目录下<code>installation-helpers</code>中的脚本进行下载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> .\.jenkins\pytorch\win-test-helpers\installation-helpers\</span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="variable">$env</span>:USE_CUDA=<span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="variable">$env</span>:CUDA_VERSION=<span class="string">&quot;10.2&quot;</span></span><br><span class="line"><span class="variable">$env</span>:BUILD_TYPE=<span class="string">&quot;debug&quot;</span></span><br><span class="line">.\install_magma.bat</span><br></pre></td></tr></table></figure><p>执行脚本后会在磁盘根目录得到一个压缩包<code>magma_2.5.4_cuda102_debug.7z</code>，将其拷贝并解压到一个位置，如<code>D:\software\magma_2.5.4_cuda102_debug</code>，该目录下有<code>include</code>和<code>lib</code>，后面会用到。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\install_mkl.bat</span><br></pre></td></tr></table></figure><p>会在根目录下得到<code>mkl.7z</code>，将其拷贝并解压缩。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\install_sccache.bat</span><br></pre></td></tr></table></figure><p>会在根目录下得到一个<code>bin</code>文件夹，里面有<code>sccache.exe</code>和<code>sccache-cl.exe</code>，可以新建<code>D:\software\sccache</code>文件夹，并将bin移动过去。</p><h3 id="配置环境">配置环境</h3><p>在源码根目录下新建一个<code>env_set.bat</code>文件，用于设置编译前的各种环境变量，内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:: Set the environment variables after you have downloaded and upzipped the mkl package,</span><br><span class="line">:: <span class="keyword">else</span> CMake would throw an error as `Could NOT find OpenMP`.</span><br><span class="line"><span class="built_in">set</span> CMAKE_INCLUDE_PATH=D:\software\mkl\include;D:\software\magma_2.5.4_cuda102_debug\include</span><br><span class="line"><span class="built_in">set</span> LIB=D:\software\mkl\lib;D:\software\magma_2.5.4_cuda102_debug\lib;%LIB%</span><br><span class="line"><span class="built_in">set</span> path=%path%;D:\software\sccache\bin</span><br><span class="line"></span><br><span class="line">:: Read the content <span class="keyword">in</span> the previous section carefully before you proceed.</span><br><span class="line">:: [Optional] If you want to override the underlying toolset used by Ninja and Visual Studio with CUDA, please run the following script block.</span><br><span class="line">:: <span class="string">&quot;Visual Studio 2019 Developer Command Prompt&quot;</span> will be run automatically.</span><br><span class="line">:: Make sure you have CMake &gt;= 3.12 before you <span class="keyword">do</span> this when you use the Visual Studio generator.</span><br><span class="line"><span class="built_in">set</span> CMAKE_GENERATOR_TOOLSET_VERSION=14.29</span><br><span class="line"><span class="built_in">set</span> VCToolsVersion=14.29.30133</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> DISTUTILS_USE_SDK=1</span><br><span class="line"><span class="built_in">set</span> USE_CUDA=1</span><br><span class="line"><span class="built_in">set</span> NVCC_GENCODE=-gencode=arch=compute_75,code=sm_75</span><br><span class="line"><span class="built_in">set</span> TORCH_CUDA_ARCH_LIST=7.5</span><br><span class="line"></span><br><span class="line">:: [Optional] If you want to override the CUDA host compiler</span><br><span class="line"><span class="built_in">set</span> CUDAHOSTCXX=D:\software\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;D:\software\Microsoft Visual Studio\2019\Professional\VC\Auxiliary\Build\vcvarsall.bat&quot;</span> x64 -vcvars_ver=%CMAKE_GENERATOR_TOOLSET_VERSION%</span><br></pre></td></tr></table></figure><p>主要参考的是<a href="https://github.com/pytorch/pytorch">官方README</a>和<a href="https://blog.csdn.net/weixin_42122722/article/details/122374308">这篇博客</a>中的内容，其中主要包括：</p><ul><li><p>设置了<code>mkl</code>，<code>magma</code>，<code>sccache</code> 的路径</p></li><li><p>MSVC工具集的版本，不清楚自己VS对应的版本，可以用everything搜索<code>cl.exe</code>（可能会搜到很多，注意根据自己VS安装的位置去甄别），可以看到<code>D:\software\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe</code>，其中<code>14.29.30133</code>便是，或者随便打开一个VS工程，查看属性-&gt;高级-&gt;MSVC工具集版本，如下图：</p></li></ul><p><img src="/2022/04/26/PyTorch-1-SourceInstall/1.png" alt="1"></p><ul><li>指定使用CUDA，并指定算力，这里我的显卡是Geforce GTX 1650 SUPER，算是20系的阉割版吧。在官网查不到算力，有老哥说是7.5，跟20系保持一致，我信了。</li><li>复写CUDA host端的编译器为上述搜到的<code>cl.exe</code>。</li><li>最后用<code>vcvarsall.bat</code>来配置一些我们不需要关心的编译器指定操作，老哥说是必须放在最后一行（虽然官方示例中并不是），但我信了。</li></ul><h2 id="开始编译">开始编译</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in cmd</span></span><br><span class="line">conda activate PyTorchCompile <span class="comment"># 切到对应的conda环境下</span></span><br><span class="line"><span class="built_in">cd</span> &lt;workdir&gt;/pytorch</span><br><span class="line">env_set.bat</span><br><span class="line">python setup.py develop bdist_wheel <span class="comment">#编译并生成wheel文件</span></span><br></pre></td></tr></table></figure><p>同上，必须在cmd下执行上述命令，powershell不支持conda虚拟环境。然后就是漫长的等待。</p><p>几乎是必然的，编译出错了，报<code>ninja: build stopped: subcommand failed.</code>（其实往上翻多一些，会看到报错的具体信息的）。有老哥说是pytorch的版本过高，ninja版本跟不上，导致编译不了。那就不编<code>master</code>，编个早期release版本总行吧</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python setup.py clean</span><br><span class="line">git checkout v1.10.2-rc1</span><br><span class="line">git submodule sync</span><br><span class="line">git submodule update</span><br><span class="line">env_set.bat</span><br><span class="line">python setup.py develop bdist_wheel <span class="comment">#编译并生成wheel文件</span></span><br></pre></td></tr></table></figure><p>编译该版本依旧会出错，可能是多进程编译的缘故，出错后，依旧会打印很多正常log才会停，这次我往上翻了好久，才看到具体的Error信息，大致为<code>(magma.lib) error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2'</code>这样的。怀疑magma是debug版本，但pytorch却编的是release版本导致的（其实我就是想编debug版本），于是在上面的<code>env_set.bat</code>中添加一行<code>set DEBUG=1</code>，然后重新编译：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python setup.py clean</span><br><span class="line">env_set.bat</span><br><span class="line">python setup.py develop bdist_wheel <span class="comment">#编译并生成wheel文件</span></span><br></pre></td></tr></table></figure><p>还是出错：</p><blockquote><p>FAILED: caffe2/CMakeFiles/torch_cuda.dir/operators/torch_cuda_generated_spatial_batch_norm_op.cu.obj E:/code/pytorch/build/caffe2/CMakeFiles/torch_cuda.dir/operators/torch_cuda_generated_spatial_batch_norm_op.cu.obj<br>cmd.exe /C “cd /D E:\code\pytorch\build\caffe2\CMakeFiles\torch_cuda.dir\operators &amp;&amp; D:\software\anaconda3\envs\PyTorchCompile\Library\bin\cmake.exe -E make_directory E:/code/pytorch/build/caffe2/CMakeFiles/torch_cuda.dir/operators/. &amp;&amp; D:\software\anaconda3\envs\PyTorchCompile\Library\bin\cmake.exe -D verbose:BOOL=OFF -D build_configuration:STRING=Debug -D generated_file:STRING=E:/code/pytorch/build/caffe2/CMakeFiles/torch_cuda.dir/operators/./torch_cuda_generated_spatial_batch_norm_op.cu.obj -D generated_cubin_file:STRING=E:/code/pytorch/build/caffe2/CMakeFiles/torch_cuda.dir/operators/./torch_cuda_generated_spatial_batch_norm_op.cu.obj.cubin.txt -P E:/code/pytorch/build/caffe2/CMakeFiles/torch_cuda.dir/operators/torch_cuda_generated_spatial_batch_norm_op.cu.obj.Debug.cmake”<br>spatial_batch_norm_op.cu<br>spatial_batch_norm_op.cu<br>E:\code\pytorch\third_party\protobuf\src\google/protobuf/stubs/callback.h(236): error C2065: “UnknownType”: 未声明的标识符<br>E:\code\pytorch\third_party\protobuf\src\google/protobuf/stubs/callback.h(256): note: 查看对正在编译的 类 模板 实例化“google::protobuf::internal::MethodClosure2&lt;Class,Arg1,Arg2&gt;”的引用<br>CMake Error at torch_cuda_generated_spatial_batch_norm_op.cu.obj.Debug.cmake:281 (message):<br>Error generating file<br>E:/code/pytorch/build/caffe2/CMakeFiles/torch_cuda.dir/operators/./torch_cuda_generated_spatial_batch_norm_op.cu.obj</p></blockquote><p>并没有找到相关信息，且这时我的耐心已经耗光了。还是编译不包含cuda的版本（本来的目的也是看CPU的后端实现），将<code>env_set.bat</code>中<code>set USE_CUDA=1</code>改为<code>set USE_CUDA=0</code>，然后重新编译：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python setup.py clean</span><br><span class="line">env_set.bat</span><br><span class="line">python setup.py develop bdist_wheel <span class="comment">#编译并生成wheel文件</span></span><br></pre></td></tr></table></figure><p>又报错（焯！）：</p><blockquote><p>LINK : fatal error LNK1104: 无法打开文件“python38_d.lib”</p></blockquote><p>这需要安装python debug 版本，我没找到在conda环境下安装python debug的方法，只好将本地的python重装，并选择安装debug 版本库，如下：</p><p><img src="/2022/04/26/PyTorch-1-SourceInstall/2.png" alt="2"></p><p><img src="/2022/04/26/PyTorch-1-SourceInstall/3.png" alt="3"></p><p>然后将本地python38目录下的<code>python38_d.lib</code>文件拷贝到conda 虚拟环境下的对应目录中（这里小版本不一致，本地是3.8.10，conda环境下是3.8.13，希望不会有事）。</p><p><img src="/2022/04/26/PyTorch-1-SourceInstall/4.png" alt="4"></p><p>然后重新编译：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python setup.py clean</span><br><span class="line">env_set.bat</span><br><span class="line">python setup.py develop bdist_wheel <span class="comment">#编译并生成wheel文件</span></span><br></pre></td></tr></table></figure><p>然后又报错如下：</p><blockquote><p>LINK : fatal error LNK1104: 无法打开文件“python38.lib”</p></blockquote><p>血压下不来了，放弃！转到linux上编吧。</p><h1>Linux编译</h1><p>windows编译碰壁后，转而考虑在linux服务器上进行编译（真香），然后用vscode远程连接进行调试。</p><h2 id="准备工作-2">准备工作</h2><h3 id="新建conda环境-2">新建conda环境</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">conda info <span class="literal">-e</span></span><br><span class="line">conda create <span class="literal">-c</span> conda<span class="literal">-forge</span> <span class="literal">-n</span> PyTorchCompile python=<span class="number">3.8</span></span><br><span class="line">conda info <span class="literal">-e</span></span><br></pre></td></tr></table></figure><h3 id="安装依赖-2">安装依赖</h3><p>激活conda环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate PyTorchCompile</span><br><span class="line">conda install astunparse numpy ninja pyyaml mkl mkl-include setuptools cmake cffi typing_extensions future six requests dataclasses</span><br></pre></td></tr></table></figure><h3 id="拉取源码仓库-2">拉取源码仓库</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> v1.<span class="number">10.2</span><span class="literal">-rc1</span> -<span class="literal">-recursive</span> https://github.com/pytorch/pytorch</span><br><span class="line"><span class="built_in">cd</span> pytorch</span><br><span class="line"><span class="comment"># if you are updating an existing checkout</span></span><br><span class="line">git submodule sync</span><br><span class="line">git submodule update -<span class="literal">-init</span> -<span class="literal">-recursive</span> -<span class="literal">-jobs</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>clone中如遇到网络问题，可以尝试使用<a href="https://github.com/docmirror/dev-sidecar">边车加速工具</a>。即便如此，可能还是有些submodule会clone失败。比如使用Google Git仓库的<a href="https://chromium.googlesource.com/linux-syscall-support/"><strong>linux-syscall-support</strong>仓库</a>。这里可以尝试修改<code>.gitmodule</code>中的url，用<a href="https://github.com/cpp-pm/linux-syscall-support">github上的仓库</a>去替换。替换后再次同步并更新。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule sync</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><h2 id="开始编译-2">开始编译</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate PyTorchCompile <span class="comment"># 切到对应的conda环境下</span></span><br><span class="line"><span class="built_in">cd</span> &lt;workdir&gt;/pytorch</span><br><span class="line">DEBUG=1 USE_DISTRIBUTED=0 USE_MKLDNN=0 USE_CUDA=0 BUILD_TEST=0 USE_FBGEMM=0 USE_NNPACK=0 USE_QNNPACK=0 python setup.py develop</span><br></pre></td></tr></table></figure><p>不出意外一路畅通无阻，如果想要<code>torchvision</code>，可以在编译前安装，因为安装torchvision会捆绑安装对应版本的torch。若已经完成了编译（编译会默认执行install操作），可以将捆绑安装的torch卸载，然后再次编译即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install torchvision</span><br><span class="line">pip uninstall torch</span><br><span class="line">DEBUG=1 USE_DISTRIBUTED=0 USE_MKLDNN=0 USE_CUDA=0 BUILD_TEST=0 USE_FBGEMM=0 USE_NNPACK=0 USE_QNNPACK=0 python setup.py develop</span><br></pre></td></tr></table></figure><p><code>pip list</code>可以看到安装的情况：</p><blockquote><p>Package            Version             Editable project location</p><p>torch              1.10.0a0+git71f889c /media/sde/aaron-wu/pytorch</p></blockquote><p>简单测试编译安装是否成功：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(torch.__version__)</span><br><span class="line">    <span class="built_in">print</span>(torch.cuda.is_available())</span><br><span class="line">    <span class="built_in">print</span>(torchvision.__version__)</span><br></pre></td></tr></table></figure><p>发现torchvision不能用，应该是与torch本身不兼容，查一下torch-1.10.2对应的torchvision版本应该是0.11.3，那就重新安装（为了与编译torch对应，也安装cpu版本）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall torchvision</span><br><span class="line">pip install torchvision==0.11.3 --extra-index-url https://download.pytorch.org/whl/cpu</span><br><span class="line">pip uninstall torch</span><br><span class="line">DEBUG=1 USE_DISTRIBUTED=0 USE_MKLDNN=0 USE_CUDA=0 BUILD_TEST=0 USE_FBGEMM=0 USE_NNPACK=0 USE_QNNPACK=0 python setup.py develop</span><br></pre></td></tr></table></figure><p>在<code>import torchvision</code>时会报一个Warning，暂时不清楚影响：</p><blockquote><p>/<yourhomedir>/.conda/envs/PyTorchCompile/lib/python3.8/site-packages/torchvision/io/image.py:11: UserWarning: Failed to load image Python extension: /<yourhomedir>/.conda/envs/PyTorchCompile/lib/python3.8/site-packages/torchvision/image.so: undefined symbol: _ZN3c105ErrorC2ENS_14SourceLocationESs<br>warn(f&quot;Failed to load image Python extension: {e}&quot;)</yourhomedir></yourhomedir></p></blockquote><h2 id="调试代码">调试代码</h2><h3 id="配置launch-json">配置<code>launch.json</code></h3><p>这里使用vscode远程连接到linux服务器进行调试，可以开两个窗口，一个窗口打开pytorch源码文件夹，一个窗口打开用于测试的python脚本文件夹，如下图：</p><p><img src="/2022/04/26/PyTorch-1-SourceInstall/5.png" alt="5"></p><p>左侧为pytorch源码窗口，右侧python测试代码窗口，注意python窗口可以点击右下角的切换python解释器到我们conda虚拟环境对应的python版本。</p><p>为python测试代码配置<code>launch.json</code>文件，在默认生成的配置的基础上，增加<code>&quot;stopOnEntry&quot;: true</code>让代码在启动后马上停止。如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Python: 当前文件&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;console&quot;</span>: <span class="string">&quot;integratedTerminal&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;justMyCode&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;stopOnEntry&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为pytorch源码配置<code>launch.json</code>文件，用gdb attach抓取正在执行的python进程，从而能够在执行中在断点处停下。大致的原理可以看<a href="https://zhuanlan.zhihu.com/p/450589971">这里</a>，摘了一段如下：</p><blockquote><p>PyTorch的代码分为两部分：Python和C++代码。Python代码运行在Python解释器中，而C++代码是以二进制机器码在物理机中执行。不管哪一个，调试器的工作机制都是将执行代码中的代码替换成一个<strong>异常处理</strong>的代码，让程序的执行跳转到调试器中的处理流程去。我们在调试过程中使用的Breakpoint断点就是往指定的地方更换代码，在C++调试器GDB中更换的是二进制代码，在Python调试器中就是字节码。</p><p>我们调试的方式就是用Python调试器启动一个Python程序，此时Python解释器解释执行Python源码，然后到调用PyTorch库的时候，可能会进入PyTorch的部分。而Python的C/C++扩展的原理就是实现一个共享库，然Python解释器去调用。我们让C++调试器，也就是GDB，去attach到这个Python程序上，等它执行到PyTorch中的C++部分时可以在GDB断点暂停。</p><p>VS Code使用的Python调试器是微软自家的debugpy，它使用的是服务端/客户端模型，一共开了三个进程，分别为laucher、debugpy、adapter，在调试的时候使用GDB去attach其中的debugpy程序。</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GDB attach&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;attach&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;/home/wuhao/.conda/envs/PyTorchCompile/bin/python&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;processId&quot;</span>: <span class="string">&quot;$&#123;command:pickProcess&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;为 gdb 启用整齐打印&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>&quot;program&quot;</code>为conda虚拟环境对应的python程序的路径，可以在conda环境中用<code>which python</code>查看。</p><h3 id="运行程序">运行程序</h3><p>首先运行python测试代码，F5（或点击绿色三角按钮）后停在第一行。</p><p><img src="/2022/04/26/PyTorch-1-SourceInstall/6.png" alt="6"></p><p>然后运行pytorch源码，F5（或点击绿色三角按钮）后会让你选择要attach的进程：</p><p><img src="/2022/04/26/PyTorch-1-SourceInstall/7.png" alt="7"></p><p>注意这里要选择第二个进程，即debugpy的进程。首次执行时，会遇到su权限问题：</p><p><img src="/2022/04/26/PyTorch-1-SourceInstall/8.png" alt="8"></p><p>输入y确认后，可能还会弹出类似如下内容：</p><blockquote><p>Authentication is needed to run `/usr/bin/gdb’ as the super user<br>Multiple identities can be used for authentication:</p><ol><li><p>aaa</p></li><li><p>bbb</p></li><li><p>ccc</p></li></ol><p>Choose identity to authenticate as (1-3): [1] + Stopped (tty input)        /usr/bin/pkexec “/usr/bin/gdb” --interpreter=mi --tty=${DbgTerm} 0&lt;“/tmp/Microsoft-MIEngine-In-b025qijj.kuu” 1&gt;“/tmp/Microsoft-MIEngine-Out-d0w13ryp.5p1”<br>You have stopped jobs.</p></blockquote><p>按照<a href="https://github.com/Microsoft/vscode-cpptools/issues/861#issuecomment-521863150">这里</a>的解决方法，执行<code>sudo sysctl -w kernel.yama.ptrace_scope=0</code>即可解决。</p><p>正常attach后的窗口界面如下图所示：</p><p><img src="/2022/04/26/PyTorch-1-SourceInstall/9.png" alt="9"></p><p>这里在<code>stub.c</code>中的<code>PyInit_C</code>函数（import torch时模块初始化）中打上断点，然后F5继续执行python测试代码，等待一段时间后（可能会比较久，GDB在加载共享库的符号），程序将在断点处停下，Pytorch的执行已经从python前端进入到了c++后端。</p><p><img src="/2022/04/26/PyTorch-1-SourceInstall/10.png" alt="10"></p><p>这时打上的断点也从灰变红，说明断点被成功绑定到了代码中，接下来就可以单步调试并理解Pytorch的源码了。</p><h1>docker编译(未完)</h1><h2 id="准备工作-3">准备工作</h2><p>尝试在windows下用docker环境中linux编译，首先新建docker 容器：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container  run -itd --name torchCompile ubuntu:18.04</span><br><span class="line">docker ps -a</span><br><span class="line">docker start torchCompile</span><br><span class="line">docker <span class="built_in">exec</span> -it torchCompile /bin/bash</span><br></pre></td></tr></table></figure><p>docker下安装conda</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.11-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><h1>参考</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/450589971">编译、调试PyTorch源码</a></p><p>[2] <a href="https://zhuanlan.zhihu.com/p/106640360">PyTorch Internals 1：源代码调试方法</a></p>]]></content>
      
      
      <categories>
          
          <category> PyTorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之类与对象 [2]: 类的成员</title>
      <link href="/2022/04/25/cpp-class-2/"/>
      <url>/2022/04/25/cpp-class-2/</url>
      
        <content type="html"><![CDATA[<h1>常数据成员</h1><ul><li>值在程序运行期间不可变</li><li>定义格式：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 类型 数据成员名称;</span><br></pre></td></tr></table></figure></li><li>初始化：只能通过构造函数中的初始化列表进行</li></ul><h1>常成员函数</h1><ul><li>不能修改对象成员值的函数</li><li>定义格式：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类型 成员函数名称(参数列表) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure></li><li>常成员函数不能调用类中非常成员函数</li><li>静态成员函数不能定义为常成员函数</li><li>如果对象为常量，则只能调用其常成员函数</li></ul><h1>静态数据成员</h1><p>静态数据成员只有一份，由该类所有对象共享</p><ul><li>声明格式：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> 类型 静态数据成员名称;</span><br></pre></td></tr></table></figure></li><li>仅声明，不在对象上分配空间</li><li>定义格式：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类型 类名称::静态数据成员名称 = 初始值;</span><br></pre></td></tr></table></figure></li><li>必须在外部初始化，初始化动作与访问控制无关</li></ul><h1>静态成员函数</h1><ul><li>在类而不是对象上调用</li><li>目的：访问类的静态数据成员，若要访问类的非静态数据成员，必须指定对象或者使用指向对象的指针（静态成员函数没有缺省的this指针）</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">g</span><span class="params">( <span class="keyword">const</span> A &amp; a )</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类定义</span></span><br><span class="line"><span class="keyword">int</span> A::count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">A::f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">A::g</span><span class="params">( <span class="keyword">const</span> A &amp; a )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>静态常数据成员</h1><ul><li>值在程序运行期间不可变，且只有唯一副本</li><li>声明格式：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> 类型 数据成员名称;</span><br></pre></td></tr></table></figure><ul><li>定义格式：需在类外定义</li><li>初始化：可以在类内声明时初始化（只允许对整形常量在类内设定初值，且可能某些旧式编译器不支持），也可以在类外定义时初始化</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> A::count = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> A::count;</span><br></pre></td></tr></table></figure><h1>友元函数和友元类</h1><ul><li>慎用-&gt;会破坏类的数据封装和信息隐藏</li><li>类的友元可以访问该类对象的私有与保护成员</li><li>友元可以是函数、其他类成员函数，也可以是类</li><li>定义格式：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> 函数或类声明;</span><br></pre></td></tr></table></figure><ul><li>两个类的友元关系不可逆，除非互为友元</li><li>友元没有访问控制，所以不需要public private protect等修饰，修饰了也都一样</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">double</span> <span class="title">Get_Radius</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Globe</span>;</span> <span class="comment">// 将Globe类所有成员函数声明为友元</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++ 读书笔记01</title>
      <link href="/2022/04/25/EffectiveC-1-ReadNote01/"/>
      <url>/2022/04/25/EffectiveC-1-ReadNote01/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>本文是阅读《Effective C++ 改善程序与设计的55个具体做法（第三版）》的心得笔记，文章也会按照原书的顺序依次记录各个条款。</p><h1>让自己习惯C++</h1><h2 id="条款01：视C-为一个语言联邦">条款01：视C++为一个语言联邦</h2><p>C++在发展中逐渐成为多种次语言的集合：</p><ul><li>C语言：C++的基础，区块、语句、预处理器、内置数据类型、数组和指针等特性都来自C；</li><li>Object-Oriented C++：面向对象编程的特性，主要包括类、封装、继承、多态和virtual函数（动态绑定）等；</li><li>Template C++：泛型编程（generic programing）的特性，带来了模板元编程（template metaprogramming，TMP）</li><li>STL（Standard Template Library，标准模板库）：template程序库，其封装了容器（containers）、迭代器（iterators）、算法（algorithms）和函数对象（function objects）等</li></ul><h2 id="条款02：尽量以const，enum，inline替换-define">条款02：尽量以const，enum，inline替换 #define</h2><p>除了担任控制编译外，尽量减少在c++源代码中使用<code>#define</code>。即<strong>尽量以编译器替换预处理器</strong>，好处有以下几点：</p><ul><li><code>#define</code>定义的宏名称会在编译预处理时被替换掉，因此该宏名也不会记入符号表（symbol table），在编译出错时，调试起来可能会让你感到困惑；</li><li>使用const常量代替#define宏可以减少编译的code size，因为const常量只有一份，而宏在替换后有多份；</li><li><code>#define</code>并不重视作用域（scope），一旦宏被定义，就在其后的编译过程中有效，除非在某处被<code>#undef</code>，因此<code>#define</code>不具备封装性；</li><li><code>#define</code>定义的宏函数，要格外注意定义格式和调用格式，要为每个实参都加上小括号，即便如此，因为是将实参进行无脑的替换，在有些情况下还是有可能出错的，如：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  CALL_WITH_MAX(a,b)   f((a)&gt;(b) ? (a) :(b))</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">CALL_WITH_MAX</span>(++a,b);    <span class="comment">// a累加二次</span></span><br><span class="line"><span class="built_in">CALL_WITH_MAX</span>(++a,b+<span class="number">10</span>); <span class="comment">// a累加一次</span></span><br></pre></td></tr></table></figure><p>​一个好的替代方式就是使用template inline函数，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">callWithMax</span><span class="params">(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">f</span>(a &gt; b ? a : b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​好处也是显而易见，不必在函数体内为参数加上括号，不必担心上述情况的多次计算问题，函数本身的作用域和封装性等优点也是<code>#define</code>所不具有的。</p><h2 id="条款03：尽可能使用const">条款03：尽可能使用const</h2><p>const给被修饰的对象施加一个<strong>语义约束</strong>，该约束告诉编译器和程序员被修饰的对象应当是保持不变的。编译器会强制执行该约束，对不满足该约束的操作会报Error，这可以帮助程序员在编译期间就发现一些隐藏的bug。如果某个值确实应当是不变的，那么你就应当尽可能的使用const。</p><h3 id="const-与-指针">const 与 指针</h3><p>关于<strong>const指针</strong>的用法，遵循以下规则：与类型位置无关，仅看const与星号的相对位置。如果const在星号左侧，表示指针所指内容为常量；如果const在星号右侧，表示指针本身是常量；如果出现在星号两侧，表示被指内容和指针都是常量。</p><h3 id="const-与-STL迭代器">const 与 STL迭代器</h3><p>关于const STL迭代器的用法，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">const</span> std::vector&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.<span class="built_in">begin</span>(); <span class="comment">// 迭代器本身是常量，其所指内容可变</span></span><br><span class="line">*iter = <span class="number">10</span>; <span class="comment">// 正确</span></span><br><span class="line">iter++;<span class="comment">// 错误</span></span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt;::const_iterator cIter = vec.<span class="built_in">begin</span>(); <span class="comment">// 迭代器所指内容为常量，迭代器可变</span></span><br><span class="line">*cIter = <span class="number">10</span>; <span class="comment">// 错误</span></span><br><span class="line">cIter++; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><h3 id="const-与-函数返回值">const 与 函数返回值</h3><p>令函数返回一个常数值，往往可以降低因客户错误而造成的意外，而又不至于放弃安全性和高效性。如：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span> ... &#125;;</span><br><span class="line"><span class="keyword">const</span> Rational <span class="keyword">operator</span>* (<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述函数返回常数值，当遇到下面这种弱智问题是会直接编译报错，而不是在运行期再发现</span></span><br><span class="line">Rational a, b, c;</span><br><span class="line"><span class="keyword">if</span> (a * b = c)&#123; <span class="comment">// 本意想打 == </span></span><br><span class="line">   ... </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果a 和 b 是内置数据类型如int，这里肯定也是直接编译报错的，</span></span><br><span class="line"><span class="comment">// 所以好的用户自定义类型应当在各种行为上与内置数据类型兼容。</span></span><br></pre></td></tr></table></figure><h3 id="const-与-函数入参">const 与 函数入参</h3><p>如上所述，把理应不变的入参约束为const，可以尽早的在编译期就发现问题。</p><h3 id="const-成员函数">const 成员函数</h3><p>有以下几个规则：</p><ul><li><p>const 成员函数<strong>不可以修改对象内容</strong>，即可以用来规定类的哪些方法是具有<strong>只读</strong>属性的，比如一些<code>Get</code>方法；</p></li><li><p>const 成员函数为<strong>操作const对象</strong>提供手段。怎么理解呢？const对象本身应当是不变的，这时const对象调用了一个非const成员函数就显得很奇怪，因为默认非const成员函数是可以修改对象内容的。所以，<strong>如果对象是常量，则只能调用其const 成员函数</strong>。</p></li><li><p>两个成员函数如果只是常量性不同，也是可以被重载的。</p></li><li><p>但其实const 成员函数并不能严格的检测到<strong>不可以修改对象内容</strong>的行为，比如一些<code>Get</code>方法返回了成员的非const引用时，<strong>只读</strong>属性就会失控。如下：</p></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTextBlock</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CTextBlock</span>(<span class="keyword">const</span> <span class="keyword">char</span>* text) &#123;</span><br><span class="line">        pText = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="keyword">if</span> (pText &amp;&amp; <span class="built_in">strlen</span>(text) + <span class="number">1</span> &lt;= <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(pText, <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line">            <span class="built_in">memcpy</span>(pText, text, <span class="built_in">strlen</span>(text));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pText[position];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* pText;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">const</span> CTextBlock <span class="title">cctb</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; cctb[<span class="number">0</span>]; <span class="comment">// 输出 H</span></span><br><span class="line">    <span class="keyword">char</span> c = cctb[<span class="number">0</span>];</span><br><span class="line">    c = <span class="string">&#x27;J&#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; cctb[<span class="number">0</span>];<span class="comment">// 输出 H，虽然返回的是引用，但赋值操作后已经是深拷贝了</span></span><br><span class="line">    cctb[<span class="number">0</span>] = <span class="string">&#x27;J&#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; cctb[<span class="number">0</span>];<span class="comment">// 输出 J，直接对引用操作</span></span><br><span class="line">    <span class="keyword">char</span>* pc = &amp;cctb[<span class="number">0</span>];</span><br><span class="line">    *pc = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; cctb[<span class="number">0</span>];<span class="comment">// 输出 K，用指针指向引用的地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果真的需要在const 成员函数中修改对象的成员（当然你也知道这些修改操作是合理的）的时候，可以给需要修改的成员加上<code>mutable</code>（可变的）关键字，<code>mutable</code>会释放掉非static成员变量的常量性约束。</li></ul><h3 id="如何避免const-成员函数重载导致的代码重复">如何避免const 成员函数重载导致的代码重复</h3><p>如前所述，两个成员函数如果只是常量性不同，也是可以被重载的。即便函数体内的操作是相同的，你也需要为此重复两次，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBlock</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position) <span class="keyword">const</span> &#123;</span><br><span class="line">        ...<span class="comment">// 边界检查</span></span><br><span class="line">        ... <span class="comment">// log数据访问</span></span><br><span class="line">        ... <span class="comment">// 检查数据完整性</span></span><br><span class="line">        <span class="keyword">return</span> text[position];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position) &#123;</span><br><span class="line">        ...<span class="comment">// 边界检查</span></span><br><span class="line">        ... <span class="comment">// log数据访问</span></span><br><span class="line">        ... <span class="comment">// 检查数据完整性</span></span><br><span class="line">        <span class="keyword">return</span> text[position];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string text;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这显然是不太合理的，尤其是在函数体比较长的时候，显得非常蠢（再对函数体封装一层，然后调用也不够优雅），那如何规避呢？可以通过让非const成员函数调用其同名（重载）的const成员函数的方式来解决。如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBlock</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position) <span class="keyword">const</span> &#123;</span><br><span class="line">        ...<span class="comment">// 边界检查</span></span><br><span class="line">        ... <span class="comment">// log数据访问</span></span><br><span class="line">        ... <span class="comment">// 检查数据完整性</span></span><br><span class="line">        <span class="keyword">return</span> text[position];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>&amp;&gt;(<span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> TextBlock&amp;&gt;(*<span class="keyword">this</span>)[position]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string text;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要两次转型动作，<code>static_cast</code>将<code>*this</code>对象转成const对象，以使其能调用const 成员函数，返回的<code>const char&amp;</code>返回值再通过<code>const_cast</code>移除const。</p><h2 id="条款04：确定对象被使用前已先被初始化">条款04：确定对象被使用前已先被初始化</h2><p>对无任何成员的内置数据类型，手动完成初始化；对类而言，初始化的责任落在了构造函数，规则也简单，就是确保每个构造函数都对每一个成员完成初始化。</p><h3 id="注意区别赋值和初始化">注意区别赋值和初始化</h3><p>在构造函数的函数体内的用<code>=</code>为成员赋值的操作并不是初始化。初始化动作发生在进入函数体之前，若成员也为非内置类型，则它们的初始化动作发生的更早，在这些成员的default构造函数被自动调用之时。因此，这种构造函数的写法虽然也能让成员被置上期望的值，但效率不高。default构造所做的工作是被浪费掉的。推荐使用<strong>成员初始化列表</strong>的方式进行初始化，可以避免这一问题。</p><p>为了避免遗漏一些成员导致其并未被初始化的情况，规定<strong>总是在初值列表中列出所有成员变量及基类</strong>（但个人习惯是在声明时已经给了初值（C++11支持）的成员变量，就不再初始化列表中再次列出了）。</p><p>如果成员变量是<strong>const</strong>或者<strong>references</strong>，则<strong>必须</strong>通过成员初始化列表的方式进行初始化。</p><h3 id="成员初始化次序">成员初始化次序</h3><ul><li>基类总是比派生类先被初始化；</li><li>成员变量总是以其声明次序（而不是初始化列表中的顺序）被初始化，但最好让两者保持一致，避免不必要的误解；</li></ul><h3 id="不同编译单元内的non-local-static-对象的初始化次序">不同编译单元内的non-local static 对象的初始化次序</h3><p><strong>static 对象</strong>的寿命在其被构造出来直到程序结束为止，也就是说它们的析构函数会在main()结束时才被自动调用。static 对象包括：</p><ul><li><strong>local static 对象</strong>（局部静态变量）：函数内的定义的static 对象，其作用域仅限在函数内，故为local；</li><li><strong>non-local static 对象</strong>：包括global static 对象，定义于namespace作用域，class作用域，<a href="https://zh.wikibooks.org/wiki/C%2B%2B/%E4%BD%9C%E7%94%A8%E5%9F%9F#%E6%96%87%E4%BB%B6%E4%BD%9C%E7%94%A8%E5%9F%9F">file作用域</a>内的static 对象；</li></ul><p>而所谓的<strong>编译单元</strong>（translation unit）是只产出单一目标文件（single object file）的源码集合。通常就是单一的源文件加上其<code>#include</code>包含的头文件。</p><p>这里的问题是对于定义在<strong>不同的编译单元内</strong>的<strong>non-local static 对象</strong>，C++是<strong>无法保证</strong>其初始化的顺序的。所以如果某个编译单元内的某个non-local static 对象的初始化动作依赖于另一编译单元内的某个non-local static 对象，就可能会出问题。</p><p>解决的办法就是：将每个non-local static 对象都移动到自己的专属函数中（non-local static变 local static），然后让这些函数返回local static 对象的引用。然后让用户调用函数来使用这个local static 对象，而不是直接访问non-local static 对象。其实这也是<strong>单子</strong>（Singleton）模式的一种常见实现方法。</p><p>C++可以保证，函数内的local static 对象会在<strong>该函数被调用期间</strong>，<strong>首次遇到该对象的定义式</strong>时被初始化。这不仅可以解决初始化次序的问题，还可以在该函数没有被调用时，节约掉对象的构造和析构的成本。bravo！</p><p>但是，即便使用上述方法，在多线程环境下，还是会有不确定性。一个解决办法就是：在程序的单线程启动阶段，手动调用所有的reference-returning 函数，以消除与初始化有关的<strong>竞速问题</strong>（race conditions）。</p><h1>构造/析构/赋值运算</h1><h2 id="条款05：了解C-默默编写并调用哪些函数">条款05：了解C++ 默默编写并调用哪些函数</h2><p>如果自己没有声明<strong>构造函数</strong>，<strong>析构函数</strong>，<strong>copy构造函数</strong>，<strong>copy赋值操作符</strong>，那么编译器会为你声明default版本的，且这些函数都是public且inline的。这些default函数只有在其需要被调用时，才会被创建出来。</p><p>其中关于<strong>default构造函数</strong>和<strong>default析构函数</strong>，其作用主要是为编译器提供一个地方来放置“幕后”代码，如调用基类或者非static成员变量的构造函数和析构函数。此外，default析构函数通常是非virtual的，除非该类的基类有声明virtual析构函数，这样该类的析构函数会继承基类的虚属性。</p><p>对于<strong>default</strong>的<strong>copy构造函数</strong>和<strong>copy赋值操作符</strong>，只是单纯地将源对象的每一个非static成员变量拷贝到目标对象。但只有当拷贝动作合法时，编译器才会这样做。</p><p>比如，对于一个含有引用成员或者const成员的类，单纯的拷贝操作显然不合法，因此编译器为赋值动作生成默认的copy赋值操作符，需要你自己声明并定义它。</p><p>再比如，某个基类将copy赋值操作符声明为private，那么编译器就会拒绝为其派生类生成default的copy赋值操作符。因为从逻辑上去推，派生类的copy赋值操作符是要负责处理基类成员的赋值动作的，而基类成员大概率是private的，这时就应当通过调用基类的copy赋值操作符来完成，而派生类是无权访问基类的private成员函数的。这时编译器只能怒摔啤酒，大喊一声“焯”！（doge）</p><h2 id="条款06：若不想使用编译器自动生成的函数，就应该明确拒绝">条款06：若不想使用编译器自动生成的函数，就应该明确拒绝</h2><p>就比如有些时候，我们不希望对象可以被复制，即希望无法调用对象的copy构造函数和copy赋值操作符。这里有两种实现方式：</p><ul><li>可以将copy构造函数和copy赋值操作符声明为private，且不去定义它们（只声明不实现）。这样，除了类自己的成员函数或者友元函数，其他人是没有权限访问到它们的。即便是成员函数或者友元函数试图去调用，也会因为没有具体的实现而出现来链接错误。</li><li>上面方法的确定就是等到链接期间再发现错误也许太晚了，尤其是对于体量很大的项目而言。下面这种方法就可以将报错提前到编译期，即设计一个<code>Uncopyable</code>的基类：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uncopyable</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">Uncopyable</span>()&#123;&#125;<span class="comment">// 允许derived对象构造和析构</span></span><br><span class="line">    ~<span class="built_in">Uncopyable</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Uncopyable</span>(<span class="keyword">const</span> Uncopyable&amp;);<span class="comment">// 但禁止拷贝</span></span><br><span class="line">    Uncopyable&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Uncopyable&amp;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> <span class="keyword">private</span> Uncopyable&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如<strong>条款05</strong>中描述，此时编译器会拒绝为派生类<code>A</code>生成default的copy构造函数和copy赋值操作符，从而避免了不和预期的复制动作的发生。</p><h2 id="条款07：为多态基类声明virtual析构函数">条款07：为多态基类声明virtual析构函数</h2><p>当用基类指针指向派生类对象，此时若基类的析构函数不是virtual的，则调用<code>delete</code>去析构时，只会调用基类的析构函数，派生的析构函数不会被调用，若派生类析构函数中存在释放资源的操作，则会导致内存泄漏。这与<strong>多态</strong>的实现原理<strong>动态绑定</strong>有关，只有virtual函数是动态绑定的，具体可以看<a href="https://no5-aaron-wu.github.io/2021/11/11/cpp-class-1/">这里</a>。</p><p>总而言之，<strong>用于多态目的的基类的析构函数一定要使用虚析构函数</strong>。用于多态目的的基类，<strong>通常</strong>除析构函数外，还有其他virtual成员函数。但也不是所有基类都是用于多态目的的，比如上面<strong>条款06</strong>中提到的<code>Uncopyable</code>类，因此它们不需要虚析构函数。</p><p>但反过来，<strong>有virtual函数但不做为基类的类</strong>通常都是没有（设计）意义的，而且在代码空间上也是浪费的。virtual函数的动态绑定是通过vptr（virtual table pointer，虚表指针）指向vtbl（virtual table，虚表）中的函数指针（函数入口地址）在运行时决定的。维护虚表指针和虚表自然需要额外的空间，对于不需要实现多态而言的类而言，这都是不必要的浪费。</p><p>最好不要尝试继承任何STL容器，因为STL容器的析构函数是non-virtual的。</p><p>原文中有提到，C++没有提供类似Java的final关键字，现在C++11已经提供了，用来禁用类的继承。</p><p>如果想构造一个抽象类（含有纯虚函数的类，不能被实体化）的基类，但没有合适的作为纯虚函数的成员函数，可以将析构函数声明为一个<strong>纯虚析构函数</strong>。但是和一般的纯虚函数不同，纯虚析构函数需要提供函数实现（函数体为空），即便抽象类没有实体，但其派生类的析构函数会尝试调用基类的纯虚析构函数，如果不提供实现，就会使得析构过程出现异常，表现为链接时报错。一个示例如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>()&#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>()=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">A::~<span class="built_in">A</span>()&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="条款08：别让异常逃离析构函数">条款08：别让异常逃离析构函数</h2><p>最好不要在析构函数中抛出（throw）异常，这可能会导致程序过早结束或出现不明确行为。理由如下：</p><ul><li>如果析构函数抛出异常，则<strong>异常点之后的程序不会执行</strong>（严格的说是try代码块中异常点之后的程序在异常抛出后不会执行，catch代码块以及try-catch之后的代码还会继续执行），如果析构函数在异常点之后执行了某些必要的动作比如释放某些资源，则这些动作不会执行，会造成诸如资源泄漏的问题。</li><li>通常异常发生时，c++的机制会调用已经构造对象的析构函数来释放资源，此时若析构函数本身也抛出异常，则前一个异常尚未处理，又有新的异常，会造成程序崩溃的问题。</li></ul><p>但如果析构函数中需要执行一个动作，而这个动作可能会抛出异常，该怎么办？</p><p>那就是把异常完全封装在析构函数内部，决不让异常抛出函数之外。这是一种非常简单，也非常有效的方法。</p><p>看一下书中的例子：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个负责数据库连接的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">static</span> DBConnection <span class="title">create</span><span class="params">()</span></span>; <span class="comment">// 这个函数返回DBConnection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;<span class="comment">// 这个函数会关闭连接，如果关闭失败则抛出异常</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个用来管理DBConnection对象资源的类，在其析构函数中调用close</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBConn</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    ~<span class="built_in">DBConn</span>() &#123;<span class="comment">// 初衷是在DBConn生命周期结束时，自动的关闭连接</span></span><br><span class="line">        db.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DBConnection db;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户调用</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">DBConn <span class="title">dbc</span><span class="params">(DBConnection::create())</span></span>;<span class="comment">// 创建一个DBConnection对象并交给DBConn对象管理</span></span><br><span class="line">    ...<span class="comment">// 通过DBConn的接口使用DBConnection对象</span></span><br><span class="line">&#125;<span class="comment">// 在代码块结束点，DBConn对象被销毁时，自动为DBConnection对象调用close</span></span><br></pre></td></tr></table></figure><p>在上述代码中，<code>DBConn</code>类的析构函数中的<code>db.close()</code>可能会抛出异常，但没有做任何对异常的处理，因此会导致异常的传播，即允许异常逃离这个析构函数。有两种方法可以避免异常的传播：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异常处理方式1：记录并中止</span></span><br><span class="line">DBConn::~<span class="built_in">DBConn</span>()&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; db.<span class="built_in">close</span>(); &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">        记录异常情况;</span><br><span class="line">        std::<span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 异常处理方式2：仅记录，程序继续执行</span></span><br><span class="line">DBConn::~<span class="built_in">DBConn</span>()&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; db.<span class="built_in">close</span>(); &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">        记录异常情况;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择哪一种取决于你对该异常可能造成的恶劣影响的判断。但无论选择哪一种，对于客户而言，都是不够友好的，因为客户无法对异常做出响应。因此一个更好的策略就是<code>DBCoon</code>类也提供一个<code>close</code>函数供客户使用，给客户一个机会自己处理异常。同时在析构函数中也对DBConnection做一个双保险的<code>close</code>处理，当客户不准备或者忘记自己关闭连接时，则可以依赖析构函数自动的关闭连接。但是如果再发生因为抛出异常未被响应而导致的问题，我们就不用背锅了。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBConn</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    db.<span class="built_in">close</span>();</span><br><span class="line">        closed = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">DBConn</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!closed) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; db.<span class="built_in">close</span>(); &#125; <span class="comment">// 客户未关闭连接时</span></span><br><span class="line">            <span class="built_in"><span class="keyword">catch</span></span> (...) &#123;</span><br><span class="line">                记录异常情况;</span><br><span class="line">                ...<span class="comment">// 中止或放行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DBConnection db;</span><br><span class="line">    <span class="keyword">bool</span> closed;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="条款09：绝不在构造和析构过程中调用virtual函数">条款09：绝不在构造和析构过程中调用virtual函数</h2><p>先说构造过程：首先，在构造派生类对象时，基类的构造函数会先于派生类的构造函数被执行。在派生类对象的基类构造期间，派生类的成员变量还未被初始化，此时对象的类型是基类的类型，而不是派生类的类型。这时，virtual函数，dynamic_cast等也是如此看到它的，那么基类构造函数中的virtual函数就会被编译器解析至（resolve to）基类，即动态绑定到基类。而你实现virtual函数的目的，大部分情况下，是希望其会基于派生类的不同而绑定到不同的派生类。这就与你的预期不符。然而C++这样的处理是合理的，因为派生类的函数大概率是会访问派生类自己的成员变量的，如果此时将virtual函数绑定到派生类，则就是允许对象使用未初始化完成的成员变量，这是危险的未定义行为，所以C++不允许这样做。</p><p>析构过程也同理，基类的析构函数在派生类析构函数后被执行。一旦派生类的析构函数开始执行，便可以认为对象中属于析构函数的成员变量已不可用，那就不能将这个对象再当作派生类的类型。所以进入基类的析构函数后，对象就会成为一个基类类型的对象，C++的任何部分包括virtual函数，dynamic_cast等等都是这么看到它的。</p><p>一个<strong>bad case</strong>如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> &#123;</span> <span class="comment">// 股票交易的基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Transaction</span>();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">logTransation</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;<span class="comment">// 记录交易的创建，设计初衷是希望基于交易类型不同而记录不同的内容</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Transaction::<span class="built_in">Transcation</span>() &#123;<span class="comment">// 构造函数的实现</span></span><br><span class="line">    ...</span><br><span class="line"><span class="built_in">logTransation</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTransaction</span>:</span> <span class="keyword">public</span> Transaction &#123;<span class="comment">// 买入交易的派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">logTransation</span><span class="params">()</span> <span class="keyword">const</span></span>;<span class="comment">// 记录买入交易</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTransation</span>:</span> <span class="keyword">public</span> Transaction &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">irtual <span class="keyword">void</span> <span class="title">logTransation</span><span class="params">()</span> <span class="keyword">const</span></span>;<span class="comment">// 记录卖出交易</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述代码中，基类的构造函数中直接调用了一个virtual函数（会被认为是基类的函数），这在一些编译器中可能会给出warning，即便不给出，由于<code>logTransation</code>是纯虚函数，且没有具体的实现，则在链接时也会因为找不到具体的实现而报错。</p><p>而如果将<code>logTransation</code>函数隐藏在一个<code>init</code>的私有函数中，就有可能骗过编译器和链接器，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> &#123;</span> <span class="comment">// 股票交易的基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Transaction</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>(); <span class="comment">// 构造函数中调用非虚函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">logTransation</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>; </span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line"><span class="built_in">logTransation</span>();<span class="comment">// 但是这里还是调用了virtual函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时，虽然能编译通过，但在运行时动态绑定仍然将logTransation视为基类的纯虚函数，此时程序大概率会中止运行并报错。</p><p>但是如果在此基础上，<code>logTransation</code>函数改成正常的虚函数，并给出实现。那么程序就能“正常”运行，只不过你看到的日志记录结果并不正常，对象创建时并没有按照你预期的，调用派生类的<code>logTransation</code>函数实现，而是调用了基类的<code>logTransation</code>函数实现。</p><p>那么上述例子正确的写法如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> &#123;</span> <span class="comment">// 股票交易的基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Transaction</span><span class="params">(<span class="keyword">const</span> std::string&amp; logInfo)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">logTransation</span><span class="params">(<span class="keyword">const</span> std::string&amp; logInfo)</span> <span class="keyword">const</span></span>;<span class="comment">// 非虚函数</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Transaction::<span class="built_in">Transcation</span>(<span class="keyword">const</span> std::string&amp; logInfo) &#123;<span class="comment">// 构造函数的实现</span></span><br><span class="line">    ...</span><br><span class="line"><span class="built_in">logTransation</span>(logInfo);<span class="comment">// 现在是调用非虚函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTransaction</span>:</span> <span class="keyword">public</span> Transaction &#123;<span class="comment">// 买入交易的派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BuyTransaction</span>(parameters)</span><br><span class="line">      : <span class="built_in">Transaction</span>(<span class="built_in">createLogString</span>(parameters))&#123; <span class="comment">// 将log信息传递给基类的构造函数</span></span><br><span class="line">      ...  </span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> std::string <span class="title">createLogString</span><span class="params">(parameters)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>即用<strong>将派生类必要的构造信息向上传递基类的构造函数</strong>来弥补<strong>无法将virtual函数在构造函数向下调用</strong>。</p><p>值得注意的是，上例中用的<code>createLogString</code>函数是static的，这也限定了该函数只能访问那些已经在类外初始化过的static成员变量，而不能访问在构造函数被调用前（<code>createLogString</code>被调用的时机）还处在未定义状态的成员变量。</p><h2 id="条款10：令operator-返回一个-reference-to-this">条款10：令operator= 返回一个 reference to *this</h2><p>赋值采用<strong>右结合律</strong>，因此一个连续赋值<code>x = y = z = 15;</code>会被解析为<code>x = (y = (z = 15));</code>，即将15赋值给z，然后将z赋值给y，然后将y赋值给x。为了让自定义的类的赋值操作符<code>operator=</code>也能实现连续赋值，则必须返回一个reference to *this，这个规则（虽非强制，但被所有内置类型和STL类型共同遵守，所以没有好的理由就不要标新立异了）对所有涉及赋值的运算符，如<code>+=</code>，<code>-=</code>，<code>*=</code>等都适用。</p><h2 id="条款11：在operator-中处理“自我赋值”">条款11：在operator=中处理“自我赋值”</h2><p>虽然自我赋值看起来有点蠢，但是它是合法的，而且很多时候，自我赋值是隐藏在数组的循环遍历赋值（<code>a[i] = a[j]</code>）或者对象的指针之间的赋值操作（<code>*px = *py</code>）中。</p><p>当自我赋值确有可能出现时，则要关注<code>operator=</code>的实现是否有资源管理的陷阱。一个bad case如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bitmap</span> &#123;</span>...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Widget&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Bitmap* pb;<span class="comment">// Bitmap类对象的指针，指向一个从堆中分配的对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个不安全的operator=的实现版本</span></span><br><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">delete</span> pb;<span class="comment">// 销毁当前对象的Bitmap对象成员</span></span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb);<span class="comment">// 使用rhs的Bitmap对象成员拷贝构造新的副本</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">// 见条款10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的<code>operator=</code>的实现中，当出现自我赋值时（即<code>rhs</code>和<code>*this</code>是同一对象），便会导致<code>pb</code>指针指向了一个已经被销毁的对象。为解决这个问题，一个传统方法就是增加<strong>认同测试</strong>（如果自我赋值的概率很小，则会降低代码执行效率，当然如果自我赋值概率很大，则会提高代码执行效率），如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 认同测试的case</span></span><br><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rhs) <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">// 认同测试</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> pb;<span class="comment">// 销毁当前对象的Bitmap对象成员</span></span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb);<span class="comment">// 使用rhs的Bitmap对象成员拷贝构造新的副本</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">// 见条款10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样做只能解决<strong>自我赋值安全性</strong>问题，不能解决<strong>异常安全性</strong>问题，即当<code>new Bitmap</code>操作因内存不足或Bitmap的拷贝构造函数抛出异常等原因而出现异常时，<code>pb</code>指针仍然是指向一个被销毁的对象。可以通过如下的方式满足异常安全性：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs)&#123;</span><br><span class="line">Bitmap* pOrig = pb;<span class="comment">// 记住原来的pb</span></span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb);<span class="comment">// 使用rhs的Bitmap对象成员拷贝构造新的副本</span></span><br><span class="line">    <span class="keyword">delete</span> pOrig;<span class="comment">// 销毁原来的pb</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">// 见条款10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在当<code>new Bitmap</code>操作抛出异常时，后续代码将不会被执行，因而<code>pb</code>及其所在的<code>Widget</code>对象将维持原状。同时因为是先构建副本，再销毁原对象，所以上述实现也具备自我赋值的安全性。同样的，关于效率问题的考虑，则取决于自我赋值发生的概率，若概率较高，则可以考虑加上认同测试。</p><p>上述实现的一个标准替代方案（常见而且够好的operator=的写法）就是<strong>copy and swap</strong>技术（详见条款29）。这是一个强调异常安全性的技术，其关键在于<strong>修改对象数据的副本，然后在一个不抛异常的函数中将修改的数据和原件置换</strong>。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Widget::Swap</span><span class="params">(MapWidget&amp; rhs)</span> </span>&#123;</span><br><span class="line">    std::<span class="built_in">swap</span>(rhs.pb,pb);</span><br><span class="line">&#125;</span><br><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</span><br><span class="line">    Widget <span class="built_in">temp</span>(rhs);  <span class="comment">// 构造副本，若rhs为传值而不是传引用，实际已经是原对象的副本，这一句可以省略</span></span><br><span class="line">    <span class="built_in">Swap</span>(temp);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条款12：复制对象时勿忘其每一个成分">条款12：复制对象时勿忘其每一个成分</h2><p>当你决定自己实现copy函数（包括拷贝构造函数和拷贝赋值操作符），而不是让编译器生成default版本（其会将被拷贝对象的所有成员都做一份拷贝），那么你就接过了这一重任，所以要确保：</p><ul><li>拷贝所有local成员变量：若你遗漏了某些成员的拷贝，编译器也不会提示你，这可能会埋下一些隐患。当你新增了类的成员时，一定要想着同时也要修改copy函数；</li><li>派生类的copy函数要调用所有基类的相应的copy函数，一个实现如下：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">Customer</span>(std::string name, <span class="keyword">float</span> money): <span class="built_in">name_</span>(name), <span class="built_in">money_</span>(money) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string name_;</span><br><span class="line">    <span class="keyword">float</span> money_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipCustomer</span>:</span> <span class="keyword">public</span> Customer &#123;</span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="keyword">using</span> Customer::Customer; <span class="comment">// 继承构造函数，C++11</span></span><br><span class="line">    <span class="built_in">VipCustomer</span>(<span class="keyword">const</span> VipCustomer&amp; rhs)</span><br><span class="line">        :<span class="built_in">priority_</span>(rhs.priority_), <span class="built_in">Customer</span>(rhs) &#123;&#125; <span class="comment">// 调用基类的拷贝构造函数</span></span><br><span class="line">    VipCustomer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> VipCustomer&amp; rhs) &#123;</span><br><span class="line">        Customer::<span class="keyword">operator</span>=(rhs);<span class="comment">// 调用基类的copy赋值操作符</span></span><br><span class="line">        priority_ = rhs.priority_;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> priority)</span> </span>&#123; priority_ = priority; &#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> priority_;<span class="comment">// 上面使用了继承构造函数，则子类独有成员可以通过单独set函数赋值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>不要为了避免代码重复，而让copy构造函数调用copy赋值操作符，反之也不行。合理的消除重复代码的做法是，重新封装一个private类型的<code>init</code>函数供两者调用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AMBA开发 [1]：CVflow 编程</title>
      <link href="/2022/03/24/AMBA-1-CvflowProgramming/"/>
      <url>/2022/03/24/AMBA-1-CvflowProgramming/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>安霸CVflow处理器单元是一个为视觉算法设计的的硬件协处理器（VPU/NPU），使用<strong>有向无环图</strong>（DAG，directed acyclic graph）来表示视觉算法。</p><h1>概念介绍</h1><h2 id="DAG">DAG</h2><p>DAG是一个有向无环图，视觉算法的计算流的图表示。图中的**节点（Nodes）**表示运算操作，<strong>连线（Links）<strong>表示运算操作之间的数据流。数据由多维张量组成，这里简称为</strong>向量（Vectors）</strong>。</p><h2 id="CVflow">CVflow</h2><p>DAG表示的视觉算法在CVflow处理器上执行。DAG包含了关于I/O buffers、Nodes（又称为Primitives）以及Links的描述符。</p><p>CVflow上没有程序计数器或者指令pipeline的概念，一个主调度器会基于图中的数据依赖关系对可用的硬件资源上的<strong>原语</strong>（primitives）进行分时复用的调度。在CVflow上，如果下游原语依赖的数据已经准备好，那么该原语会基于硬件可用与否被并行执行。这种部分执行（partial execution）允许更有效地调度硬件资源，并允许片上内存在原语之间传递结果，而不是从外部DRAM存储和重新加载这些结果。</p><p>原语之间的依赖关系在DAG程序中<strong>显式</strong>地表示，而不是由程序中指令的执行顺序所暗示。这种方法与传统处理器中的指令流不同，传统处理器中的指令通过寄存器文件、全局状态寄存器或片上内存共享状态信息。</p><p>为了便于数据的处理，CVflow处理器根据其输入和输出的维度自动迭代。而其他处理器的多维数据处理通常需要嵌套循环和特定的轮数。</p><p>CVflow处理器支持可变大小的4D张量（简称为Vectors）。运算操作直接在整个向量上执行，而不像其他传统处理器，数据类型是标量或着特定长度的SIMD数据类型。</p><h2 id="Vectors">Vectors</h2><p>CVflow处理器中的数据被表示为多维张量，简称为向量（Vectors）。支持的维度有标量、1D、2D、3D或4D。接受的数据精度格式为8、16和32位整数、定点数或浮点数。</p><h2 id="Primitives">Primitives</h2><p>原语是DAG中抽象节点的基本形式。节点对输入向量中包含的数据进行计算，并生成新的向量。</p><h2 id="Descriptors">Descriptors</h2><p>数据描述符（Data Descriptors）指定DAG中的数据链接（Data Links）的名称、向量类型和大小。</p><p>DAG程序由完整描述DAG功能的原语和数据描述符列表组成。</p><h1>工具</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境设置</span></span><br><span class="line"><span class="built_in">source</span> /opt/amba/env/env_set.sh cv22 /opt/amba</span><br></pre></td></tr></table></figure><h2 id="vas：编译器">vas：编译器</h2><p>Vas是编译DAGs的编译器。Vas可以把<code>.vas</code>文本文件中的DAGs编译成二进制的<code>.vdg</code>对象文件。在编译过程中，vas还会检查输入的<code>.vas</code>文件的VAS语法的有效性、跨向量维度的输入和输出数据的一致性，以及基于当前芯片版本的配置要求。</p><p>作为编译的一部分，vas在VMEM中分配数据缓冲区，并生成微码头文件（microcode header files）、用于DAG可视化的<code>.dot</code>文件和DAG memory image的二进制转储（binary dump）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vas -h</span><br><span class="line">vas xxx.vas</span><br></pre></td></tr></table></figure><h2 id="vplot：可视化">vplot：可视化</h2><p>Vplot是一个用来可视化由vas生成的<code>.dot</code>文件的脚本。Vplot以PDF格式输出DAG可视化。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vplot xxx.dot</span><br></pre></td></tr></table></figure><h2 id="ades：仿真器">ades：仿真器</h2><p>Ades是CVflow处理器的仿真器，它允许DAG设计者测试他们的代码的算法正确性。</p><p>有两种执行模式：正常模式和交互模式。在正常模式下，ades通过一个脚本文件在单个批处理中运行所有预设的指令。在交互模式中，命令行shell提供了指令，允许通过可视化DAG中的中间向量进行交互调试。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mode 1</span></span><br><span class="line">ades xxx.cmd<span class="comment"># 正常模式执行脚本</span></span><br><span class="line"><span class="comment">#mode 2</span></span><br><span class="line">ades <span class="comment"># 进入交互模式</span></span><br><span class="line">script xxx.cmd <span class="comment"># 执行脚本</span></span><br></pre></td></tr></table></figure><p>其中<code>xxx.cmd</code>文件是一组ades指令的集合，通常由VDG文件和输入数据文件的加载指令、运行指令以及将结果存储到输出数据文件或转储中间数据的指令组成。一个例子如下：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ld out/vas_output/hello.vdg</span><br><span class="line">lb input input/input.bin</span><br><span class="line">run</span><br><span class="line">sb output_0 output/output_0.bin</span><br></pre></td></tr></table></figure><p>在交互模式下执行脚本后，可以通过<code>vecinfo</code>和<code>peekvec</code>指令监视DAG中的向量。可以在交互模式下使用<code>help</code>命令查看所有的ades指令。</p><h2 id="实用工具">实用工具</h2><h3 id="cv-f2vp-convert">cv_f2vp_convert</h3><p>此脚本用于按照CVflow处理器支持的数据格式生成常量和即时二进制数据，可以通过<code>cv_f2vp_convert -h</code>命令查看用法，下面是一个将输入文件中的值转换成8-bit二进制表示的例子：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cv_f2vp_convert -it -fmt 0,0,0,0 -i zero.txt -o zero.bin</span><br></pre></td></tr></table></figure><p>其中<code>-it</code>表示输入为text file， <code>-fmt</code>指定数据格式<code>&lt;sign,datasize,expoffset,expbits&gt;</code>，<code>zero.txt</code>文件的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 1 1 1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>第一行指定了数据维度（不是必须的，若没有，使用<code>-nd</code>参数），下面是数据，这里只有一个0，输出的<code>zero.bin</code>将只含有一个8-bit 0值的二进制表示。</p><h1>编程概述</h1><p>DAGs使用一种被称为VAS的DAG-based语言编写。DAG由两种类型的基本组件组成：数据链接描述符（Links）和原语（Primitives/Nodes）。</p><p>VAS编程语言提供了一组高度封装的宏，使得用户不必关心底层细节，只关注想要指定的信息。</p><p>VAS利用了C和C++的宏预处理器。因此，它支持C指令，如<code>#define</code>、<code>#ifdef</code>等。</p><p>VAS语言支持的主要特性有：</p><ul><li>符号名称</li><li>C/C++ 风格的注释</li><li>用户宏</li><li>头文件</li></ul><h2 id="宏定义">宏定义</h2><p>编译器隐式地包含<code>vp_vas.h</code>，其中包含一组为CVflow原语、数据格式、向量维度和原语参数而定义的vas宏。它们被定义为<strong>变量宏</strong>。</p><h2 id="DAG顶层定义">DAG顶层定义</h2><p>遵循以下结构：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DAG &lt;DAG_name&gt; = &#123;</span><br><span class="line">VP_input(...);</span><br><span class="line">...</span><br><span class="line">VP_&lt;primitive_type&gt;(</span><br><span class="line">...</span><br><span class="line">VP_tensor(...),</span><br><span class="line">...</span><br><span class="line">);</span><br><span class="line">...</span><br><span class="line">VP_output(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DAG布局">DAG布局</h2><blockquote><p>生产者必须始终先于消费者</p></blockquote><p>这是对DAG组件的合法布局的要求。DAG中的组件必须遵循数据流的顺序，生产者先于消费者。首先列出主输入描述符，然后是第一层原语，然后是使用第一层产生的数据的原语，以此类推。</p><p>每个原语的输出数据描述符的声明都嵌入在生产者原语的声明中。</p><p>对于使用前面原语的输出数据描述符的原语，通过数据描述符的标签来引用数据。</p><h2 id="主输入描述符（Primary-Input-Descriptors）">主输入描述符（Primary Input Descriptors）</h2><h3 id="动态主输入">动态主输入</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VP_input(_name, _data_format, _vector, ...)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>_name：此参数定义了与数据描述符相关联的标签。原语使用该名称将其输入链接到其各自的输入数据描述符。使用唯一的描述性名称；</li><li>_data_format：此参数定义了关联向量中的所有元素的数据类型和精度。可以使用预定义的公共数据类型。也可以使用<code>data_format(_sign,_datasize,_expoffset,_expbits)</code>宏，具体可见<code>vp_vas.h</code>；</li><li>_vector：此参数定义了向量的维数。最高到4D：<code>vector(planes, depth, height, width)</code>，若想定义布尔值vector（bitvector）,需要在数据描述符中添加<code>bitvector=1</code>的属性；</li></ul><h3 id="静态主输入">静态主输入</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VP_constant(_name, _data_format, _vector, _data_file, ...)</span><br></pre></td></tr></table></figure><p>大部分参数与动态主输入一致，<code>_data_file</code>参数为二进制文件的名称，用双引号括起来。文件中的数据格式必须与<code>_data_format</code>规定的一致。</p><h2 id="原语宏（Primitive-Macros）">原语宏（Primitive Macros）</h2><p>每个原语都由预定义的宏来描述。语法详情请参见<code>vp_primitive.h</code>。</p><p>原语宏一般包含如下各项：</p><ul><li>输入描述符标签：标签可以是主输入描述符的名称或（前面的）原语输出描述符的名称；</li><li>立即数张量描述符：用<code>VP_imm()</code>表示；</li><li>输出张量描述符：用<code>VP_tensor()</code>表示；</li><li>属性（attributes）：用<code>&lt;name&gt;=&lt;value&gt;</code>表示；</li></ul><h3 id="立即数张量描述符（Immediate-Tensor-Descriptors）">立即数张量描述符（Immediate Tensor Descriptors）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// using string</span></span><br><span class="line">VP_imm(_data, _data_format, _vector, ...)</span><br><span class="line"><span class="comment">// using file</span></span><br><span class="line">VP_imm(_data_file, _data_format, _vector, ...)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>_data：小端格式的十六进制字节的字符串。如<code>&quot;04 00&quot;</code>；</li><li>_data_file：二进制文件的名称；</li><li>_data_format：指定关联向量中的所有元素的数据类型和精度的宏；</li><li>_vector：指定向量维度的宏；</li></ul><h3 id="输出张量描述符（Output-Tensor-Descriptor）">输出张量描述符（Output Tensor Descriptor）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VP_tensor(_name, _data_format, [_vector,] ...)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p>_name：输出描述符的名称（标签）。</p></li><li><p>_data_format：指定关联向量中的所有元素的数据类型和精度的宏。</p></li><li><p>_vector：指定向量维度的宏（可选，用来检查编译器推断的输出维度是否正确）。</p></li></ul><h2 id="主输出描述符（Primary-Input-Descriptors）">主输出描述符（Primary Input Descriptors）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VP_output(_name, _v0, ...)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>_name：主输出的名称（标签）。</li><li>_v0：要分配给此主输出的原语输出描述符的名称。</li></ul><h2 id="标量（Scalars）">标量（Scalars）</h2><h3 id="动态标量输入">动态标量输入</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VP_scalar(_name, _data_format, _value, ...)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>_name：此参数定义了与数据描述符相关联的标签；</li><li>_data_format：此参数定义了标量的数据类型和精度；</li><li>_value：此参数定义了标量的数值；</li></ul><h3 id="静态标量输入">静态标量输入</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VP_scalar(_name, _data_format, _value, is_constant = <span class="number">1</span>, ...)</span><br></pre></td></tr></table></figure><h3 id="数字表示">数字表示</h3><p>常量标量或者立即数张量的标量可以直接表示成数字形式，如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VP_add(<span class="number">1</span>, <span class="number">2.0</span>, VP_tensor(x, u8(<span class="number">0</span>)));</span><br></pre></td></tr></table></figure><h2 id="VPP扩展和优化">VPP扩展和优化</h2><p>VAS编程语言支持自动张量构造（automatic tensor configuration）的扩展，也称为<strong>VPP扩展</strong>。使用<code>-cnngen</code>编译器选项启用这些扩展。</p><h3 id="VPP扩展">VPP扩展</h3><ul><li>支持未定义数据类型的<code>VP_tensor(_name, ...)</code>；</li><li>支持未量化的数据类型（float32_t）的<code>VP_imm(&quot;00 00 80 40&quot;, float32_t, vector(1))</code>;</li></ul><h3 id="VPP优化">VPP优化</h3><p>VPP还作为一个预处理器，通过将基本原语(如<code>muli</code>、<code>addi</code>、<code>conv2i</code>)融合或折叠成更有效的原语(如<code>maddi</code>、<code>conv2iepbs</code>)来寻找优化原始vas代码的机会。</p><h3 id="输入要求">输入要求</h3><p>VPP特性要求用户提供输入数据图像或图像序列，这将用于评估DAG中每个原语输出的动态范围（量化）。一个命令行的例子如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vas -cnngen example.vas -dra_input <span class="string">&quot;data:data.bin&quot;</span></span><br></pre></td></tr></table></figure><p>如果使用多个图像，则图像序列以列表形式在文本文件中传递，每行一个文件名。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vas -cnngen example.vas -dra_input <span class="string">&quot;data:data_list.txt&quot;</span></span><br></pre></td></tr></table></figure><p>生成的原语vas代码存储在<code>./out</code>目录下。最终的结果<code>vas_output</code>是这个目录下的一个子目录。</p><h3 id="自动张量构造">自动张量构造</h3><p>自动张量构造是与<code>VP_tensor()</code>一起使用的，当未定义张量数据类型<code>_data_format</code>的情况下，则编译器就认为该张量的精度属性应当根据<strong>动态范围分析</strong>（dynamic range analysis，DRA）自动确定。同样<code>_vector</code>未定义的情况下，编译器自动确定张量维度，若定义，则作为检查自动确定的张量维度是否正确的依据。</p><p>其中<code>_data_format</code>也可以使用部分定义的形式如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VP_tensor(x, data_format(<span class="number">1</span>, <span class="number">0</span>, undef, <span class="number">0</span>))</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">VP_tensor(x, i8(undef))</span><br></pre></td></tr></table></figure><p>上面的例子就表示需要编译器自动确定的只有<code>expoffset</code>这一个属性。</p><h3 id="自动立即数构造">自动立即数构造</h3><p>自动立即数张量也是VPP扩展构造的一部分。用户仍然需要定义源数据的格式（目前仅支持<code>float32_t</code>）。立即数张量的最终数据格式将自动确定。即当指定数据格式为<code>float32_t</code>时，编译器会根据输入的<code>float32_t</code>数据自动确定张量的数据类型（8-bit或16bit），该格式可以适应整个直接张量的动态范围，同时最小化原始输出中的误差。</p><h3 id="融合原语">融合原语</h3><p>通过<code>-cnngen-opt</code>选项可以将原语融合成更高效的原语(在<code>-cnngen</code>开启时)。</p>]]></content>
      
      
      <categories>
          
          <category> AMBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ambarella </tag>
            
            <tag> CVflow </tag>
            
            <tag> DAG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SNPE开发[1]: GetStart</title>
      <link href="/2022/02/18/SNPE-1-GetStart/"/>
      <url>/2022/02/18/SNPE-1-GetStart/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><blockquote><p>硬件：创通联达以高通QCS610作为SOC的开发板TurboX C610</p><p>SDK：<a href="https://developer.qualcomm.com/downloads/qualcomm-neural-processing-sdk-ai-v1590">Qualcomm Neural Processing SDK for AI v1.59.0</a></p><p>docs：<a href="https://developer.qualcomm.com/sites/default/files/docs/snpe/overview.html">Reference Guide</a></p></blockquote><p>骁龙神经处理引擎（SnapDragon Neural Processing Engine）是高通用于加速神经网络的运行时推理框架。</p><h1>Setup</h1><h2 id="必备条件">必备条件</h2><ul><li>目前SNPE SDK开发环境仅支持Ubuntu-18.04；</li><li>支持Caffe，Caffe2，ONNX，PyTorch，TensorFlow，TFLite；</li><li>Python3.6</li><li>Android NDK（可选）：用于构建SDK附带的Cpp示例</li><li>Android SDK（可选）：用于构建 SDK附带的APK</li></ul><h2 id="安装docker-ubuntu18-04">安装docker-ubuntu18.04</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:<span class="number">18.04</span></span><br><span class="line">docker container run <span class="literal">-itd</span> -<span class="literal">-name</span> snpe_1.<span class="number">59.0</span> ubuntu:<span class="number">18.04</span></span><br><span class="line">docker exec <span class="literal">-it</span> snpe_1.<span class="number">59.0</span> /bin/bash</span><br></pre></td></tr></table></figure><h2 id="安装python3-6">安装python3.6</h2><p>换apt-get源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>删除原内容，添加以下内容，保存</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#阿里云源</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>更新apt-get并安装python3.6</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install python3.6</span><br><span class="line">ln -s /usr/bin/python3.6 /usr/bin/python</span><br><span class="line">python --version</span><br></pre></td></tr></table></figure><h2 id="安装SDK">安装SDK</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install unzip</span><br><span class="line">apt-get install sudo</span><br><span class="line">unzip -X snpe-1.59.0.zip</span><br><span class="line"><span class="built_in">source</span> snpe-1.59.0.3230/bin/dependencies.sh</span><br></pre></td></tr></table></figure><p>检查依赖python包安装情况，自行安装缺失的包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> snpe-1.59.0.3230/bin/check_python_depends.sh</span><br><span class="line">apt-get install python-pip</span><br><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>这时发现python默认版本被指定为python2.7（可能是安装python-pip时安装了python2）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python --verison</span><br><span class="line">ls /usr/bin/python* -l</span><br></pre></td></tr></table></figure><blockquote><p>lrwxrwxrwx 1 root root       9 Apr 16  2018 <strong>/usr/bin/python -&gt; python2.7</strong><br>lrwxrwxrwx 1 root root       9 Apr 16  2018 /usr/bin/python2 -&gt; python2.7<br>-rwxr-xr-x 1 root root 3633000 Feb 27  2021 /usr/bin/python2.7<br>lrwxrwxrwx 1 root root       9 Oct 25  2018 /usr/bin/python3 -&gt; python3.6<br>-rwxr-xr-x 2 root root 4526456 Dec  8 21:08 /usr/bin/python3.6</p></blockquote><p>可以看到<code>/usr/bin/python</code>软链接指向了<code>python2.7</code>文件夹，可以手动删掉软链接并重新指定。这里尝试使用<code>update-alternatives</code>来管理版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br><span class="line">update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2</span><br><span class="line">update-alternatives --list python <span class="comment"># 查看 python 对应的版本有哪些</span></span><br><span class="line">update-alternatives --config python <span class="comment"># 切换 python 版本</span></span><br></pre></td></tr></table></figure><p>再次查看软链接：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /usr/bin/python -l</span><br></pre></td></tr></table></figure><blockquote><p>lrwxrwxrwx 1 root root 24 Feb 18 06:26 /usr/bin/python -&gt; <strong>/etc/alternatives/python</strong></p></blockquote><p>发现软链接指向了<code>/etc/alternatives/python</code>，再看下这是个啥：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /etc/alternatives/python -l</span><br></pre></td></tr></table></figure><blockquote><p>lrwxrwxrwx 1 root root 18 Feb 18 06:30 /etc/alternatives/python -&gt; <strong>/usr/bin/python3.6</strong></p></blockquote><p>哦，<code>update-alternatives</code>管理版本的机制就是增加了一个<code>/etc/alternatives/python</code>软链接（中间层）来实现的。那这时<code>pip</code>命令的版本怎么对应python版本呢？以<code>pip -V</code>打印版本信息为准，实测当切到python3.6时，无论<code>pip</code>，<code>pip2</code>，<code>pip3</code>都是对应python3.6的包管理，而切到python2.7时，<code>pip</code>和<code>pip2</code>都对应python2.7的包管理，<code>pip3</code>对应python3.6的包管理。</p><p>升级pip版本，并换源：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -U pip</span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/ <span class="comment"># 阿里源</span></span><br><span class="line"><span class="comment"># pip config unset global.index-url # 换回默认源</span></span><br></pre></td></tr></table></figure><p>安装依赖包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line">pip install sphinx</span><br><span class="line">pip install scipy</span><br><span class="line">pip install matplotlib</span><br><span class="line">pip install scikit-image</span><br><span class="line">pip install protobuf</span><br><span class="line">pip install pyyaml</span><br><span class="line">pip install mako</span><br></pre></td></tr></table></figure><h2 id="docker内adb连接">docker内adb连接</h2><p>首先确保主机可以通过usb-adb连接到板子，这时就可以用界面投影工具scrcpy.exe进入的Android系统UI界面，在UI内操作连接与主机同一局域网的WIFI，并记下板子的IP地址<code>10.0.49.7</code>。</p><p>在docker容器内尝试ping板子的IP：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping 10.0.49.7</span><br></pre></td></tr></table></figure><p>可以ping通的话，在<strong>主机端</strong>以TCP/IP方式重启ADB服务：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">adb tcpip <span class="number">5555</span></span><br></pre></td></tr></table></figure><p>在docker内安装adb工具，并通过网络连接adb：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install android-tools-adb</span><br><span class="line">adb connect 10.0.49.7</span><br><span class="line">adb devices</span><br></pre></td></tr></table></figure><blockquote><p>* daemon not running; starting now at tcp:5037</p><p>* daemon started successfully<br>connected to 10.0.49.7:5555</p><p>···</p><p>List of devices attached<br>10.0.49.7:5555  device</p></blockquote><h2 id="安装Android-NDK">安装Android NDK</h2><p>拷贝下载好的<code>android-ndk-r20b-linux-x86_64.zip</code>到docker中，解压到想要存放的位置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip android-ndk-r20b-linux-x86_64.zip</span><br></pre></td></tr></table></figure><h2 id="配置环境变量">配置环境变量</h2><p>配置SNPE SDK和Android NDK的环境变量：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>在文件最后添加如下内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SNPE SDK</span></span><br><span class="line"><span class="built_in">export</span> SNPE_ROOT=/root/snpe-1.59.0.3230/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Android NDK</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_NDK_ROOT=/root/android-ndk-r20b/</span><br><span class="line"><span class="built_in">export</span> ANDROID_NDK=/root/android-ndk-r20b/</span><br><span class="line"><span class="built_in">export</span> NDKROOT=/root/android-ndk-r20b/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NDKROOT</span>:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>执行<code>source ~/.bashrc</code>使其生效</p><h2 id="安装Caffe并配置环境">安装Caffe并配置环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install caffe-cpu</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$SNPE_ROOT</span>/bin/envsetup.sh -c /usr/bin/ <span class="comment"># 添加到.bashrc</span></span><br></pre></td></tr></table></figure><h2 id="安装ONNX并配置环境">安装ONNX并配置环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install onnx</span><br><span class="line">pip install onnx-simplifier</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$SNPE_ROOT</span>/bin/envsetup.sh -o /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/onnx <span class="comment"># 添加到.bashrc</span></span><br></pre></td></tr></table></figure><h1>编译示例程序</h1><p>编译运行在ARM Android上的示例程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SNPE_ROOT</span>/examples/NativeCpp/SampleCode</span><br><span class="line">ndk-build NDK_TOOLCHAIN_VERSION=clang APP_STL=c++_shared</span><br></pre></td></tr></table></figure><p>这会编译armeabi-v7a和arm64-v8a两个版本的可执行文件，分别为：</p><ul><li>$SNPE_ROOT/examples/NativeCpp/SampleCode/obj/local/armeabi-v7a/<strong>snpe-sample</strong></li><li>$SNPE_ROOT/examples/NativeCpp/SampleCode/obj/local/arm64-v8a/<strong>snpe-sample</strong></li></ul><h1>执行示例程序</h1><p>拷贝可执行程序及依赖库到板子上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SNPE_TARGET_ARCH=aarch64-android-clang6.0</span><br><span class="line"><span class="built_in">export</span> SNPE_TARGET_ARCH_OBJ_DIR=arm64-v8a</span><br><span class="line">adb push <span class="variable">$SNPE_ROOT</span>/lib/<span class="variable">$SNPE_TARGET_ARCH</span>/ /data/<span class="built_in">local</span>/tmp/snpeexample/<span class="variable">$SNPE_TARGET_ARCH</span>/lib</span><br><span class="line">adb push <span class="variable">$SNPE_ROOT</span>/lib/dsp/ /data/<span class="built_in">local</span>/tmp/snpeexample/dsp/lib</span><br><span class="line">adb push <span class="variable">$SNPE_ROOT</span>/examples/NativeCpp/SampleCode/obj/<span class="built_in">local</span>/<span class="variable">$SNPE_TARGET_ARCH_OBJ_DIR</span>/snpe-sample /data/<span class="built_in">local</span>/tmp/snpeexample/<span class="variable">$SNPE_TARGET_ARCH</span>/bin/snpe-sample</span><br></pre></td></tr></table></figure><p>准备alexnet模型和数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SNPE_ROOT</span>/models/alexnet/scripts</span><br><span class="line">python setup_alexnet.py -a ../tmpdir -d</span><br></pre></td></tr></table></figure><p>发现下载不动，只好手动下载：</p><ul><li><a href="https://raw.githubusercontent.com/BVLC/caffe/master/models/bvlc_alexnet/deploy.prototxt">deploy.prototxt</a></li><li><a href="http://dl.caffe.berkeleyvision.org/bvlc_alexnet.caffemodel">bvlc_alexnet.caffemodel</a></li><li><a href="http://dl.caffe.berkeleyvision.org/caffe_ilsvrc12.tar.gz">caffe_ilsvrc12.tar.gz</a></li></ul><p>下载完拷贝到<code>$SNPE_ROOT/models/alexnet/tmpdir</code>文件夹下，然后执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python setup_alexnet.py -a ../tmpdir</span><br></pre></td></tr></table></figure><p>拷贝模型及数据到板子上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SNPE_ROOT</span>/models/alexnet</span><br><span class="line">mkdir data/rawfiles &amp;&amp; cp data/cropped/*.raw data/rawfiles/</span><br><span class="line">adb push data/rawfiles /data/<span class="built_in">local</span>/tmp/alexnet/cropped</span><br><span class="line">adb push data/target_raw_list.txt /data/<span class="built_in">local</span>/tmp/alexnet</span><br><span class="line">adb push dlc/bvlc_alexnet.dlc /data/<span class="built_in">local</span>/tmp/alexnet</span><br><span class="line">rm -rf data/rawfiles</span><br></pre></td></tr></table></figure><p>配置板子上的环境变量：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line"><span class="built_in">export</span> SNPE_TARGET_ARCH=aarch64-android-clang6.0</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/data/<span class="built_in">local</span>/tmp/snpeexample/<span class="variable">$SNPE_TARGET_ARCH</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/data/<span class="built_in">local</span>/tmp/snpeexample/<span class="variable">$SNPE_TARGET_ARCH</span>/bin</span><br></pre></td></tr></table></figure><p>执行程序：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/tmp/alexnet</span><br><span class="line">snpe-sample -b ITENSOR -d bvlc_alexnet.dlc -i target_raw_list.txt -o output_sample</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>结果pull到本地（docker）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SNPE_ROOT</span>/models/alexnet/</span><br><span class="line">adb pull /data/<span class="built_in">local</span>/tmp/alexnet/output_sample ./output_sample</span><br></pre></td></tr></table></figure><p>调用python脚本分析结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python scripts/show_alexnet_classifications.py -i data/target_raw_list.txt \</span><br><span class="line">   -o output_sample/ \</span><br><span class="line">   -l data/ilsvrc_2012_labels.txt</span><br></pre></td></tr></table></figure><p>会有以下结果输出：</p><blockquote><p>Classification results<br>cropped/trash_bin.raw   0.950433 412 ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin<br>cropped/chairs.raw      0.363969 831 studio couch, day bed<br>cropped/notice_sign.raw 0.666179 458 brass, memorial tablet, plaque<br>cropped/plastic_cup.raw 0.720699 647 measuring cup</p></blockquote><h1>查看模型信息</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snpe-dlc-info -i xxx.dlc </span><br></pre></td></tr></table></figure><h1>SNPE SDK跑ONNX模型</h1><ol><li>执行如下代码，判断环境是否配置正确：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snpe-onnx-to-dlc -h</span><br></pre></td></tr></table></figure><ol start="2"><li>下载VGG模型：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SNPE_ROOT</span>/models/VGG/onnx</span><br><span class="line">wget https://s3.amazonaws.com/onnx-model-zoo/vgg/vgg16/vgg16.onnx</span><br></pre></td></tr></table></figure><ol start="3"><li>下载测试图片和标签文件：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SNPE_ROOT</span>/models/VGG/data</span><br><span class="line">wget https://s3.amazonaws.com/model-server/inputs/kitten.jpg</span><br><span class="line">wget https://s3.amazonaws.com/onnx-model-zoo/synset.txt</span><br></pre></td></tr></table></figure><ol start="4"><li>对图片进行预处理（1. resize到<code>256x256</code>；2. 中心裁切到<code>224x224</code>；3. 归一化；4. 保持为raw文件）：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SNPE_ROOT</span>/models/VGG/</span><br><span class="line">mkdir data/cropped</span><br><span class="line">python scripts/create_VGG_raws.py -i data/ -d data/cropped/</span><br><span class="line">python scripts/create_file_list.py -i data/cropped/ -o data/cropped/raw_list.txt -e <span class="string">&#x27;*.raw&#x27;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>模型转换：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SNPE_ROOT</span>/models/VGG</span><br><span class="line">snpe-onnx-to-dlc -i onnx/vgg16.onnx -o dlc/vgg16.dlc</span><br></pre></td></tr></table></figure><p>有如下打印：</p><blockquote><p>WARNING - WARNING_GEMM: GEMM operation is not supported in the general case, attempting to interpret as FC<br>WARNING - WARNING_GEMM: GEMM operation is not supported in the general case, attempting to interpret as FC<br>WARNING - WARNING_GEMM: GEMM operation is not supported in the general case, attempting to interpret as FC<br>INFO - INFO_DLC_SAVE_LOCATION: Saving model at vgg16.dlc<br>INFO - INFO_CONVERSION_SUCCESS: Conversion completed successfully</p></blockquote><p>与alexnet的例子类似，上述步骤2~5也可以用封装好的脚本<code>$SNPE_ROOT/models/VGG/scripts/setup_VGG.py</code>完成。</p><ol start="6"><li>查看模型信息：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snpe-dlc-info -i vgg16.dlc</span><br></pre></td></tr></table></figure><ol start="7"><li>模型推理：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SNPE_ROOT</span>/models/VGG</span><br><span class="line">snpe-net-run --input_list data/cropped/raw_list.txt --container dlc/vgg16.dlc --output_dir output</span><br></pre></td></tr></table></figure><ol start="8"><li>查看推理结果：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SNPE_ROOT</span>/models/VGG/</span><br><span class="line">python scripts/show_vgg_classifications.py -i data/cropped/raw_list.txt -o output/ -l data/synset.txt</span><br></pre></td></tr></table></figure><p>有如下打印：</p><blockquote><p>Classification results<br>probability=0.351833 ; class=n02123045 tabby, tabby cat<br>probability=0.315166 ; class=n02123159 tiger cat<br>probability=0.313086 ; class=n02124075 Egyptian cat<br>probability=0.012995 ; class=n02127052 lynx, catamount<br>probability=0.003528 ; class=n02129604 tiger, Panthera tigris</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SNPE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qualcomm </tag>
            
            <tag> QCS610 </tag>
            
            <tag> SNPE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构 [6]：存储器层次结构</title>
      <link href="/2022/02/09/ComputerArch-6-Memory/"/>
      <url>/2022/02/09/ComputerArch-6-Memory/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>存储器的层次结构如下图所示：</p><p><img src="/2022/02/09/ComputerArch-6-Memory/1.webp" alt="1"></p><p>各类存储器的成本和延时对比如下图，一个历年硬件设备延时变化的<a href="https://colin-scott.github.io/personal_website/research/interactive_latency.html">链接</a>：</p><p><img src="/2022/02/09/ComputerArch-6-Memory/4.webp" alt="4"></p><p>一个简单的类比如下图所示：</p><p><img src="/2022/02/09/ComputerArch-6-Memory/3.webp" alt="3"></p><p>存储器层次结构的设计并不仅受成本层面的限制，更受物理层面的限制。L1 Cache不仅昂贵，其访问速度和它到 CPU 的物理距离有关。仅靠堆料并不能打破电信号不能超过光速的物理限制。</p><h1>SRAM/Cache</h1><p>**SRAM（**Static Random-Access Memory，静态随机存取存储器），所谓静态，是只要处在通电状态，里面的数据就可以保持存在。而一旦断电，里面的数据就会丢失了。特点：存储密度不高（一个比特需要6-8个晶体管），但电路简单，访问速度非常快，一个6个晶体管组成一个比特的SRAM的示意图如下：</p><img src="/2022/02/09/ComputerArch-6-Memory/2.webp" alt="2" style="zoom:50%;"><p>Cache通常分为L1、L2、L3三级：</p><ul><li>L1 Cache：嵌在每个CPU核心内部，访问速度最快。通常分成指令缓存和数据缓存（借鉴哈佛结构解决结构冒险问题）；</li><li>L2 Cache：同样每个CPU核心独有，但不在核心内部，访问速度略慢。</li><li>L3 Cache：多个CPU核心共用，尺寸更大，但访问速度更慢。</li></ul><h2 id="为什么需要Cache？">为什么需要Cache？</h2><p>随着硬件的发展，CPU性能和内存访问性能之间的差距越来越大，为了不让CPU因为等待来自内存的指令和数据而“原地空转”，引入了以SRAM作为介质的高速缓存Cache。</p><p>内存中的指令、数据，会被加载到 L1-L3 Cache 中，而不是直接由 CPU 访问内存去拿。在 95% 的情况下，CPU 都只需要访问 L1-L3 Cache，从里面读取指令和数据，而无需访问内存。</p><p>CPU 从内存中读取数据到 CPU Cache 的过程中，是一小块一小块来读取数据的，而不是按照单个数组元素来读取数据的。这样一小块一小块的数据单位叫作 <strong>Cache Line</strong>（缓存块）。</p><p>现代 CPU 中大量的空间已经被 SRAM 占据，下图中用红色框出的部分就是Intel CPU 中的 L3 Cache：</p><img src="/2022/02/09/ComputerArch-6-Memory/5.webp" alt="5" style="zoom:50%;"><h2 id="Cache访问逻辑">Cache访问逻辑</h2><p>现代 CPU 进行数据读取的时候，无论数据是否已经存储在 Cache 中，CPU 始终会首先访问 Cache。只有当 CPU 在 Cache 中找不到数据的时候，才会去访问内存，并将待读取的数据以及其后一个Cache Line大小的数据写入 Cache 之中。当局部性原理起作用时，最近刚刚被访问的数据及其附近的数据，会很快再次被访问。而 Cache 的访问速度远远快于内存，这样，CPU 花在等待内存访问上的时间就会大大变短。</p><h3 id="直接映射Cache">直接映射Cache</h3><p>内存地址到Cache Line的映射关系如下图所示：</p><p><img src="/2022/02/09/ComputerArch-6-Memory/6.webp" alt="6"></p><p>内存访问地址可以认为是组标记（Tag）、索引（Index）和偏移量（Offset）的组合。其中：</p><ul><li>偏移量：为待读取的数据字在Cache Line的Data Block中的偏移地址，以Cache Line大小为64字节为例，偏移量在内存地址的最后6位。</li><li>索引：在直接映射Cache策略下，待读取数据所在的内存块始终映射到一个固定的Cache Line，而映射关系通常是通过mod（求余）运算实现。而mod运算就等于取地址的低N位。举个简单的例子，假设Cache Line个数为8，待读取数据为总计32个内存块中的第21个内存块，则对应到Cache Line的索引就是5。在实际计算中，mod操作其实就是取地址的中间N=3位得到索引值。</li><li>组标记：显而易见，mod操作会导致多个内存块对应同一个Cache Line，为了区分是哪一个内存块的数据被缓存到Cache Line中，需要将内存地址中剩余的高位组成组标记存储在Cache Line中。</li><li>有效位（Valid Bit）：此外，Cache Line中还需要一个有效位来标记Cache line中的数据是从内存块中加载的有效数据，还是机器上电时的空（无效）数据。</li></ul><p>有了上述的概念，那么一个完整的访存操作会有如下步骤：</p><ul><li><ol><li>根据内存地址的中间N位计算在Cache中的索引；</li></ol></li><li><ol start="2"><li>判断该索引对应的Cache Line的有效位，确认Cache中数据是否有效；</li></ol></li><li><ol start="3"><li>对比内存地址高位和Cache Line中的组标记，确认该Cache Line中数据是否为我们要访问的内存数据；</li></ol></li><li><ol start="4"><li>根据内存地址中的Offset位，从Cache Line的Data Block中读取希望访问的数据；</li></ol></li><li><ol start="5"><li>若2、3步骤判断为否，则CPU会访问内存，将对应的内存块加载到Cache Line中，同时更新有效位和组标记。</li></ol></li></ul><blockquote><p>除直接映射Cache外，常见的缓存放置策略还有全相连 Cache（Fully Associative Cache）、组相连 Cache（Set Associative Cache）。</p></blockquote><h2 id="Cache写入同步问题">Cache写入同步问题</h2><p>我们现在用的 Intel CPU，通常都是多核的。每一个 CPU 核里面，都有独属于自己的 L1、L2 的 Cache，然后再有多个 CPU 核共用的 L3 Cache和主内存。如下图所示：</p><img src="/2022/02/09/ComputerArch-6-Memory/7.webp" alt="7" style="zoom: 33%;"><p>因为 CPU Cache 的访问速度要比主内存快很多，而在 CPU Cache 里面，L1/L2 的 Cache 也要比 L3 的 Cache 快。所以，上一讲我们可以看到，CPU 始终都是尽可能地从 CPU Cache 中去获取数据，而不是每一次都要从主内存里面去读取数据。</p><p>同样的，写入数据时写入Cache的速度也比写入主内存快，那我们写入数据到底时写入到Cache中，还是写入到主内存？如果直接写到主内存中，Cache中的数据是否就失效了？如果存在多个线程（多个CPU核），一个线程写了自己的L1/L2 Cache或主内存，其他线程的缓存是否需要同步（缓存一致性问题）？</p><p>首先回答第一个问题，这里介绍两种写入策略：</p><h3 id="写直达（Write-Through）">写直达（Write-Through）</h3><img src="/2022/02/09/ComputerArch-6-Memory/8.webp" alt="8" style="zoom:33%;"><p>这个策略每次数据都会写入到主内存：如果缓存命中，就先把数据写入更新到Cache里，再写入到主内存；如果未命中，则直接写入主内存。</p><p>写直达策略逻辑很简单明了，但同样缺点也很明显，那就是很慢。</p><h3 id="写回（Write-Back）">写回（Write-Back）</h3><img src="/2022/02/09/ComputerArch-6-Memory/9.webp" alt="9" style="zoom: 25%;"><p>写回策略不用每次都把数据写入到主内存中，而只写到Cache中。只有当Cache里面的数据要被替换（映射关系变化）时，才需要将数据写入到主内存中。具体的流程如下：</p><p>如果发现我们要写入的数据命中了Cache，则只更新Cache中的数据，并标记该Cache Block（Cache Line）为<strong>脏的</strong>（Dirty），所谓Dirty，就是指该Block中的数据与主内存中是不一致的，需要同步。</p><p>如果待写入数据未命中Cache，则查看其索引对应的Cache Line是否被标记为Dirty。若是，则需要将该Cache Line中Data Block里的数据写回到对应的主内存中，再从待写入内存地址对应的主内存块中读取数据到Cache Line中（这一步不是多余的，因为后续写入Cache Line 的数据只是Data Block中的一部分），再把当前要写入的数据写入到Cache Line中，并标记该Cache Line为Dirty；若否，则跳过将Cache Block中数据写回对应主内存的操作，直接执行后续步骤。</p><p>当采用<strong>写回</strong>策略时，读取内存数据的操作同样也要判断Dirty标记：若要加载主内存中的数据到Cache中，且该Cache Line被标记为Dirty，则要先将数据写回到对应的主内存块中，则执行加载操作覆盖该Cache Line。</p><p>可以看到，写回策略的目的就是让写入内存操作尽可能只与Cache交互，实在不行了再去读写主内存，从而提升性能。</p><h3 id="总线嗅探机制与MESI协议">总线嗅探机制与MESI协议</h3><p>但是，无论是写回还是写直达，都还没有解决多线程（多CPU核）情况下的<strong>缓存一致性</strong>（Cache Coherence）问题，为此我们需要解决以下两个问题：</p><ul><li><strong>写传播</strong>（Write Propagation）：即一个CPU核中的Cache更新，要能够传播到其他核心的对应Cache Line中；</li><li><strong>事务串行化</strong>（Transaction Serialization）：在一个或多个CPU核心里的读取和写入操作，在其他核心看来，是（按时间先后）顺序一致的。要做到事务串行化，需要实现两点：第一，一个CPU核心对数据的操作，要同步通信给其他CPU核心；第二，如果两个CPU核心有同一个数据的Cache，则需要对该Cache数据的更新加锁。</li></ul><p>可以通过<strong>总线嗅探</strong>（Bus Snooping）机制用来解决写传播问题。即把所有的读写请求都通过总线（Bus）广播给所有的 CPU 核心，然后让各个核心去“嗅探”这些请求，再根据本地的情况进行响应。</p><p>基于总线嗅探机制，还可以分成很多种不同的缓存一致性协议：</p><ul><li><strong>写失效</strong>（Write Invalidate）协议：只有一个 CPU 核心负责写入数据，其他的核心，只是同步读取到这个写入。在这个 CPU 核心写入 Cache 之后，它会去广播一个“失效”请求告诉所有其他的 CPU 核心。其他的 CPU 核心，只是去判断自己是否也有一个“失效”版本的 Cache Block，然后把这个也标记成失效的就好了。</li><li><strong>写广播</strong>（Write Broadcast）协议：一个写入请求会广播到所有的 CPU 核心，同时更新各个核心里的 Cache。</li></ul><p>写广播在实现上很简单，但需要占用更多的总线带宽。写失效只需要广播失效的内存地址，而写广播还需要把对应的数据广播给其他 CPU 核心。</p><img src="/2022/02/09/ComputerArch-6-Memory/1.jpeg" alt="1" style="zoom: 33%;"><p>而其中最常用的是MESI协议，它是一种写失效协议。MESI代表该协议下Cache Line的四种状态标记：</p><ul><li><p>M：已修改（Modified），Dirty状态，表示Cache Line的数据已经更新，但没有写回主内存；</p></li><li><p>E：独占（Exclusive），Clean状态，Cache Line中数据与主内存一致，且没有其他核加载对应的数据到自己的Cache中。对独占状态Cache Line 写入数据，不需要广播给其他CPU核；</p></li><li><p>S：共享（Shared），Clean状态，Cache Line中数据与主内存一致，有其他核加载了同一块数据到自己的Cache中。更新共享状态的Cache Line数据，不能直接修改，要先广播要求其他CPU核将对应的Cache Line置为已失效状态，然后才能更新当前核Cache中的数据。这个广播操作，一般叫做RFO（Request For Ownership），类似于一种加锁操作，同一时间内只有一个CPU核能执行写入操作。</p></li><li><p>I：已失效（Invalidated），Dirty状态，Cache Line中数据不是最新的，其他核中对应的Cache Line的数据已修改，但没有同步到当前核；</p></li></ul><p>整个MESI的状态流转，可以用一个<strong>有限状态机</strong>来表征。这里触发状态切换的事件，可能是来自当前核（本地），也可能是来自其他核通过总线广播的信号。</p><p><img src="/2022/02/09/ComputerArch-6-Memory/2.jpeg" alt="2"></p><p>举一个简单的例子：</p><ul><li><p>假设初始状态为：CPU 核A中某Cache Line状态为M，核B中相应的Cache Line状态为I；</p></li><li><p>此时核B需要需要读取该Cache Line中数据（本地读），由于此时的状态I不满足读请求条件，便会通过总线广播请求（发出总线读信号）；</p></li><li><p>此时核A嗅探到总线上的读请求（总线读），便会将其对应Cache Line中数据写回主内存（发出写回信号），并且Cache Line 状态切换到S（M-&gt;S）；</p></li><li><p>此时内存中数据更新到最新，核B的本地读操作得以继续完成，将数据从内存加载到Cache Line中，并交由CPU核处理。并且将Cache Line 状态切换为S（I-&gt;S）;</p></li><li><p>结束状态为：CPU 核A中某Cache Line状态为S，核B中相应的Cache Line状态为S；</p></li></ul><p>上述示例中的触发事件及状态切换的流程与图中一一对应，也尝试代入其他场景进行理解。</p><p>至此，我们通过MESI协议解决了多CPU核情况下的<strong>缓存一致性</strong>问题。</p><h1>DRAM/内存</h1><p><strong>DRAM</strong>（Dynamic Random Access Memory，动态随机存取存储器），所谓动态，是因为DRAM数据是存储在电容里的，电容会不断漏电，所以需要定时刷新充电，才能保持数据不丢失。特点：存储密度更大（一个比特只需要一个晶体管和一个电容存储），但DRAM的数据访问电路和刷新电路都要比SRAM更复杂，所以访问延时更长。</p><p>在<a href="https://no5-aaron-wu.github.io/2022/01/10/ComputerArch-3-ELF/">这篇文章</a>中，我们简单讨论了一下程序装载时依赖的<strong>内存分页</strong>（Paging）机制，现在我们就来看一下虚拟内存地址和物理内存地址是如何转换的。</p><h2 id="简单页表">简单页表</h2><p>存放虚拟内存页到物理内存页的映射关系的映射表，叫做<strong>页表</strong>（Page Table）。页表会把一个内存地址分成<strong>页号</strong>（Directory）和<strong>偏移量</strong>（Offset）两个部分。以一个8位的地址为例，假设一个页的大小是8（2^3）字节，则高5位为页号，低3位为偏移量。则从虚拟内存地址到物理内存地址的转换就是如下三个步骤：</p><ul><li><p>把虚拟内存地址，切分成页号和偏移量的组合；</p></li><li><p>从页表里面，查询出虚拟页号对应的物理页号；</p></li><li><p>直接拿物理页号拼接上前面的偏移量，就得到了物理内存地址。</p></li></ul><img src="/2022/02/09/ComputerArch-6-Memory/10.webp" alt="10" style="zoom: 25%;"><p>但简单页表的问题也很明显，就是页表本身的内存占用比较大，以32位地址，单页4K（2^12）字节为例，则高20位为页号，简单页表则需要记录2^20个映射关系，每个映射关系用4字节保存，则简单页表的总大小为2^22字节，即4M字节，看起来并不大？但是每个程序的进程都需要维护一份自己独立的4M页表，即便这个程序本身只有几K大小。进程多了，占用的内存量也是很可观的。况且现在都是64位操作系统了，还是用这种简单粗暴的方式，显然不合适。</p><h2 id="多级页表">多级页表</h2><p>很容易想到的是，我们并不需要存下所有内存地址的映射关系，每个进程所占用的内存是有限的，需要的页自然也是有限的。我们只需要去存那些用到的页之间的映射关系就好了。在实践中，我们通常采用的是一种叫作<strong>多级页表</strong>（Multi-Level Page Table）的方法存放映射关系。</p><p>进程的内存地址空间，通常是“两头实、中间空”。栈空间（编译时就确定了大小）自顶而下（低地址到高地址）。堆空间自底而上（高地址到低地址）动态分配。因此，虚拟内存占用的地址空间，通常是两段连续的空间。而不是完全散落的随机的内存地址。而多级页表，就特别适合这样的内存地址分布。</p><p>以一个4级的多级页表为例，虚拟内存地址被拆分成4级页表索引+偏移量的形式，如下图：</p><p><img src="/2022/02/09/ComputerArch-6-Memory/11.webp" alt="11"></p><p>相应的，每个进程<strong>有且只有一张</strong>4级页表，我们先通过 4 级页表索引，找到 4 级页表里面对应的条目（Entry）。这个条目里存放的是一张 3 级页表所在的位置。4 级页面里面的每一个条目，都对应着一张 3 级页表，所以我们<strong>可能有多张</strong> 3 级页表。</p><p>找到对应这张 3 级页表之后，我们用 3 级索引去找到对应的 3 级索引的条目。3 级索引的条目再会指向一个 2 级页表。同样的，2 级页表里我们可以用 2 级索引指向一个 1 级页表。</p><p>而最后一层的 1 级页表里面的条目，对应的数据内容就是物理页号了。在拿到了物理页号之后，我们同样可以用“页号 + 偏移量”的方式，来获取最终的物理内存地址。至此，完成了从虚拟内存地址到物理内存地址的映射。</p><p>我们<strong>可能有多张</strong> 1 级页表、2 级页表，乃至 3 级页表。但是，因为实际的虚拟内存空间通常是连续的（即整个进程所占用的内存空间的4级索引，3级索引乃至2级索引可能都是一样的），我们很可能只需要很少的 2 级页表，甚至只需要 1 张 3 级页表就够了。</p><p>事实上，多级页表就像一个多叉树的数据结构，所以我们常常称它为<strong>页表树</strong>（Page Table Tree）。因为虚拟内存地址分布的连续性，树的第一层节点的指针（4级索引/条目），很多就是空的，也就不需要有对应的子树了。所谓不需要子树，其实就是不需要对应的 2 级、3 级的页表。如下图所示：</p><img src="/2022/02/09/ComputerArch-6-Memory/12.webp" alt="12" style="zoom:25%;"><p>现在我们来简单测算一下多级页表的内存占用情况：假设偏移量仍然是12位，即单页内存大小为4KB，4级索引平均分配，每级索引占用5位，则每张页表中的条目个数为32（2^5）个，每个条目对应下一级页表的地址或者物理内存地址的页号，用4字节保存，这样每张页表的大小为128字节。对一张1级页表而言，这128字节对应的物理内存空间为32*4KB=128KB，而对于一张2级页表而言，这128字节对应32张1级页表，对应的物理内存空间为32*128KB=4MB。</p><p>假设一个进程如果占用了 8MB 的内存空间，分成了 2 个 4MB 的连续空间。那么，它一共需要 2 个独立的、填满的 2 级页表，也就意味着有 64 个 1 级页表，2 个独立的 3 级页表（至于为啥不把两个对应2级页表的条目放到一个3级页表中，可能是因为堆和栈是两端分布，内存不连续吧），1 个 4 级页表。一共需要 69 个索引表，每个 128 字节，不到 9KB 的空间。比起简单页表的 4MB 来说，只有差不多 1/500。</p><p>但是，多级页表虽然节约了页表的存储空间，却多次查表操作带来了时间开销上的增加，是一种<strong>时间换空间</strong>的策略。原本我们进行一次地址转换，只需要访问一次内存就能找到物理页号，算出物理内存地址。但是用了 4 级页表，我们就需要访问 4 次内存，才能找到物理页号。内存访问比Cache要慢的多，而内存映射是一个非常高频的动作，此时性能问题又凸显出来了。怎么解决呢？但凡涉及到<strong>局部性原理</strong>的问题，都可以通过<strong>加个缓存</strong>的方法来解决。</p><h2 id="局部性原理">局部性原理</h2><p><strong>局部性原理</strong>（Principle of Locality）包括<strong>时间局部性</strong>（temporal locality）和<strong>空间局部性</strong>（spatial locality），利用原理，可以指定管理和访问数据的策略。</p><p>时间局部性：如果一个数据被访问了，那么它在短时间内还会被再次访问。</p><p>空间局部性：如果一个数据被访问了，那么和它相邻的数据也很快会被访问。</p><h2 id="地址变换高速缓存（TLB）">地址变换高速缓存（TLB）</h2><p>程序所需要使用的指令，都顺序存放在虚拟内存里面。我们执行的指令，也是一条条顺序执行下去的。这就存在空间局部性和时间局部性。即我们连续执行了5条指令，这5条指令的内存地址是连续的，因此通常是在一个<strong>虚拟内存页</strong>内，即页号是相同的，那做了内存地址转换后，自然也在同一个物理内存页，是同一个物理页号。那其实不用每条指令都做一次地址转换，而是通过<strong>加个缓存</strong>的方法，把之前的内存转换地址缓存下来，使得我们不需要反复去访问内存来进行内存地址转换。</p><p>CPU 里有一块缓存芯片，称为<strong>地址变换高速缓冲</strong>（Translation-Lookaside Buffer，TLB）。这块缓存存放了之前已经进行过地址转换的查询结果。这样，当同样的虚拟地址需要进行地址转换的时候，我们可以直接在 TLB 里面查询结果，而不需要多次访问内存来完成一次转换。</p><p>TLB 和 CPU 的高速缓存类似，可以分成指令的 TLB（ITLB）和数据的 TLB（DTLB）。同样的，也可以根据大小对它进行分级，变成 L1、L2 这样多层的 TLB。</p><p>还有一点和 CPU 里的高速缓存也是一样的，需要用脏标记这样的标记位，来实现“写回”这样缓存管理策略。</p><p>出于性能考虑，整个内存转换过程是由硬件来执行的。在 CPU 芯片里面，我们封装了<strong>内存管理单元</strong>（MMU，Memory Management Unit）芯片，用来完成地址转换以及对 TLB 的访问和交互。</p><h2 id="内存保护（Memory-Protection）">内存保护（Memory Protection）</h2><h3 id="可执行空间保护（Executable-Space-Protection）">可执行空间保护（Executable Space Protection）</h3><p>对于一个进程使用的内存，只把其中的指令部分设置成“可执行”的，对于其他部分，比如数据部分，不给予“可执行”的权限。</p><p>因为无论是指令，还是数据，在我们的 CPU 看来，都是二进制的数据。我们直接把数据部分拿给 CPU，如果这些数据解码后，也能变成一条合理的指令，其实就是可执行的。黑客进行攻击的一种方式就是，在程序的数据区里，放入一些要执行的指令编码后的数据，然后找到一个办法，让 CPU 去把它们当成指令去加载，那 CPU 就能执行黑客想要执行的指令了。这时如果对进程里内存空间的执行权限进行控制，可以使得 CPU 只能执行指令区域的代码。对于数据区域的内容，即使找到了其他漏洞想要加载成指令来执行，也会因为没有权限而被阻挡掉。</p><h3 id="地址空间布局随机化（Address-Space-Layout-Randomization）">地址空间布局随机化（Address Space Layout Randomization）</h3><p>还有一种攻击方式就是，其他的人、进程、程序，会去修改掉特定进程的指令、数据，然后，让当前进程去执行这些指令和数据，造成破坏。要想修改这些指令和数据，则需要知道这些指令和数据所在的位置才行。</p><p>原先我们一个进程的内存布局空间是固定的，所以任何第三方很容易就能知道指令在哪里，程序栈在哪里，数据在哪里，堆又在哪里。这个其实为想要搞破坏的人创造了很大的便利。而地址空间布局随机化这个机制，就是让这些区域的位置不再固定，在内存空间随机去分配这些进程里不同部分所在的内存空间地址，让破坏者猜不出来。猜不出来呢，自然就没法找到想要修改的内容的位置。如果只是随便做点修改，程序只会 crash 掉，而不会去执行计划之外的代码。</p><h1>总线</h1><p>在现代的 Intel CPU 的体系结构下，通常有好几条总线。</p><p>首先，CPU 和内存以及高速缓存通信的总线通常有两种。这种方式，我们称之为<strong>双独立总线</strong>（Dual Independent Bus，缩写为 <strong>DIB</strong>）。一个是高速的<strong>本地总线</strong>（Local Bus），或者称为<strong>后端总线</strong>（Back-side Bus），用来与高速缓存通信；以及一个速度相对较慢的<strong>前端总线</strong>（Front-side Bus），或者称为<strong>处理器总线</strong>（Processor Bus）、<strong>内存总线</strong>（Memory Bus），用来和主内存以及输入输出设备通信。</p><p>而CPU 里面的北桥芯片，把我们上面说的前端总线，一分为二，变成了三个总线，如下图所示：</p><p><img src="/2022/02/09/ComputerArch-6-Memory/13.webp" alt="13"></p><p>前端总线，其实就是<strong>系统总线</strong>。CPU 里面的内存接口，直接和系统总线通信，然后系统总线再接入一个 <strong>I/O 桥接器</strong>（I/O Bridge）。这个 I/O 桥接器，一边接入了<strong>内存总线</strong>，用于CPU 和内存通信；另一边接入了一个 <strong>I/O 总线</strong>，用来连接 I/O 设备。</p><p>真实的计算机里，I/O总线拆分得更细。根据不同的设备，还会分成独立的 PCI 总线、ISA 总线等。</p><img src="/2022/02/09/ComputerArch-6-Memory/14.webp" alt="14" style="zoom:33%;"><p>在物理层面，其实我们完全可以把总线看作一组“电线”。这些电线之间也是有分工的，通常有三类：</p><ul><li><p>数据线（Data Bus），用来传输实际的数据信息；</p></li><li><p>地址线（Address Bus），用来确定到底把数据传输到哪里去，是内存的某个位置，还是某一个 I/O 设备；</p></li><li><p>控制线（Control Bus），用来控制对于总线的访问。</p></li></ul><p>尽管总线减少了设备之间的耦合，也降低了系统设计的复杂度，但同时也带来了一个新问题，那就是总线不能<strong>同时</strong>给多个设备提供通信功能。这时就需要引入<strong>总线裁决</strong>（Bus Arbitraction）机制。</p><h2 id="CPU-如何-与-I-O设备通信呢？">CPU 如何 与 I/O设备通信呢？</h2><p>对应没有专门的用于和I/O设备通信的指令的精简指令集而言，访问I/O设备就和访问我们的主内存一样，使用“内存地址”。为了让已经足够复杂的 CPU 尽可能简单，计算机会把 I/O 设备的各个寄存器，以及 I/O 设备内部的内存地址，都映射到主内存地址空间里来。主内存的地址空间里，会给不同的 I/O 设备预留一段一段的内存地址。CPU 想要和这些 I/O 设备通信的时候呢，就往这些地址发送数据。地址信息通过地址总线来发送，而对应的数据信息通过数据总线来发送。</p><p>而I/O 设备就会监控地址线，并且在 CPU 往自己地址发送数据的时候，把对应的数据线里面传输过来的数据，接收到设备里面的寄存器和内存里面来。这种方式叫作<strong>内存映射IO</strong>（Memory-Mapped I/O，简称 MMIO）。</p><img src="/2022/02/09/ComputerArch-6-Memory/15.webp" alt="15" style="zoom:33%;"><p>Intel CPU 虽然也支持 MMIO，但有 2000 多个指令的 Intel X86 架构，自然可以设计专门的和 I/O 设备通信的指令（in 和 out 指令）来支持<strong>端口映射 I/O</strong>（Port-Mapped I/O，简称 PMIO）或者叫<strong>独立输入输出</strong>（Isolated I/O）。</p><p>其实 PMIO 的通信方式和 MMIO 差不多，核心的区别在于，PMIO 里面访问的设备地址，不再是在内存地址空间里面，而是一个专门的<strong>端口</strong>（Port）。这个端口并不是指一个硬件上的插口，而是和 CPU 通信的一个抽象概念。</p><p>无论是 PMIO 还是 MMIO，CPU 都会传送一条二进制的数据，给到 I/O 设备的对应地址。设备自己本身的接口电路，再去解码这个数据。解码之后的数据呢，就会变成设备支持的一条指令，再去通过控制电路去操作实际的硬件设备。对于 CPU 来说，它并不需要关心设备本身能够支持哪些操作。它要做的，只是在总线上传输一条条数据就好了。</p><p>下图是我电脑的显卡在设备管理器中的资源信息：</p><p><img src="/2022/02/09/ComputerArch-6-Memory/16.png" alt="16"></p><p>可以看到，里面既有 Memory Range，这个就是设备对应映射到的内存地址，也就是我们上面所说的 MMIO 的访问方式。同样的，里面还有 I/O Range，这个就是我们上面所说的 PMIO，也就是通过端口来访问 I/O 设备的地址。最后，里面还有一个 IRQ，也就是会来自于这个设备的中断信号。</p><h1>硬盘</h1><p><strong>HDD</strong>（Hard Disk Drive，机械硬盘）</p><p><strong>SSD</strong>（Solid-state drive 或 Solid-state disk，固态硬盘）</p><p>主要的性能指标：</p><ul><li><p>响应时间（Response Time）：即程序发起一个硬盘的读取/写入请求，直到这个请求返回的时间。</p></li><li><p>数据传输率（Data Transfer Rate）：单位时间内传输数据的大小，除硬盘本身的影响外（SSD优于HDD），还受接口的带宽限制，例如SATA3.0带宽为6Gbps，而PCI Express 3.0 x16的带宽为8Gps * 16 = 128Gps；</p></li><li><p>IOPS（Input/output operations per second）：每秒输入输出操作次数。在随机读写情况下，SSD的IOPS大概在万次数量级，而HDD的IOPS只有百次数量级。</p></li></ul><p>在<strong>顺序读写</strong>和<strong>随机读写</strong>的情况下，硬盘的性能是完全不同的。随机读写的数据传输率是顺序读写情况下的几十分之一。且在随机读取下，接口带宽将不再是硬盘访问速度的瓶颈，SATA 3.0 和 PCIE接口的性能差异将会变小。</p><h1>参考</h1><p>[1] <a href="https://time.geekbang.org/column/intro/100026001?tab=catalog">深入浅出计算机组成原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [17]：快速浮点exp算法</title>
      <link href="/2022/01/29/AI-Algorithm-17-FastExp/"/>
      <url>/2022/01/29/AI-Algorithm-17-FastExp/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>本文将介绍一种利用IEEE754标准浮点数表示方法，在精度损失很小的情况下，优化指数运算exp的性能的算法。</p><h1>浮点数表示</h1><p>根据国际标准IEEE 754，任意（规格化形式）一个二进制浮点数Y可以表示成下面的形式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Y</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>M</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mi>X</mi></msup></mrow><annotation encoding="application/x-tex">Y=(-1)^S×(1+M)×2^X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1413em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><mi>E</mi><mo>−</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">X=E-bias</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span></span></span></span>。</p><p>对于32位的浮点数（单精度浮点数），最高的1位是符号位S，接着的8位是指数E，剩下的23位为有效数字M。</p><p><img src="/2022/01/29/AI-Algorithm-17-FastExp/1.png" alt="img"></p><p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p><p><img src="/2022/01/29/AI-Algorithm-17-FastExp/2.png" alt="img"></p><p>关于各部分的解释如下：</p><ul><li>S$$表示符号位，当$$S=0$$时$Y$为正数；当$$S=1$$时$Y$为负数。</li><li>X=E-bias$$表示指数位。$$E$$的规则具体如下：- 首先，$$E$$为一个无符号整数。这意味着，如果$$E$$为8位，它的取值范围为0~255；如果$$E$$为11位，它的取值范围为0~2047。但是，我们知道，科学计数法中的$$E$$是可以出现负数的。**所以IEEE 754规定，$E$的真实值$X$为计算值减去一个中间数$bias$，对于8位的E，$bias=127$；对于11位的E，$bias=1023$。**- 然后，指数E还可以再分成三种情况：  - $$E$$**不全为0或不全为1。**这时，浮点数就采用上面的规格化表示，即指数$$E$$的计算值减去127（或1023），得到真实值，再将有效数字$$M$$前加上整数位的1。  - $$E$$**全为0。**这时，浮点数的指数$$X=1-127$$（或者$$X=1-1023$$），有效数字不再是$$1+M$$的形式，而是变为为$$0+M$$的形式。这样做是为了表示$$±0$$，以及接近于0的很小的数字。  - $$E$$**全为1。**这时，如果有效数字$$M$$全为0，表示$$±∞$$（正负取决于符号位$$S$$）；如果有效数字$$M$$不全为0，表示这个数是一个非法数（NaN）。</li></ul><p>由上可知，浮点数的标准表示如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Y</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>M</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mi>X</mi></msup><mo separator="true">,</mo><mi>X</mi><mo>=</mo><mi>E</mi><mo>−</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">Y=(-1)^S×(1+M)×2^X,X=E-bias</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1413em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0858em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span></span></span></span></span></p><p>假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mi>M</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S=0,M=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mo>=</mo><msup><mn>2</mn><mi>X</mi></msup><mo>=</mo><msup><mn>2</mn><mrow><mi>E</mi><mo>−</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow></msup></mrow><annotation encoding="application/x-tex">Y=2^X=2^{E-bias}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">bia</span><span class="mord mathnormal mtight">s</span></span></span></span></span></span></span></span></span></span></span></span>。则如果想要计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>X</mi></msup></mrow><annotation encoding="application/x-tex">2^X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span></span></span></span></span></span></span>，只需要将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>+</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">X+bias</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span></span></span></span>放到浮点数内存中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>所在的位置即可。以单精度浮点数为例，只需要将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>+</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">X+bias</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span></span></span></span>左移23位。故有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>2</mn><mi>X</mi></msup><mo>=</mo><msup><mn>2</mn><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi></mrow></msup><mo>⋅</mo><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2^X=2^{offset}\cdot(X+bias)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal mtight">se</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></span></p><p>由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>X</mi></msup><mo>=</mo><msup><mi>e</mi><mrow><mi>l</mi><mi>n</mi><msup><mn>2</mn><mi>X</mi></msup></mrow></msup></mrow><annotation encoding="application/x-tex">2^X=e^{ln2^X}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0064em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0064em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9191em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>，令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>n</mi><msup><mn>2</mn><mi>X</mi></msup><mo>=</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">ln2^X=T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mi>l</mi><mi>n</mi><mn>2</mn><mo>=</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">Xln2=T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">Xl</span><span class="mord mathnormal">n</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><mi>T</mi><mi mathvariant="normal">/</mi><mi>l</mi><mi>n</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">X=T/ln2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span></span>，所以有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>T</mi></msup><mo>=</mo><msup><mn>2</mn><mi>X</mi></msup><mo>=</mo><msup><mn>2</mn><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac></msup><mo>=</mo><msup><mn>2</mn><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi></mrow></msup><mo>⋅</mo><mo stretchy="false">(</mo><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>+</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e^T=2^X={2^\frac{T}{ln2}}=2^{offset}\cdot(\frac{T}{ln2}+bias)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9735em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9735em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8721em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal mtight">se</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span>，即可以将e的指数次幂转换为2的指数次幂进行计算。</p><p>但是，这里会出现误差项：当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi mathvariant="normal">/</mi><mi>l</mi><mi>n</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">T/ln2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span></span>能整除时，将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi mathvariant="normal">/</mi><mi>l</mi><mi>n</mi><mn>2</mn><mo>+</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">T/ln2+bias</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span></span></span></span>写入指数部分E所在位置，不会有任何精度损失；但当不能整除时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi mathvariant="normal">/</mi><mi>l</mi><mi>n</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">T/ln2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span></span>的小数部分<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>−</mo><mi mathvariant="normal">∣</mi><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\frac{T}{ln2}-|\frac{T}{ln2}|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span></span></span></span>在左移offset位后会被写入有数数字部分M所在的位置。这是其表示的实际的浮点数应该为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>2</mn><mrow><mi mathvariant="normal">∣</mi><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mi mathvariant="normal">∣</mi></mrow></msup><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>−</mo><mi mathvariant="normal">∣</mi><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2^{|\frac{T}{ln2}|}(1+\frac{T}{ln2}-|\frac{T}{ln2}|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2735em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0235em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8721em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mtight">∣</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></span></p><p>可以证明（略）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi mathvariant="normal">∣</mi><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mi mathvariant="normal">∣</mi></mrow></msup><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>−</mo><mi mathvariant="normal">∣</mi><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo><mo>&gt;</mo><msup><mi>e</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">2^{|\frac{T}{ln2}|}(1+\frac{T}{ln2}-|\frac{T}{ln2}|)&gt;e^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2235em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9735em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8721em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mtight">∣</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，所以需要减去一个正常量C做修正，即：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>e</mi><mi>T</mi></msup><mo>≈</mo><msup><mn>2</mn><mrow><mi mathvariant="normal">∣</mi><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mi mathvariant="normal">∣</mi></mrow></msup><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>−</mo><mi mathvariant="normal">∣</mi><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo><mo>−</mo><mi>C</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi></mrow></msup><mo>⋅</mo><mo stretchy="false">(</mo><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>+</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo stretchy="false">)</mo><mo>−</mo><mi>C</mi><mspace linebreak="newline"></mspace><mo>=</mo><msup><mn>2</mn><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi></mrow></msup><mo stretchy="false">(</mo><mfrac><mrow><mi>T</mi><mo>−</mo><mfrac><mrow><mi>C</mi><mo>⋅</mo><mi>l</mi><mi>n</mi><mn>2</mn></mrow><msup><mn>2</mn><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi></mrow></msup></mfrac></mrow><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>+</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e^T≈2^{|\frac{T}{ln2}|}(1+\frac{T}{ln2}-|\frac{T}{ln2}|)-C=2^{offset}\cdot(\frac{T}{ln2}+bias)-C \\=2^{offset}(\frac{T-\frac{C\cdot ln2}{2^{offset}}}{ln2}+bias)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2735em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0235em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8721em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mtight">∣</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal mtight">se</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3135em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal mtight">se</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6275em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7474em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.6426em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.782em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal mtight">se</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mbin mtight">⋅</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3574em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></span></p><p>原论文证明了当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi></mrow></msup><mo>⋅</mo><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mfrac><mn>3</mn><mrow><mn>8</mn><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>l</mi><mi>n</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">C=2^{offset}\cdot ln(\frac{3}{8ln2}+\frac{1}{2})/ln2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal mtight">se</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span></span>时，误差最小。所以最终的逼近计算公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>e</mi><mi>T</mi></msup><mo>≈</mo><msup><mn>2</mn><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi></mrow></msup><mo>⋅</mo><mo stretchy="false">(</mo><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>+</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo stretchy="false">)</mo><mo>−</mo><mi>C</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi></mrow></msup><mo stretchy="false">(</mo><mfrac><mi>T</mi><mrow><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>+</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>−</mo><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mfrac><mn>3</mn><mrow><mn>8</mn><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>l</mi><mi>n</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e^T≈2^{offset}\cdot(\frac{T}{ln2}+bias)-C=2^{offset}(\frac{T}{ln2}+bias-ln(\frac{3}{8ln2}+\frac{1}{2})/ln2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal mtight">se</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal mtight">se</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>其中对单精度浮点数而言，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo>=</mo><mn>23</mn></mrow><annotation encoding="application/x-tex">offset=23</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal">se</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">23</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>=</mo><mn>127</mn></mrow><annotation encoding="application/x-tex">bias=127</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">127</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>l</mi><mi>n</mi><mn>2</mn><mo>≈</mo><mn>1.4426950409</mn></mrow><annotation encoding="application/x-tex">1/ln2≈1.4426950409</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.4426950409</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mfrac><mn>3</mn><mrow><mn>8</mn><mi>l</mi><mi>n</mi><mn>2</mn></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>l</mi><mi>n</mi><mn>2</mn><mo>≈</mo><mn>0.0579848147</mn></mrow><annotation encoding="application/x-tex">ln(\frac{3}{8ln2}+\frac{1}{2})/ln2≈0.0579848147</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.0579848147</span></span></span></span>，所以：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>e</mi><mi>T</mi></msup><mo>≈</mo><msup><mn>2</mn><mn>23</mn></msup><mo stretchy="false">(</mo><mn>1.4426950409</mn><mo>∗</mo><mi>T</mi><mo>+</mo><mn>126.94201519</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e^T≈2^{23}(1.4426950409*T+126.94201519)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1.4426950409</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">126.94201519</span><span class="mclose">)</span></span></span></span></span></p><p>用C实现如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">float</span> <span class="title">fast_exp</span><span class="params">(<span class="keyword">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span><span class="keyword">uint32_t</span> i;<span class="keyword">float</span> f;&#125; v;</span><br><span class="line">    v.i=(<span class="number">1</span>&lt;&lt;<span class="number">23</span>)*(<span class="number">1.4426950409</span>*x+<span class="number">126.94201519f</span>);</span><br><span class="line">    <span class="keyword">return</span> v.f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>参考</h1><p>[1] <a href="https://blog.csdn.net/shakingWaves/article/details/78450500?locationNum=6&amp;fps=1">快速浮点数exp算法</a></p><p>[2] <a href="https://nic.schraudolph.org/pubs/Schraudolph99.pdf">A Fast, Compact Approximation of the Exponential Function</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> data structure </tag>
            
            <tag> fast exp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构 [0]：杂项</title>
      <link href="/2022/01/18/ComputerArch-0-Miscellaneous/"/>
      <url>/2022/01/18/ComputerArch-0-Miscellaneous/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>这里将收录一些不成体系的，不值得用一整个文章篇幅去探讨的，或者暂时只关注上层定义的关于计算机体系结构的杂项。每个小节之间的关联性不强，仅做快速查阅之用。</p><h1>CISC与RISC</h1><h2 id="定义">定义</h2><p>复杂指令集（Complex Instruction Set Computing，CISC），代表就是Intel的x86架构</p><p>精简指令集（Reduced Instruction Set Computing，RISC），代表就是ARM架构</p><p><img src="/2022/01/18/ComputerArch-0-Miscellaneous/1.webp" alt="1"></p><p>两种架构的优化思路不同：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>程序的</mtext><mi>C</mi><mi>P</mi><mi>U</mi><mtext>执行时间</mtext><mo>=</mo><mtext>指令数</mtext><mo>×</mo><mi>C</mi><mi>P</mi><mi>I</mi><mo>×</mo><mi>C</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mtext> </mtext><mi>C</mi><mi>y</mi><mi>c</mi><mi>l</mi><mi>e</mi><mtext> </mtext><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">程序的CPU执行时间 = 指令数 × CPI × Clock \space Cycle \space  Time</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">程序的</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord cjk_fallback">执行时间</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">指令数</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">Cl</span><span class="mord mathnormal">oc</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">yc</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">im</span><span class="mord mathnormal">e</span></span></span></span></span></p><p>CISC 架构是通过优化<strong>指令数</strong>，来减少 CPU 的执行时间。而 RISC 架构是在优化 <strong>CPI</strong>，因为指令比较简单，需要的时钟周期就比较少。</p><h2 id="Intel的反击">Intel的反击</h2><p>CISC的设计是有受限于硬件条件不足的历史因素的影响的，但随着硬件的发展，内存和寄存器变得越来越多，像CISC这种为了更高效（充分）利用内存和寄存器的设计思路显然是过时的，且为了支持更多的复杂指令，硬件电路设计就要更复杂更困难，在散热和功耗上，也是更大的挑战。而RISC的设计思路则是遵循二八定律，仅在硬件上实现20%的最常用（程序执行时间的80%）的简单指令，而复杂操作则通过（编译器实现）简单指令的组合完成。这大大降低了CPU硬件电路设计的难度，同时腾出来的晶体管可以用来增加更多的通用寄存器或者其他用来提升CPU实际执行效率的优化。无论怎么看，RISC既是现在，又是未来，那么Intel是怎么反击的呢？</p><p>Intel不是不想完全摒弃x86的历史包袱（安腾处理器的IA-64架构就是在Intel迈入64位时代的一次尝试，它因为不兼容x86指令集，最终以失败告终。这此失败也给了AMD机会，AMD在此期间推出了能够兼容32位x86指令集的64位架构，即AMD64。没错，你有时候会看到x86-64指令集被称为AMD64，就是AMD“偷袭”了老师傅），但向前兼容的问题牵制住了Intel的步伐。推出新的完全基于RISC的CPU架构，意味着基于x86架构设计的操作系统和应用软件都将不能再使用，这对用户来说必然是不可接受的。既然步子不能迈太大，那就一步步同化喽。</p><p>于是，从 Pentium Pro 时代开始，Intel 就开始在处理器里引入了<strong>微指令</strong>（Micro-Instructions/Micro-Ops）架构。而微指令架构的引入，也让 CISC 和 RISC 的分界变得模糊起来。</p><p>在微指令架构的 CPU 里面，编译器编译出来的机器码和汇编代码并没有发生什么变化。但在指令译码的阶段，译码器会把一条机器码，“翻译”成好几条“微指令”，而不是一条CPU指令。这里的一条条微指令，就变成了固定长度的 RISC 风格的了。这些 RISC 风格的微指令，会被放到一个微指令缓冲区里面，然后再从缓冲区里面，分发给到后面的应用了<strong>超标量</strong>和<strong>乱序执行</strong>的流水线架构里面。不过这个流水线架构里面接受的，就不是复杂的指令，而是精简的指令了。在这个架构里，我们的指令译码器相当于变成了设计模式里的一个<strong>适配器</strong>（Adaptor）。这个适配器，填平了 CISC 和 RISC 之间的指令差异。示意图如下所示：</p><p><img src="/2022/01/18/ComputerArch-0-Miscellaneous/2.webp" alt="2"></p><p>但实现这样一个能够把 CISC 的指令译码成 RISC 指令的指令译码器，比原来的指令译码器要更复杂，这也就意味着更复杂的电路和更长的译码时间。为了缩短译码时间，Intel在CPU里增加一层L0 Cache用来存放已经译码好的好的微指令，基于程序代码的局部性假设，CPU在大部分情况下，都可以直接从Cache中拿到译码后的结果，从而不必执行重复的译码操作，一方面减少了译码时间，另一方面还减少了译码器的功耗。</p><p>尽管Intel处理器通过微指令架构融合了大量RISC处理器的设计，不断想RISC架构方向靠拢。但x86的CPU在功耗上还是远远超过了ARM的CPU（这篇论文详细论证了x86和ARM之间的功耗差异与指令集是CISC还是RISC并无直接关系），这也是智能手机时代成为ARM的时代的根本原因（另外还有只授权不生产的商业模式导致的良性竞争，进一步导致单片价格低，出货量大）。</p><p>当然ARM发展到现在，也同样借鉴（技术上的事儿能叫抄吗？）了CISC的诸多优点，如乱序执行和多发射。这进一步使得CISC和RISC之间的界限更加模糊。</p><p>不过，ARM并不开源，想用ARM架构来生产CPU就得交授权费，想要自己改动ARM架构的设计，不好意思，得加钱。不想交钱，倒是有RISC-V这样的开源架构，不够目前还不成气候，难以撼动ARM的垄断地位。</p><h1>FPGA</h1><p>FPGA即<strong>现场可编程门阵列</strong>（Field-Programmable Gate Array），它可以让我们像对软件一样对硬件（门电路阵列）进行编程，可以反复烧录，可以组合实现复杂的芯片功能。从而在芯片设计阶段提前验证芯片技术方案，而不需要真的生产一块芯片。那要怎么去“编程”硬件呢？FPGA的实现逻辑可以从以下三个层次去看：</p><ul><li>第一，用<strong>存储换功能</strong>实现组合逻辑。在 FPGA 里，基本的电路逻辑，不是采用布线连接的方式进行的，而是预先根据我们在软件里面设计的逻辑电路，算出对应的真值表，直接存到一个叫作 <strong>LUT</strong>（Look-Up Table，查找表）的电路里。而LUT其实就是一块存储空间，里面存储了“特定的输入信号下，对应输出是0还是1”。</li></ul><img src="/2022/01/18/ComputerArch-0-Miscellaneous/3.webp" alt="3" style="zoom:33%;"><ul><li><p>第二，对于需要实现的<strong>时序逻辑电路</strong>， 我们可以FPGA 里面直接放上 D 触发器，作为寄存器。把很多个 LUT 的电路和寄存器组合在一起，变成一个<strong>逻辑簇</strong>（Logic Cluster），在 FPGA 里也被叫做 <strong>CLB</strong>（Configurable Logic Block，可配置逻辑块）。CLB在最基础的门电路上做了组合，能够实现更复杂一点的功能，如全加器。</p></li><li><p>第三，通过<strong>可编程逻辑布线</strong>，来连接各个不同的 CLB，最终实现我们想要实现的芯片功能。可编程逻辑布线可类比为铁路网，整个铁路网已经铺设好了，但设计了很多个道岔，我们可以通过控制道岔，来确定不同的列车线路。在可编程逻辑布线里面，“编程”在做的，就是拨动像道岔一样的各个电路开关，最终实现不同 CLB 之间的连接，完成我们想要的芯片功能。</p></li></ul><img src="/2022/01/18/ComputerArch-0-Miscellaneous/4.webp" alt="4" style="zoom: 33%;">]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Miscellaneous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构 [5]：异常与中断</title>
      <link href="/2022/01/18/ComputerArch-5-Exception/"/>
      <url>/2022/01/18/ComputerArch-5-Exception/</url>
      
        <content type="html"><![CDATA[<h1>异常定义</h1><p><strong>异常</strong>（Exception）其实是一个硬件和软件组合到一起的处理过程。异常的前半生，也就是异常的发生和捕捉，是在硬件层面完成的。但是异常的后半生，也就是说，异常的处理，其实是由软件来完成的。</p><p>计算机会为每一种可能会发生的异常，分配一个<strong>异常代码</strong>（Exception Number），或叫作<strong>中断向量</strong>（Interrupt Vector）。异常发生的时候，通常是 CPU 检测到了一个特殊的信号。比如，你按下键盘上的按键，输入设备就会给 CPU 发一个信号。或者，正在执行的指令发生了加法溢出，同样，我们可以有一个进位溢出的信号。这些信号呢，在组成原理里面，我们一般叫作发生了一个<strong>事件</strong>（Event）。CPU 在检测到事件的时候，其实也就拿到了对应的异常代码。</p><p>这些异常代码里，I/O 发出的信号的异常代码，是由操作系统来分配的，也就是由软件来设定的。而像加法溢出这样的异常代码，则是由 CPU 预先分配好的，也就是由硬件来分配的。这又是另一个软件和硬件共同组合来处理异常的过程。</p><p>拿到异常代码之后，CPU 就会触发异常处理的流程。计算机在内存里，会保留一个<strong>异常表</strong>（Exception Table）。也有把这个表叫作<strong>中断向量表</strong>（Interrupt Vector Table），好和上面的中断向量对应起来。异常表中存放的是不同的异常代码对应的异常处理程序（Exception Handler）所在的地址。</p><p>CPU 在拿到了异常码之后，会先把当前的程序执行的现场，保存到程序栈里面，然后根据异常码查询，找到对应的异常处理程序，最后把后续指令执行的指挥权，交给这个异常处理程序。异常处理程序执行完毕后，再返回正常指令位置，同时恢复现场，继续执行后续指令。一个示意图如下图所示：</p><p><img src="/2022/01/18/ComputerArch-5-Exception/1.webp" alt="1"></p><h1>异常分类</h1><ul><li><strong>中断</strong>（Interrupt）：顾名思义，程序在执行过程中，被打断了。这个打断执行的事件，来自于CPU外部的I/O设备。比如在键盘上按下一个键，就会触发一个中断类型的中断。</li><li><strong>陷阱</strong>（Trap）：是程序员“故意”主动触发的异常。比如在程序上打断点，再比如应用程序调用系统调用时，从用户态切换到内核态，就是通过触发陷阱异常，去执行用户态没有权限，但异常处理程序有相应的系统权限的事情。</li><li><strong>故障</strong>（Fault）：并不是开发程序时可以触发的，而是一种非计划内的错误情况。比如加法计算时的溢出。故障的一个重要特征就是，故障在异常程序处理完成之后，仍然回来处理当前的指令，而不是去执行程序中的下一条指令。因为当前的指令因为故障的原因并没有成功执行完成。</li><li><strong>中止</strong>（Abort）：可以认为是故障的一种特殊情况。即没有对应的异常处理程序可以处理这种异常，程序不得不进入中止状态，是一种无法恢复的故障。</li></ul><p>在这四种异常里，中断异常的信号来自系统外部，而不是在程序自己执行的过程中，所以称之为<strong>异步</strong>类型的异常。而陷阱、故障以及中止类型的异常，是在程序执行的过程中发生的，所以称之为<strong>同步</strong>类型的异常。</p><p><img src="/2022/01/18/ComputerArch-5-Exception/2.webp" alt="2"></p><h1>异常处理：上下文切换</h1><p>与函数调用类似，我们在异常发生后，切换到执行异常处理程序之前，需要做保存现场的操作。以便异常返回时恢复现场。但比起函数调用，这个操作要更复杂一些：</p><ul><li>首先，因为异常情况往往发生在程序正常执行的预期之外，比如中断、故障发生的时候。所以，除了本来程序压栈要做的事情之外，我们还需要把 CPU 内当前运行程序用到的所有寄存器，都放到栈里面。最典型的就是条件码寄存器里面的内容。</li><li>其次，像陷阱这样的异常，涉及程序指令在用户态和内核态之间的切换。对应压栈的时候，对应的数据是压到内核栈里，而不是程序栈里。</li><li>最后，像故障这样的异常，在异常处理程序执行完成之后。从栈里返回出来，继续执行的不是顺序的下一条指令，而是故障发生的当前指令。因为当前指令因为故障没有正常执行成功，必须重新去执行一次。</li></ul><p>所以，对于异常的处理流程，不像是顺序执行的指令间的函数调用关系。而是更像两个不同的独立进程之间在CPU层面的切换，所以这个过程我们称之为<strong>上下文切换</strong>（Context Switch）。</p><h1>参考</h1><p>[1] <a href="https://time.geekbang.org/column/intro/100026001?tab=catalog">深入浅出计算机组成原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exception </tag>
            
            <tag> Interrupt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构 [4]：流水线冒险与预测</title>
      <link href="/2022/01/17/ComputerArch-4-Hazard/"/>
      <url>/2022/01/17/ComputerArch-4-Hazard/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>想要通过流水线设计来提高CPU的吞吐率，其实是冒着一定的风险的。就类似于接力赛跑中，交接棒时会通过提前起跑来获取优势，但这时能否以全速完成交接取决于前后两个人的步调是否能达成一致。我们在流水线也会遇到一些被称为<strong>冒险</strong>（Hazard）的场景，冒险会阻止指令流中下一条指令在其指定的时钟周期内执行，从而降低流水化所能获得的理想的吞吐量。</p><h1>冒险</h1><p>主要有三大冒险，分别是<strong>结构冒险</strong>（Structural Hazard）、<strong>数据冒险</strong>（Data Hazard）以及<strong>控制冒险</strong>（Control Hazard）。</p><h2 id="结构冒险">结构冒险</h2><p>结构冒险本质上以硬件层面的资源竞争问题，即CPU在同一个时钟周期的两条不同指令的不同阶段，用到了同一个硬件电路。一个典型的例子如下图所示：</p><p><img src="/2022/01/17/ComputerArch-4-Hazard/1.png" alt="1"></p><p>上图是一个典型的5级流水线，其中第一条指令的访存（MEM）阶段和第四条指令的取指令（IF）都涉及对内存数据的读取。若我们只有一个地址译码器去解析内存地址，则一个时钟周期内只能读取一条数据，故第一条指令和第四条指令并不能同时执行。</p><p>对于结构冒险，显而易见的解决方案就是<strong>增加资源</strong>。比如对于上面的问题，就可以将内存分为两部分，一部分为存放指令的程序内存，一部分是存放数据的数据内存，每部分有自己的地址译码器。这其实是<strong>哈佛架构</strong>（Harvard Architecture）中所采用的设计。</p><p>而冯·诺伊曼体系结构（又称<strong>普林斯顿架构</strong>（Princeton Architecture））中并未将内存进行拆分，因为这会限制内存使用的灵活性。不过也借鉴了哈佛结构的思想，现代CPU虽然没有在内存层面进行对应的拆分，却在 CPU 内部的高速缓存部分进行了区分，把高速缓存分成了<strong>指令缓存</strong>（Instruction Cache）和<strong>数据缓存</strong>（Data Cache）两部分。</p><p>内存的访问速度远比 CPU 的速度要慢，所以现代CPU并不会直接读取主内存。它会从主内存把一段连续的指令和数据加载到高速缓存中，这样后续的访问都是访问高速缓存。而指令缓存和数据缓存的拆分，使得我们的 CPU 在进行数据访问和取指令的时候，不会再发生资源冲突的问题。</p><h3 id="指令对齐">指令对齐</h3><p>MIPS指令集（5级流水线的典型代表）中几种指令的流水级分布如下表：</p><p><img src="/2022/01/17/ComputerArch-4-Hazard/2.webp" alt="2"></p><p>从上表中可见，STORE指令不需要写回到寄存器，故没有WB阶段，R型指令只针对寄存器进行操作，不需要访存，故没有MEM阶段。但是流水线设计时，并没有直接跳过该阶段，而是插入了一个NOP操作，这样做的目的是为了避免两条指令在同一个时钟周期内执行相同的stage（用到相同的硬件资源），也就避免的结构冒险。这叫做<strong>指令对齐</strong>。</p><h2 id="数据冒险">数据冒险</h2><p>数据冒险其实就是同时执行的多个指令之间，有数据依赖的场景。这些数据依赖关系可以分为三大类：分别是<strong>先写后读</strong>（Read After Write，RAW）、<strong>先读后写</strong>（Write After Read，WAR）和<strong>写后再写</strong>（Write After Write，WAW）。</p><p>先写后读的依赖关系，一般称为<strong>数据依赖</strong>（Data Dependency）。</p><p>先读后写的依赖关系，一般称为<strong>反依赖</strong>（Anti-Dependency）。</p><p>写后再写的依赖关系，一般称为<strong>输出依赖</strong>（Output Dependency）。</p><h3 id="流水线停顿">流水线停顿</h3><p>解决数据冒险最简单（最笨）的办法就是流水线停顿（Pipeline Stall），又称流水线冒泡（Pipeline Bubbling）。在进行指令译码的时候，会拿到对应指令所需要访问的寄存器和内存地址，这时CPU中的<strong>冒险检测电路</strong>就能够对是否会触发数据冒险做出判断，因此就能够决定是按计划发射该指令，还是停顿一个或多个周期。但所谓的停顿不是真的停下来，而是插入一个NOP操作，即什么都不干的空操作。</p><h3 id="操作数转发">操作数转发</h3><p>先来看一个简单的例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add $t0, $s2,$s1</span><br><span class="line">add $s2, $s1,$t0</span><br></pre></td></tr></table></figure><p>对于上面两条指令，存在先写后读（<code>$t0</code>）的数据冒险。若采用流水线停顿的方式解决冒险，则时序图如下所示：</p><p><img src="/2022/01/17/ComputerArch-4-Hazard/3.webp" alt="3"></p><p>这里第二条指令多花了2个时钟周期用于等待第一条指令完成数据写回。但是我们其实并不需要等到写回完成，才开始执行第二条指令。我们可以将第一指令的输出直接传输到下一条指令的ALU，则时序图就如下所示：</p><p><img src="/2022/01/17/ComputerArch-4-Hazard/4.webp" alt="4"></p><p>这种解决方法叫做<strong>操作数转发/前推</strong>（Operand Forwarding）或<strong>操作数旁路</strong>（Operand Bypassing）。转发解释了该方法的<strong>逻辑含义</strong>，而旁路则解释了该方法的<strong>硬件含义</strong>，即ALU的输出通过“旁路”线连接到ALU的输入，从而跳过（Bypass）了写入寄存器，再读取寄存器的过程。</p><p>当然转发并不能解决所有的冒险情景，有时还是要跟流水线冒泡一起使用。如下图：</p><p><img src="/2022/01/17/ComputerArch-4-Hazard/5.webp" alt="5"></p><h3 id="乱序执行-发射">乱序执行/发射</h3><p>在流水线里，如果后面的指令不依赖前面的指令，那就不用等待前面的指令执行，它完全可以先执行。这被称为<strong>乱序执行</strong>（Out-of-Order Execution，OoOE）。一个例子如下图所示：</p><p><img src="/2022/01/17/ComputerArch-4-Hazard/6.webp" alt="6"></p><p>第三条指令并不依赖于前两条指令的计算结果，所以在第二条指令等待第一条指令的访存和写回阶段的时候，第三条指令就已经执行完成了。</p><p>使用乱序执行的CPU的流水线与经典5级流水线就不太一样了：</p><img src="/2022/01/17/ComputerArch-4-Hazard/7.webp" alt="7" style="zoom: 28%;"><ul><li><ol><li>IF和ID阶段与原来一样，顺序执行（看Skylake的<a href="https://en.wikichip.org/wiki/intel/microarchitectures/skylake_(client)#Individual_Core">结构框图</a>，其实IF和ID也是多通道并行的）；</li></ol></li><li><ol start="2"><li>指令译码结束后，会进行一次指令分发，把指令发到保留站（Reservation Stations，RS）中；</li></ol></li><li><ol start="3"><li>保留站中的指令并不会立即执行，而是等待它们依赖的数据准备完毕后才会执行；</li></ol></li><li><ol start="4"><li>指令执行是交由功能单元（Function Unit，FU）完成。FU其实就是ALU，不同的FU可以并行执行，但不同的FU支持的指令并不相同（如整形计算单元和浮点计算单元是分开的，加减运算和乘法运算单元也是分开的）。</li></ol></li><li><ol start="5"><li>指令执行阶段完成后，并不直接把结果写回寄存器，而是存放在重排序缓冲区（Re-Order Buffer，ROB）；</li></ol></li><li><ol start="6"><li>在ROB中，CPU按照指令提取的顺序，对计算结果重新排序。只有排在前面的指令都完成了，才会提交当前指令，完成计算；</li></ol></li><li><ol start="7"><li>计算结果不会直接写回内存或告诉缓存，而是先放到存储缓冲区（Store Buffer）中（方便转发？），最终才会写入高速缓存和内存里。</li></ol></li></ul><p>从上面的过程描述可以看出，乱序执行是CPU层面的事情，发生在指令译码阶段分析到指令间的不存在数据依赖关系的前提下。但乱序执行后，会对计算结果进行重排，所以在CPU外部看来，指令仍然是有序执行的。</p><p>乱序执行，极大地提高了 CPU 的运行效率。核心原因是，现代 CPU 的运行速度比访问主内存的速度要快很多。如果完全采用顺序执行的方式，很多时间都会浪费在前面指令等待获取内存数据的时间里。CPU 不得不加入 NOP 操作进行空转。而现代 CPU 的流水线级数也已经相对比较深了，到达了 14 级，乱序执行可以充分利用较深流水线带来的并发性，尽可能的逼近吞吐量的理论上限。</p><h2 id="控制冒险">控制冒险</h2><p>为了确保能取到正确的指令，而不得不进行等待延迟的情景，就是<strong>控制冒险</strong>（Control Harzard）。例如跳转指令的（顺序）下一条指令是否应当执行，只有等到跳转指令指令执行完（流水线停顿），更新了PC寄存器，才能确定。除此之外还有什么方法解决控制冒险吗？答案是肯定的。</p><h3 id="缩短分支延迟">缩短分支延迟</h3><p>以条件跳转指令为例，条件比较和实际跳转的opcode，条件码寄存器，还有要跳转的地址在ID阶段都能获得。这也就是说，可以另外设计旁路电路，将条件判断和地址跳转操作都提前到ID阶段，而不需要在EX阶段由ALU完成。这与前面提到的操作数转发实际上是异曲同工，都是将计算结果提前反馈给流水线。</p><p>但这样做并不能完全解决问题，跳转仍然要等到ID阶段结束才能完成，而这时应当已经完成了下一条指令的取指操作了，所以还是不可避免的产生一个时钟周期的流水线停顿。</p><h3 id="分支预测">分支预测</h3><p>最简单的分支预测（branch Prediction）技术，叫作“<strong>假装分支不发生</strong>”。即CPU仍然按照顺序往下执行指令。这是一种<strong>静态预测技术</strong>。有50%的概率预测正确。如果预测失败，则需要对后面取出的指令中已经执行的部分做丢弃操作，这在流水线中叫做Zap或Flush。除了放弃后面的已经执行到一半的指令外，还需要做对应的清除操作，比如清空或还原寄存器中的数据等，而这些清除操作，都是有时间开销的。</p><p><img src="/2022/01/17/ComputerArch-4-Hazard/8.webp" alt="1"></p><h3 id="动态分支预测">动态分支预测</h3><p>用一个比特，去记录当前分支的比较情况，直接用当前分支的比较情况，来预测下一次分支时候的比较情况的方法叫做<strong>一级分支预测</strong>（One Level Branch Prediction）或<strong>1比特饱和计数</strong>（1-bit saturating counter）。</p><p>一级分支预测的鲁棒性不强，我们可以引入状态机（State Machine）处理分支预测，如下图所示：</p><p><img src="/2022/01/17/ComputerArch-4-Hazard/2.png" alt="2"></p><p>在这个状态机中，有4个状态，所以需要2个比特位来记录对应的状态。因此这种方法称为<strong>2比特饱和计数</strong>，或者叫<strong>双模态预测器</strong>（Bimodal Predictor）。</p><h1>参考</h1><p>[1] <a href="https://time.geekbang.org/column/intro/100026001?tab=catalog">深入浅出计算机组成原理</a></p><p>[2] 乱序执行所依赖的<a href="https://en.wikipedia.org/wiki/Tomasulo_algorithm">Tomasulo 算法</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pileline </tag>
            
            <tag> Hazard </tag>
            
            <tag> Branch Prediction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构 [3]：编译与链接</title>
      <link href="/2022/01/10/ComputerArch-3-ELF/"/>
      <url>/2022/01/10/ComputerArch-3-ELF/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>将一段程序源码运行起来一共需要几步？每一步都做了什么？</p><h1>整体流程</h1><p>C语言源码能够跑起来大致可以分为两部分：</p><p><img src="/2022/01/10/ComputerArch-3-ELF/1.webp" alt="1"></p><ul><li>第一部分由编译（Compile），汇编（Assemble）以及链接（Link）三个阶段组成。其中编译器将C源码文件（*.c）编译成汇编代码文件（*.asm或*.S）；汇编器将汇编代码文件转换成目标代码文件（机器码，*.o）；链接器将多个目标文件及其调用的各种函数库文件（*.lib/*.a或*.dll/*.so）链接起来，得到可执行文件（*.elf/*.pe）；</li><li>第二部分则是通过装载器（Loader）将可执行文件装载（Load）到内存中。CPU从内存中读取指令和数据，开始执行程序。</li></ul><h1>ELF文件格式</h1><p>在 Linux 下，可执行文件和目标文件所使用的都是一种叫 <strong>ELF</strong>（<strong>Execuatable and Linkable File Format</strong>）的文件格式，中文名字叫<strong>可执行与可链接文件格式</strong>，这里面不仅存放了编译成的汇编指令，还保留了很多别的数据。</p><p><img src="/2022/01/10/ComputerArch-3-ELF/2.webp" alt="2"></p><p>ELF 文件格式把各种信息，分成一个一个的<strong>段</strong>（Section）保存起来。ELF 有一个基本的文件头（File Header），用来表示这个文件的基本属性，比如是否是可执行文件，对应的 CPU、操作系统等等。除了这些基本属性之外，大部分程序还有这么一些 Section：</p><ul><li><code>.text Section</code>，也叫作代码段或者指令段（Code Section），用来保存程序的代码和指令；</li><li><code>.data Section</code>，也叫作数据段（Data Section），用来保存程序里面设置好的初始化数据信息；</li><li><code>.rel.text Secion</code>，叫作重定位表（Relocation Table）。重定位表里，保留的是当前的文件里面，哪些跳转地址其实是我们不知道的。比如在.o文件在链接之前，我们并不知道其中调用的其他.o文件或函数库中的函数该跳转到哪里，这些信息就会存储在重定位表里；</li><li><code>.symtab Section</code>，叫作符号表（Symbol Table）。符号表保留了我们所说的当前文件里面定义的函数名称和对应地址的地址簿。</li></ul><p>当链接时，链接器会扫描所有输入的目标文件，然后把所有符号表里的信息收集起来，构成一个全局的符号表。然后再根据重定位表，把所有不确定要跳转地址的代码，根据符号表里面存储的地址，进行一次修正。最后，把所有的目标文件的对应段进行一次合并，变成了最终的可执行代码。<img src="/2022/01/10/ComputerArch-3-ELF/3.webp" alt="3"></p><p>Windows 的可执行文件格式是一种叫作<strong>PE</strong>（<strong>Portable Executable Format</strong>）的文件格式。Linux 下的装载器只能解析 ELF 格式而不能解析 PE 格式，反之亦然。这也是不同操作系统下的可执行文件不能跨平台运行的原因。</p><p>可以通过<code>objdump -d</code>指令对目标文件或可执行文件进行反汇编，得到汇编代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">objdump -d -M intel -S add_lib.o &gt; add_lib.asm</span><br></pre></td></tr></table></figure><p>其中<code>-M intel</code>选择intel反汇编器；<code>-S</code>会将源代码嵌入到汇编代码中，编译时需要<code>gcc -g</code>，即需要调试信息；</p><p>可以通过<code>objdump -r</code>指令查看目标文件的重定位表；</p><p>可以通过<code>readelf -s</code>指令查看符号表；</p><h1>链接</h1><h2 id="静态链接与静态库">静态链接与静态库</h2><p>在上面的表述中，程序的链接，是把不同的*.o目标文件中的对应段合并到一起，成为最终的可执行文件。其实这个链接方式是<strong>静态链接</strong>（Static Link），与此相对应的，<strong>静态库</strong>（Static Libraries）就可以认为是一组目标文件的集合打包而成。</p><ul><li><p>优点：静态链接生成的可执行文件已经具备了程序运行的所有组件，与函数库再无瓜葛，因此移植起来比较方便。且运行时速度更快。</p></li><li><p>缺点：</p><ul><li>首先很明显的就是空间浪费。这个浪费可以从两个层次去看，第一，链接器在链接静态库或者目标文件时是以文件为单位的。若该目标文件中还有其他我们并没有用到的函数，也会一起被链接进可执行文件。第二，若多个可执行文件都有依赖同一份目标文件，则该目标文件会被合并到每个可执行文件中，即在每个可执行文件中都会存在一个副本。这都会导致代码空间的浪费。</li><li>其次静态库对于程序的部署，发布和更新都会带来困扰。如果一个可执行程序依赖的底层静态库有一个改动，则需要重新编译，再部署到设备或发布给用户。即<strong>全量更新</strong>。</li></ul></li></ul><h2 id="动态链接与动态库">动态链接与动态库</h2><p>为了解决静态链接的缺点，引入了新的链接机制，即<strong>动态链接</strong>（Dynamic Link），与此相对应的，<strong>动态库</strong>（Dynamic Libraries）是动态链接时需要使用的库。在Windows下，动态库被称为Dynamic-Link Library（*.dll文件，动态链接库）。在Linux下，动态库被称为Shared Object（*.so文件，共享对象）。</p><p>动态链接的核心思想是动态库在程序编译时并不会被链接进可执行文件中，而是在程序运行时基于库的依赖关系去系统环境变量（linux下为<code>LD_LIBRARY_PATH</code>，windows下可以在VS工程属性中指定）指定的目录下（磁盘）去查找动态库是否存在，若存在，则会将其装载到内存中，与可执行文件链接成一个完整的程序。当然，若动态库也依赖其他动态库，也会递归地执行上述操作。</p><p>这样做的<strong>好处</strong>就是 ，若同时执行多个可执行文件，若他们依赖某个相同的动态库，则该动态库只需要被装载到内存中一次，多个可执行文件共享这个同一份副本；其次，程序更新也变得更加方便，若某个动态库内部出现改动，只要接口不变，则只需要发布补丁来替换这一个动态库，不需要重新编译整个程序包。即做到了<strong>增量更新</strong>。</p><p>当然动态链接也不是完全没有<strong>代价</strong>的，因为把链接推迟到了程序运行时，所以每次执行程序都需要进行链接，所以性能会有一定损失， 据估算，动态链接和静态链接相比，性能损失大约在5%以下。但这点性能损失用来换取程序在空间上的节省以及构建和升级时的灵活性是值得的。</p><h3 id="地址无关码（Position-Independent-Code）">地址无关码（Position-Independent Code）</h3><p>若想要实现动态库的代码共享，则需要编译出的动态库文件中的指令代码是地址无关的。也就是说，这段代码与装载到内存中的绝对地址无关，动态库内部指令使用的内存地址，都是一个相对于当前指令偏移量的相对地址。无论动态库链接到某个可执行程序后的起始（虚拟）内存地址是多少，动态库中指令都是可以正常执行的。示意图如下：</p><p><img src="/2022/01/10/ComputerArch-3-ELF/6.webp" alt="6"></p><h3 id="PLT与GOT">PLT与GOT</h3><p>关于动态库在装载时重定位的过程，比较经典的解释就是<strong>延迟绑定</strong>机制，这里我们结合一个小例子来讲一下：</p><p>首先创建如下几个文件：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIB_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIB_H</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_me_the_money</span><span class="params">(<span class="keyword">int</span> money)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_me_the_money</span><span class="params">(<span class="keyword">int</span> money)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Show me USD %d from lib.c \n&quot;</span>, money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// show_me_poor.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;lib.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">5</span>;</span><br><span class="line">    show_me_the_money(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://xn--lib-u33e657d39t.xn--clib-l84fuio10anwzd4cq4ge50hn65a.so">然后把lib.c编译成一个动态库lib.so</a>，然后再编译show_me_poor的可执行文件时动态链接lib.so：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc lib.c -fPIC -shared -g -o lib.so</span><br><span class="line">gcc -g -o show_me_poor show_me_poor.c ./lib.so  -z lazy</span><br></pre></td></tr></table></figure><p>其中<code>-fPIC</code>参数就表示编译为地址无关码；<code>-shared</code>参数表示生成动态库；<code>-g</code>是为了生成调试信息，供gdb使用；<code>-z lazy</code>参数表示动态库链接时延迟加载，这个<strong>很重要</strong>，不加该选项，实测在动态库函数调用前（其实是在main函数前）就已经装载了动态库，装载过程如<a href="https://www.cnblogs.com/gnuemacs/p/14523720.html">这个</a>老哥分析的那样。</p><p>此时，我们可以使用<code>objdump -d</code>指令来执行反汇编生成汇编代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">objdump -d -M intel -S show_me_poor &gt; show_me_poor.asm</span><br></pre></td></tr></table></figure><p>但是由于是动态链接，汇编代码是看不到GOT表的变化（这里先不用管GOT表是啥），我们选择用gbd调试代码，一些常用的命令见<a href="https://www.jianshu.com/p/283b5466684b">这里</a>，先看下程序未开始执行时的情况：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gdb插件peda</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/longld/peda.git ~/peda</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/peda/peda.py&quot;</span> &gt;&gt; ~/.gdbinit</span><br><span class="line">gdb show_me_poor</span><br><span class="line"><span class="comment"># 查看源代码</span></span><br><span class="line">gdb-peda$ l</span><br><span class="line"><span class="comment"># 打印main函数的汇编代码</span></span><br><span class="line">gdb-peda$ disass main</span><br></pre></td></tr></table></figure><p>则有以下输出：</p><blockquote><p>Dump of assembler code for function main:<br>0x000000000000071a &lt;+0&gt;:     push   rbp<br>0x000000000000071b &lt;+1&gt;:     mov    rbp,rsp<br>0x000000000000071e &lt;+4&gt;:     sub    rsp,0x10<br>0x0000000000000722 &lt;+8&gt;:     mov    DWORD PTR [rbp-0x4],0x5<br>0x0000000000000729 &lt;+15&gt;:    mov    eax,DWORD PTR [rbp-0x4]<br>0x000000000000072c &lt;+18&gt;:    mov    edi,eax<br>0x000000000000072e &lt;+20&gt;:    call   0x5f0 &lt;show_me_the_money@plt&gt;<br>0x0000000000000733 &lt;+25&gt;:    mov    eax,0x0<br>0x0000000000000738 &lt;+30&gt;:    leave<br>0x0000000000000739 &lt;+31&gt;:    ret<br>End of assembler dump.</p></blockquote><p>这其实与我们用<code>objdump -d</code>得到的汇编代码是一致的。这里可以看到调用<code>show_me_the_money</code>函数的对应代码为<code>call 0x5f0 &lt;show_me_the_money@plt&gt;</code>，其中有一个<code>@plt</code>的关键字，代表的就是PLT（Procedure Link Table）表，即<strong>程序链接表</strong>。PLT表由若干代码片段组成，每个代码片段对应一个需要动态链接的函数调用，我们姑且称之为<strong>模块</strong>。<code>call</code>指令相当于<code>push</code>和<code>jmp</code>两条指令的集合。这里就需要跳转到PLT表中的<code>show_me_the_money</code>模块继续执行。</p><p>那么我们继续看PLT表中都有啥，执行如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ disass show_me_the_money</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">gdb-peda$ disass 0x5f0</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">gdb-peda$ x /30i 0x5f0 <span class="comment"># 30代表要显示的个数，i表示用指令形式显示，如果改为x，则表示用16进制数显示</span></span><br></pre></td></tr></table></figure><p>则有如下输出：</p><blockquote><p>Dump of assembler code for function show_me_the_money@plt:<br>0x00000000000005f0 &lt;+0&gt;:     jmp    QWORD PTR [rip+0x200a22]        # 0x201018<br>0x00000000000005f6 &lt;+6&gt;:     push   0x0<br>0x00000000000005fb &lt;+11&gt;:    jmp    0x5e0<br>End of assembler dump.</p></blockquote><p>其中有3条指令，我们先看第一条无条件跳转指令，是跳转到<code>0x201018</code>处的值所代表的地址。即<code>jmp *0x201018</code>， 那么这个地址中的值到底是啥？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x /x 0x201018</span><br></pre></td></tr></table></figure><p>输出为：</p><blockquote><p>0x201018:       0x000005f6</p></blockquote><p>这不就是跳转到当前指令的的下一条指令<code>push 0x0</code>吗？为啥多此一举呢？因为这时还没有装载动态库，如果动态库装载后，<code>0x201018</code>地址处的值就会变成调用的动态库函数的入口地址（其实<code>0x201018</code>本身在可执行程序被装载到内存中时虚拟内存地址也是会变的，等下会看到）。这里用来保存外部动态库入口地址的表就是GOT（Global Offset Table）表，即<strong>全局偏移量表</strong>。<code>*0x201018</code>其实对应的时<code>GOT[3]</code>，即GOT表的第4个值，GOT表的前3个值分别为<code>.dynamic</code>段地址，<code>link_map</code>对象地址和<code>_dl_runtime_resolve</code>函数的入口地址。这里不做深入探究，目前只需要关注<code>_dl_runtime_resolve</code>函数地址，即GOT[2]，我们将通过它在装载时重定位动态库函数，即修改GOT[3]的值。</p><p>有了上面的铺垫，我们接在往下看<code>jmp 0x5e0</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x /30i 0x5e0</span><br></pre></td></tr></table></figure><p>有以下输出：</p><blockquote><p>0x5e0:       push   QWORD PTR [rip+0x200a22]        # 0x201008<br>0x5e6:       jmp    QWORD PTR [rip+0x200a24]        # 0x201010<br>0x5ec:       nop    DWORD PTR [rax+0x0]<br>0x5f0 &lt;show_me_the_money@plt&gt;:       jmp    QWORD PTR [rip+0x200a22]        # 0x201018<br>0x5f6 &lt;show_me_the_money@plt+6&gt;:     push   0x0<br>0x5fb &lt;show_me_the_money@plt+11&gt;:    jmp    0x5e0<br>0x600 &lt;__cxa_finalize@plt&gt;:  jmp    QWORD PTR [rip+0x2009f2]        # 0x200ff8<br>0x606 &lt;__cxa_finalize@plt+6&gt;:        xchg   ax,ax<br>0x608:       Cannot access memory at address 0x608</p></blockquote><p>可以看到<code>0x5e0</code>其实就是PLT的表头，这里首先执行<code>push *0x201008</code>，其实就是<code>push GOT[1]</code>，然后执行<code>jmp *0x201010</code>，即<code>jmp GOT[2]</code>。这就是我们前面说的跳转到<code>_dl_runtime_resolve</code>函数，执行加载时重定位，找到<code>show_me_the_money</code>函数的入口地址，将其写回GOT[3]（以便下次再使用该函数时直接跳转），并且执行<code>show_me_the_money</code>函数。不过现在（未执行程序时）查看<code>0x201010</code>地址处的值：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x /x 0x201010</span><br></pre></td></tr></table></figure><p>你会得到：</p><blockquote><p>0x201010:       0x00000000</p></blockquote><p>没错，是空的。因为<code>_dl_runtime_resolve</code>函数的入口地址也是要在运行时才能确定的。至此，我们基本摸清了动态链接的逻辑：利用PLT和GOT两级跳表的方式，实现了延迟加载。那么让我将程序跑起来看看是不是如我们所预期：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main插入断点</span></span><br><span class="line">gdb-peda$ b main</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">gdb-peda$ r</span><br><span class="line"><span class="comment"># 单步步过执行</span></span><br><span class="line">gdb-peda$ ni</span><br><span class="line"><span class="comment"># 单步步入执行</span></span><br><span class="line">gdb-peda$ si</span><br><span class="line"><span class="comment"># 跳出当前函数</span></span><br><span class="line">gdb-peda$ finish</span><br></pre></td></tr></table></figure><p>通过上述操作可以单步调试代码：</p><p><img src="/2022/01/10/ComputerArch-3-ELF/1.png" alt="1"></p><p><img src="/2022/01/10/ComputerArch-3-ELF/2.png" alt="2"></p><p>这里看到PLT表中<code>show_me_the_money</code>模块的虚拟内存地址是<code>0x5555555545f0</code>，GOT[3]的虚拟内存地址<code>0x555555755018</code>，该地址处的值为<code>0x5555555545f6</code>，即<code>push 0x0</code>指令的地址（0x0其实是代表了<code>show_me_the_money</code>函数的序号，这里只有调用了一个动态库函数，如果有其他，会依此排序）。继续单步执行：</p><p><img src="/2022/01/10/ComputerArch-3-ELF/3.png" alt="3"></p><p><img src="/2022/01/10/ComputerArch-3-ELF/4.png" alt="4"></p><p><img src="/2022/01/10/ComputerArch-3-ELF/5.png" alt="5"></p><p>PLT表头的地址为<code>0x5555555545e0</code>，GOT[2]的地址为<code>0x555555755010</code>，GOT[2]的值为<code>0x7ffff7dea8f0</code>，即<code>_dl_runtime_resolve</code>函数的入口地址。跳出<code>_dl_runtime_resolve</code>函数便直接返回到call 指令的下一条指令。这时再去查看GOT[3]的值对应的映射关系：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ xinfo 0x555555755018</span><br></pre></td></tr></table></figure><p>则有以下输出：</p><blockquote><p>0x555555755018 --&gt; 0x7ffff7bd161a (&lt;show_me_the_money&gt;: push   rbp)<br>Virtual memory mapping:<br>Start : 0x0000555555755000<br>End   : 0x0000555555756000<br>Offset: 0x18<br>Perm  : rw-p<br>Name  : /home/aaron-wu/code/cpp_test/dl_test/show_me_poor</p></blockquote><p>此时GOT[3]的值被修改为<code>0x7ffff7bd161a </code>，而这对应的就是<code>show_me_the_money</code>的入口地址。下次再调用该函数时，可以在PLT表中直接跳转过去，而不需要再次装载。awesome！</p><p>首次动态装载的指令流程如下：</p><p><img src="/2022/01/10/ComputerArch-3-ELF/6.png" alt="6"></p><p>若再次调用<code>show_me_the_money</code>函数，则指令流程应当如下图所示：</p><p><img src="/2022/01/10/ComputerArch-3-ELF/7.png" alt="7"></p><h1>装载器</h1><h2 id="要求">要求</h2><p>装载器将可执行程序装载到内存中，但需要满足两个要求：</p><p>第一，可执行程序被加载后占用的<strong>内存空间应该是连续的</strong>。因为程序计数器（PC）是自增的，即一条条指令需要连续地存储在一起。</p><p>第二，允许同时<strong>加载多个程序</strong>，且程序间内存互不干扰。但是我们发现不同的程序中，编译得到的指令可能对应的是相同的内存地址，如果严格按照这个地址将程序加载到内存，则会出现内存地址冲突的情况。</p><h2 id="虚拟内存">虚拟内存</h2><p>那么如何做才能满足上面两个要求呢？</p><p>这里引入了<strong>虚拟内存映射</strong>的机制，我们把指令里用到的内存地址叫作<strong>虚拟内存地址</strong>（Virtual Memory Address），实际在内存硬件里面的空间地址，我们叫<strong>物理内存地址</strong>（Physical Memory Address）。在程序装载时，会在物理内存中找到一块连续的内存（<strong>内存分段</strong>，Memory Segmentation）分配给装载的程序，并将这段内存的地址与程序指令里指定的地址建立一个映射关系，维护在一个映射表中（因为是连续的内存，所以只需要维护起始地址和内存空间大小即可）。这样实际程序执行时，程序看到的只是虚拟内存地址，即使虚拟内存地址与其他程序相同，但通过映射表找到的是不同的的物理内存地址，就能正确取指令然后执行。分段的示意图如下：</p><p><img src="/2022/01/10/ComputerArch-3-ELF/4.webp" alt="4"></p><h2 id="内存交换">内存交换</h2><p>内存分段虽然解决了程序本身不需要关心具体的物理内存地址的问题，但也引入<strong>内存碎片</strong>（Memory Fragmentation）的问题。一个内存碎片的例子如下图所示：</p><p><img src="/2022/01/10/ComputerArch-3-ELF/5.webp" alt="5"></p><p>内存碎片问题可以通过引入<strong>内存交换</strong>（Memory Swapping）机制来解决。所谓内存交换就是将上图中256MB的内存写回硬盘上，再重新读回内存。不过读回来时，不再读回原位置，而是紧挨着前面已被占用的512MB的内存。这样就可以消除碎片，有了新的连续的256M内存空间供新的程序使用。linux系统装机时，会有给swap硬盘分区，就是专门为内存交换分配的区域。</p><h2 id="内存分页">内存分页</h2><p>但是内存交换也是有问题的，就是硬盘的访问速度是要比内存慢很多的，如果内存交换的内存空间很大，就会导致 程序卡顿。那么如果能让内存交换时写回磁盘和重新装载的数据更少一些，就可以解决这个问题。于是现代计算机的内存管理中引入了<strong>内存分页</strong>（Paging）机制。</p><p><strong>和分段这样分配一整段连续的空间给到程序相比，分页是把整个物理内存空间切成一段段固定尺寸的大小</strong>。而对应的程序所需要占用的虚拟内存空间，也会同样切成一段段固定尺寸的大小。这样一个连续并且尺寸固定的内存空间，我们叫<strong>页</strong>（Page）。从虚拟内存到物理内存的映射，不再是拿整段连续的内存的物理地址，而是按照一个一个页来的。页的尺寸一般远远小于整个程序的大小。在 Linux 下通常设置成 4KB。通过<code>getconf PAGE_SIZE</code>命令查看。</p><p>由于内存空间都是预先划分好的，也就没有了不能使用的碎片，而只有被释放出来的很多 4KB 的页。这时候内存交换存在的意义更多是为了将不活跃的内存占用交换到硬盘，以释放内存，从而更有效的利用内存。即使内存空间真的不够了，需要让现有的、正在运行的其他程序，通过内存交换释放出一些内存的页出来，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，以免程序执行被内存交换的过程给卡住。</p><p>更进一步地，分页的方式使得我们在加载程序的时候，不再需要一次性都把程序加载到物理内存中。我们完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不真的把页加载到物理内存里，而是只在程序运行中，需要用到对应虚拟内存页里面的指令和数据时，再加载到物理内存里面去。</p><p>实际上，我们的操作系统，的确是这么做的。当要读取特定的页，却发现数据并没有加载到物理内存里的时候，就会触发一个来自于 CPU 的<strong>缺页错误</strong>（Page Fault）。我们的操作系统会捕捉到这个错误，然后将对应的页，从硬盘上里读取出来，加载到物理内存里。这种方式，使得我们可以运行那些远大于我们实际物理内存的程序。同时，这样一来，任何程序都不需要一次性加载完所有指令和数据，只需要加载当前需要用到就行了。</p><p>通过虚拟内存、内存交换和内存分页这三个技术的组合，我们最终得到了一个让程序不需要考虑实际的物理内存地址、大小和当前分配空间的解决方案。任何一个程序，都只需要把内存当成是一块完整而连续的空间来直接使用。</p><h1>参考</h1><p>[1] <a href="https://time.geekbang.org/column/intro/100026001?tab=catalog">深入浅出计算机组成原理</a></p><p>[2] <a href="https://zhuanlan.zhihu.com/p/130271689">深入理解GOT表和PLT表</a></p><p>[3] <a href="https://www.jianshu.com/p/0ac63c3744dd">GOT表和PLT表</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compile </tag>
            
            <tag> Assemble </tag>
            
            <tag> Link </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [16]：分组网络GroupConv</title>
      <link href="/2021/12/29/AI-Algorithm-16-GroupConv/"/>
      <url>/2021/12/29/AI-Algorithm-16-GroupConv/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>分组卷积（Group convolution），最早在AlexNet中出现，由于当时的硬件资源有限，训练AlexNet时卷积操作不能全部放在同一个GPU处理，因此作者把feature maps分给多个GPU分别进行处理，最后把多个GPU的结果进行融合。Alex认为group conv的方式能够增加 filter之间的对角相关性,而且能够减少训练参数,不容易过拟合,这类似于正则的效果。</p><h1>原理</h1><p>普通卷积和分组卷积的示意图如下所示：</p><p><img src="/2021/12/29/AI-Algorithm-16-GroupConv/1.png" alt="1"></p><p>按照NCHW排布来看，对普通卷积而言：</p><ul><li>单个输入feature map尺寸：$ 1 \times c_1 \times H_{in} \times W_{in}$</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">c_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>个卷积核的尺寸：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub><mo>×</mo><msub><mi>c</mi><mn>1</mn></msub><mo>×</mo><msub><mi>h</mi><mn>1</mn></msub><mo>×</mo><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_2 \times c_1 \times h_1 \times w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>单个输出feature map尺寸：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><msub><mi>c</mi><mn>2</mn></msub><mo>×</mo><msub><mi>H</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>×</mo><msub><mi>W</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">1 \times c_2 \times H_{out} \times W_{out}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>参数量（假设无bias）：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub><mo>∗</mo><msub><mi>c</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>h</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_2 * c_1 * h_1 * w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6153em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6153em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>运算量（仅考虑浮点乘法）：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub><mo>∗</mo><msub><mi>H</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>∗</mo><msub><mi>W</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>∗</mo><msub><mi>c</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>h</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_2*H_{out}*W_{out}*c_1*h_1*w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6153em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6153em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>对分为g组的分组卷积（上图中g=2）而言：</p><ul><li>每组的输入feature map尺寸：$ 1 \times c_1/g \times H_{in} \times W_{in}$</li><li>每组的卷积核尺寸：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><mi>g</mi><mo>×</mo><msub><mi>c</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><mi>g</mi><mo>×</mo><msub><mi>h</mi><mn>1</mn></msub><mo>×</mo><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_2/g \times c_1/g \times h_1 \times w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>每组的输出feature map尺寸：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><msub><mi>c</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><mi>g</mi><mo>×</mo><msub><mi>H</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>×</mo><msub><mi>W</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">1 \times c_2/g \times H_{out} \times W_{out}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，最终各组输出concat到一起</li><li>g组总参数量（假设无bias）：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><mi>g</mi><mo>∗</mo><msub><mi>c</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><mi>g</mi><mo>∗</mo><msub><mi>h</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>w</mi><mn>1</mn></msub><mo>∗</mo><mi>g</mi><mo>=</mo><msub><mi>c</mi><mn>2</mn></msub><mo>∗</mo><msub><mi>c</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><mi>g</mi><mo>∗</mo><msub><mi>h</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_2/g * c_1/g * h_1 * w_1 * g = c_2 * c_1/g * h_1 * w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6153em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6153em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>g组总运算量（仅考虑浮点乘法）：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><mi>g</mi><mo>∗</mo><msub><mi>H</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>∗</mo><msub><mi>W</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>∗</mo><msub><mi>c</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><mi>g</mi><mo>∗</mo><msub><mi>h</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>w</mi><mn>1</mn></msub><mo>∗</mo><mi>g</mi><mo>=</mo><msub><mi>c</mi><mn>2</mn></msub><mo>∗</mo><msub><mi>H</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>∗</mo><msub><mi>W</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>∗</mo><msub><mi>c</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><mi>g</mi><mo>∗</mo><msub><mi>h</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_2/g*H_{out}*W_{out}*c_1/g*h_1*w_1*g=c_2*H_{out}*W_{out}*c_1/g*h_1*w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6153em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6153em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>可以看到，得到相同尺寸的output feature map，分组卷积的参数量和运算量只有普通卷积的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">1/g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>，是一种更高效的卷积方式。</p><p>从上面也能看出，分组个数g要同时能被输入通道数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和输出通道数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">c_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>整除。</p><h1>参考</h1><p>[1] <a href="https://arxiv.org/pdf/1605.06489.pdf">Deep Roots: Improving CNN Efficiency with Hierarchical Filter Groups</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> GroupConv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [15]：可形变卷积网络DeformConv</title>
      <link href="/2021/12/29/AI-Algorithm-15-DeformConv/"/>
      <url>/2021/12/29/AI-Algorithm-15-DeformConv/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p><a href="https://arxiv.org/pdf/1703.06211.pdf">可形变卷积网络</a>（Deformable Convlution Networks, <strong>DCN</strong>）来自MSRA的研究团队提出的卷积结构。DCN的核心思想是将CNN中固定形状的卷积过程改变成了能适应物体形状的卷积过程，引入了学习空间几何形变的能力，来解决传统CNN对物体几何形变适应性差的问题。</p><h1>基本思想</h1><p>传统CNN在featureMap上做卷积操作时，它的感受野是固定的正方形形状。DCN的做法是对感受野上的每个点加一个<strong>偏移量</strong>，偏移的大小也通过学习获得，偏移后的感受野不再是固定矩形，而是与物体的实际形状相匹配。这样做的好处是无论物体形状怎么变，卷积的区域始终覆盖在物体形状的周围。如下图所示：</p><p><img src="/2021/12/29/AI-Algorithm-15-DeformConv/1.png" alt="1"></p><h1>网络结构</h1><p>DCN的网络结构如下图所示：</p><p><img src="/2021/12/29/AI-Algorithm-15-DeformConv/2.png" alt="2"></p><p>如上图所示，DCN的计算大致分两步：上方的conv层的输入为input feature map，用来学习offsets信息；下方的deformable conv层的输入为input feature map和offsets，先根据offsets插值出感受野的值，再进行卷积。</p><h1>公式表示</h1><p>普通卷积的公式表示如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><msub><mi>p</mi><mi>n</mi></msub><mo>∈</mo><mi mathvariant="normal">ℜ</mi></mrow></munder><mi>W</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>⋅</mo><mrow><mi>X</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mn>0</mn></msub><mo>+</mo><msub><mi>p</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">y(p_0) = \sum_{p_n \in \real}W(p_n)\cdot{X(p_0+p_n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4882em;vertical-align:-1.4382em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mtight">ℜ</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4382em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">ℜ</mi></mrow><annotation encoding="application/x-tex">\real</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">ℜ</span></span></span></span>为卷积核的感受野，以dilation=1的<code>3x3</code>卷积核为例，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">ℜ</mi><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\real = \{(-1,-1),(-1,0),...,(0,1),(1,1)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">ℜ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{(</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)}</span></span></span></span>；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">p_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为输出feature map上的位置，即卷积核的中心点；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">p_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为卷积核中每一点相对中心点的偏移量，是整数。</p><p>DeformConv的公式表示如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><msub><mi>p</mi><mi>n</mi></msub><mo>∈</mo><mi mathvariant="normal">ℜ</mi></mrow></munder><mi>W</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>⋅</mo><mrow><mi>X</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mn>0</mn></msub><mo>+</mo><msub><mi>p</mi><mi>n</mi></msub><mo>+</mo><mi mathvariant="normal">Δ</mi><msub><mi>p</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">y(p_0) = \sum_{p_n \in \real}W(p_n)\cdot{X(p_0+p_n+\Delta p_n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4882em;vertical-align:-1.4382em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mtight">ℜ</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4382em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></span></p><p>在普通卷积公式基础上增加了一个偏移量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><msub><mi>p</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\Delta p_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，即上面提到的通过Conv层学习到的offsets，一般为小数。故需要通过插值(一般为双线性插值)来获得感受野中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mn>0</mn></msub><mo>+</mo><msub><mi>p</mi><mi>n</mi></msub><mo>+</mo><mi mathvariant="normal">Δ</mi><msub><mi>p</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X(p_0+p_n+\Delta p_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的值。</p><p>该研究团队后面又提出了DCN的改进版本<a href="https://arxiv.org/pdf/1811.11168.pdf">Deformable ConvNets v2</a>， V2认为感受野上的每个像素值对目标特征提取的贡献度是不一样的，因此引入了mask参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><msub><mi>m</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">\Delta m_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>来调节每个感受野值的权重。公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></munderover><msub><mi>W</mi><mi>k</mi></msub><mo>⋅</mo><mrow><mi>X</mi><mo stretchy="false">(</mo><mi>p</mi><mo>+</mo><msub><mi>p</mi><mi>k</mi></msub><mo>+</mo><mi mathvariant="normal">Δ</mi><msub><mi>p</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo>⋅</mo><mi mathvariant="normal">Δ</mi><msub><mi>m</mi><mi>k</mi></msub></mrow></mrow><annotation encoding="application/x-tex">y(p)=\sum_{k=1}^K W_k \cdot {X(p+p_k+\Delta p_k)\cdot\Delta m_k }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1304em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h1>推理框架支持情况</h1><p>目前主流的开源推理框架对deformable conv算子的支持情况如下表：</p><table><thead><tr><th><strong>推理框架</strong></th><th><strong>支持</strong></th><th><strong>实现方式</strong></th></tr></thead><tbody><tr><td>MNN</td><td>×</td><td>/</td></tr><tr><td>OpenPPL</td><td>√</td><td>im2col+gemm</td></tr><tr><td>NCNN</td><td>×</td><td>/</td></tr><tr><td>TNN</td><td>×</td><td>/</td></tr><tr><td>OpenVINO</td><td>√</td><td>im2col+gemm</td></tr><tr><td>Torchvision</td><td>√</td><td>im2col+gemm</td></tr></tbody></table><h1>img2col</h1><p>img2col的本质是用空间换时间，将原本不连续的内存转换成连续的，网上分析的有很多，这里不再赘述。放个简单的示意图方便自己对照：</p><p><img src="/2021/12/29/AI-Algorithm-15-DeformConv/3.png" alt="3"></p><h1>GEMM</h1><p>这个前面聊过很多了，可以翻看<a href="https://no5-aaron-wu.github.io/2021/12/09/AI-Algorithm-12-GEMM/">这里</a>和<a href="https://no5-aaron-wu.github.io/2021/12/23/AI-Algorithm-14-GEMM-V2/">这里</a>。</p><h1>参考</h1><p>[1] <a href="https://arxiv.org/pdf/1703.06211.pdf">Deformable Convolutional Networks</a></p><p>[2] <a href="https://arxiv.org/pdf/1811.11168.pdf">Deformable ConvNets v2: More Deformable, Better Results</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DeformConv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [14]：GEMM进一步优化</title>
      <link href="/2021/12/23/AI-Algorithm-14-GEMM-V2/"/>
      <url>/2021/12/23/AI-Algorithm-14-GEMM-V2/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>在<a href="https://no5-aaron-wu.github.io/2021/12/09/AI-Algorithm-12-GEMM/">上篇文章</a>中介绍了<a href="https://github.com/flame/how-to-optimize-gemm/wiki">how to optimize gemm</a>是如何优化GEMM算法的性能，但他最终的优化结果就是理论极限吗？显然不是，下面将在其基础上进一步探究GEMM性能优化的边界。</p><h1>测试环境</h1><blockquote><p>CPU：Intel Core i7 8700，3.2GHz主频，支持AVX2，FMA3，Coffee Lake（Skylake）架构</p><p>操作系统：WSL-Ubuntu-18.04</p><p>L1 Cache Size：32KB</p><p>Cache Line Size：64B</p><p>编译优化等级：O2</p></blockquote><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/1.jpg" alt="1"></p><h1>优化尝试</h1><h2 id="使用AVX2指令集">使用AVX2指令集</h2><p>从上面可以看到，我的CPU最高支持AVX2指令集，AVX2指令集的向量寄存器为256bit，可以同时处理4个双精度浮点数据，因此用AVX2指令替换SSE指令后，性能理论上可以提升2倍。代码见<a href="https://github.com/no5-aaron-wu/how-to-optimize-gemm/commit/b89f0fb6b40fb20e8f595a1544868f2e1172e174">这里</a>。注意需要在makefile中添加<code>-mavx</code>编译选项，性能变化如下图所示：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/1.png" alt="1"></p><p>从上图可以看出，性能提升接近预期值。</p><h2 id="指令全覆盖">指令全覆盖</h2><p>已实现的微内核中的向量的乘加计算和store操作的代码并没有写成Intrinsics指令形式（编译器可能会优化），尝试将所有代码均替换成Intrinsics指令形式，观察是否有性能提升。</p><p>仅改动乘加运算部分，性能有波动但无明显提升，这也说明了乘加操作编译器会自动优化，如下图：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/2.png" alt="2"></p><p>由于存在矩阵分块，所以原实现是将输出向量寄存器初始化为0，<code>4x4</code>的微内核（micro-kernel）计算结束后逐点累加到<code>C</code>矩阵的对应元素上，这显然不是很有效率。可以将<code>C</code>矩阵对应元素load到输出寄存器，微内核计算时直接累加，计算结束后通过<code>_mm256_storeu_pd</code>也可以一次store4个元素。代码看<a href="https://github.com/no5-aaron-wu/how-to-optimize-gemm/commit/b287179ee1d6276cd0faf016ca49da74ec0fe0f9">这里</a>，提升效果见下图：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/3.png" alt="3"></p><p>由于提升了访存效率，性能有提升是可以预见的。</p><h2 id="使用FMA指令">使用FMA指令</h2><p>AVX2加入了FMA指令，可以用一条指令<code>_mm256_fmadd_pd</code>完成乘加操作。注意需要在makefile中添加<code>-mfma</code>编译选项，代码见<a href="https://github.com/no5-aaron-wu/how-to-optimize-gemm/commit/e5fe340ff38d990073d62ad4464613adc0841b79">这里</a>。性能变化如下图所示：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/4.png" alt="4"></p><h2 id="节约寄存器">节约寄存器</h2><p>这里用于加载B矩阵元素（并进行广播）的向量寄存器用了4个，其实是可以只用一个寄存器加载，计算用过之后再加载下一个元素。代码见<a href="https://github.com/no5-aaron-wu/how-to-optimize-gemm/commit/e5586656d0ef42b54656859de7520356af3c7415">这里</a>性能实测结果如下图所示：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/7.png" alt="7"></p><p>结果如预期，性能没有明显变化。这里如果就这样结束讨论，就是在第一层，其实还有第二层和第三层（乃至大气层）。结合大佬的<a href="https://zhuanlan.zhihu.com/p/426127316">这个文章</a>，我们能略窥一二。</p><h3 id="Skylake指令集流水线">Skylake指令集流水线</h3><p>这里先丢出一张我之前根本不会看也“不会”看的<a href="https://en.wikichip.org/wiki/intel/microarchitectures/skylake_(client)">图</a>：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/6.png" alt="6"></p><p>当然我现在仍然只能看懂一部分，如果看过我<a href="https://no5-aaron-wu.github.io/2021/12/22/ComputerArch-2-ILP/">这篇文章</a>或者了解常用的5级流水线的朋友，应该是能跟我一样有点意识的，这张图其实对应了Skylake架构指令集流水线的几个阶段的。其中<strong>Front End</strong>就对应了指令IF和ID阶段，<strong>Execution Engine</strong>就对应指令EX阶段，<strong>Memory Subsystem</strong>就对应指令MEM阶段。当然其中有更多比通用5级流水线更复杂的设计，这里不多做展开（其实是我不懂）。这里只说一些我知道的，或者说在我的CPU宇宙中能够逻辑自洽的东西。</p><h3 id="多发射">多发射</h3><p>这里先看一下<strong>EUs</strong>这部份，这里有Port1-Port7共8个端口，其中Port0和Port1各有一个<strong>FP FMA</strong>单元，这也从硬件上解释了为什么FMA指令的<a href="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#expand=3416&amp;ig_expand=6240,4302,4376,4302,4375,4229,587,133,4260,6846,6917,3175,589,3175&amp;techs=AVX,FMA&amp;text=fmadd">吞吐量为2</a>，即可以做到双发射的原因。同样也可以看到Port2和Port3也各有一个<strong>Load Data</strong>单元，这说明加载数据的操作也是可以做到双发射的，且与FMA的双发射可以并行。</p><h3 id="物理寄存器和重命名">物理寄存器和重命名</h3><p>我们知道<a href="https://www.chessprogramming.org/AVX">AVX指令集</a>有16个256bit位宽的浮点运算YMM逻辑寄存器（或者叫体系结构寄存器），这些寄存器是我们在编程时可以直接访问的逻辑上的寄存器。但是实际的物理寄存器是远远多于16个的，这在上图中也有体现（EUs上面的Scheduler中有个粉色框写着<strong>Vector Physical Register File（168 Register）</strong>，但是不确定这168是否都可以给浮点运算用）。而逻辑寄存器到物理寄存器的映射就是寄存器重命名（上图中也有体现）。</p><p>那么为什么要这么做呢？<a href="https://zh.wikipedia.org/wiki/%E5%AF%84%E5%AD%98%E5%99%A8%E9%87%8D%E5%91%BD%E5%90%8D">Wiki</a>给出了答案我觉得就讲的很好。首先上结论，重命名是为了解决指令<a href="https://zh.wikipedia.org/wiki/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8C">乱序执行</a>（或叫乱序发射）数据冲突（或者叫数据冒险）问题的。编译器会尽可能检查可能存在的数据冲突，把不同的寄存器分配给可能产生数据冲突的指令。但是编译器可以用的逻辑寄存器的数量是有限的（16个），总会出现不够分的情况，这时侯就需要通过硬件实现的寄存器重命名将不同指令中的同一个逻辑寄存器映射不同的物理寄存器，以解决可能出现的数据冲突，从而在硬件层面为指令集增加并行能力。那为啥不直接用跟物理寄存器一样多的逻辑寄存器呢？首先是历史继承问题，老的CPU的物理寄存器没有现在多，未来也许会更多，总不能加一些物理寄存器就修改一次指令集，这不合理；其次是增加逻辑寄存器会导致指令集变大，code size相应的也会变大，超过L1 Instruction Cache的话就会导致Cache miss增加， 这更致命。</p><h3 id="回头看代码">回头看代码</h3><p>有了上面这些理解，那么这时再回看上面节约寄存器的这段微内核代码，是不是有了更多的想法。那好，让我们来猜测一下编译器优化和CPU执行时的行为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( p=<span class="number">0</span>; p&lt;k; p++ )&#123;</span><br><span class="line">    a_0p_a_3p_vreg.v = _mm256_load_pd( (<span class="keyword">double</span> *) a );</span><br><span class="line"></span><br><span class="line">    b_pi_vreg.v = _mm256_broadcast_sd( (<span class="keyword">double</span> *) b );       <span class="comment">/* load and broadcast */</span></span><br><span class="line">    c_00_c_30_vreg.v = _mm256_fmadd_pd(a_0p_a_3p_vreg.v, b_pi_vreg.v, c_00_c_30_vreg.v);</span><br><span class="line"></span><br><span class="line">    b_pi_vreg.v = _mm256_broadcast_sd( (<span class="keyword">double</span> *) (b+<span class="number">1</span>) );   <span class="comment">/* load and broadcast */</span></span><br><span class="line">    c_01_c_31_vreg.v = _mm256_fmadd_pd(a_0p_a_3p_vreg.v, b_pi_vreg.v, c_01_c_31_vreg.v);</span><br><span class="line"></span><br><span class="line">    b_pi_vreg.v = _mm256_broadcast_sd( (<span class="keyword">double</span> *) (b+<span class="number">2</span>) );   <span class="comment">/* load and broadcast */</span></span><br><span class="line">    c_02_c_32_vreg.v = _mm256_fmadd_pd(a_0p_a_3p_vreg.v, b_pi_vreg.v, c_02_c_32_vreg.v);</span><br><span class="line"></span><br><span class="line">    b_pi_vreg.v = _mm256_broadcast_sd( (<span class="keyword">double</span> *) (b+<span class="number">3</span>) );   <span class="comment">/* load and broadcast */</span></span><br><span class="line">    c_03_c_33_vreg.v = _mm256_fmadd_pd(a_0p_a_3p_vreg.v, b_pi_vreg.v, c_03_c_33_vreg.v);</span><br><span class="line"></span><br><span class="line">    a += <span class="number">4</span>;</span><br><span class="line">    b += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的汇编代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">130:c5 fd 28 06          vmovapd (%rsi),%ymm0</span><br><span class="line">134:48 83 c6 20          add    $0x20,%rsi</span><br><span class="line">138:48 83 c1 20          add    $0x20,%rcx</span><br><span class="line">13c:c4 e2 7d 19 69 e0    vbroadcastsd -0x20(%rcx),%ymm5</span><br><span class="line">142:c4 e2 fd b8 e5       vfmadd231pd %ymm5,%ymm0,%ymm4</span><br><span class="line">147:c4 e2 7d 19 69 e8    vbroadcastsd -0x18(%rcx),%ymm5</span><br><span class="line">14d:c4 e2 fd b8 dd       vfmadd231pd %ymm5,%ymm0,%ymm3</span><br><span class="line">152:c4 e2 7d 19 69 f0    vbroadcastsd -0x10(%rcx),%ymm5</span><br><span class="line">158:c4 e2 fd b8 d5       vfmadd231pd %ymm5,%ymm0,%ymm2</span><br><span class="line">15d:c4 e2 7d 19 69 f8    vbroadcastsd -0x8(%rcx),%ymm5</span><br><span class="line">163:48 39 c6             cmp    %rax,%rsi</span><br><span class="line">166:c4 e2 fd b8 cd       vfmadd231pd %ymm5,%ymm0,%ymm1</span><br><span class="line">16b:75 c3                jne    130 &lt;AddDot4x4+0x60&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里提到的发射如果没有特殊标注，均指狭义的发射，即为指令从ID到EX阶段。</p></blockquote><p>首先，我们现在知道了Skylake CPU是具备在一个时钟周期内同时发射2条FMA指令和2条Load指令的。查阅手册可知Skylake架构下<code>_mm256_load_pd</code>和<code>_mm256_broadcast_sd</code>的延迟都是7，<code>_mm256_fmadd_pd</code>的延迟是4。关于Intel Intrinsics Guide中延迟概念的解读可能还存在一些<a href="https://stackoverflow.com/questions/35859449/why-are-some-haswell-avx-latencies-advertised-by-intel-as-3x-slower-than-sandy-b">歧义</a>（不清楚这个latency是否包含IF和ID阶段），我这里就把它当作指令走完一整条流水线的时钟周期。假设IF和ID共占2个时钟周期，即Load指令发射后延迟为5，FMA指令发射后延迟为2。那么有以下两种推测：</p><ul><li>如果按照顺序发射来理解，经过两个时钟周期的IF和ID，第3个时钟周期开始时发射了两条Load指令和两条FMA指令。在不考虑数据转发的情况下，5个时钟周期后，第1条FMA指令的数据才准备好，这期间FMA指令已经完成了IF和ID阶段，但由于数据冲突是处于发射停顿状态，一旦数据就位，再过2个时钟周期才能完成第1条FMA指令的计算。即9个周期后，<code>ymm5</code>寄存器的值才会被拿走用掉，此时<code>ymm5</code>的WAR数据冲突才会解除，才可以开始发射第3条load指令，然后还要等5+2个周期才能完成第2条FMA指令的计算。后面依此类推，这样子的并行度就不是很高。</li><li>如果按照乱序发射+重命名来理解，则如下图：</li></ul><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/8.png" alt="8"></p><ul><li>第3个时钟周期发射第1/2条Load指令，第4个时钟周期发射第3/4条Load指令，后面依此类推。第1条FMA指令要停顿到第7个周期后才完成发射，这样子第3/4条Load指令实际上是乱序到第1条FMA指令前发射的。这时如果没有重命名，对逻辑寄存器<code>ymm5</code>的再次写入就会有WAW数据冲突，所以需要重命名将<code>ymm5</code>映射到不同的物理寄存器来完成发射。这样子FMA指令除了第一次5个周期的发射停顿外，后面的循环中便不会产生停顿，但会存在单发射（其实也是一种停顿，如图中FMA指令第三行，5个Load指令给4个FMA指令喂数据，必然会出现供应不上的时刻，即瓶颈为Load指令，而非FMA指令）。</li></ul><p>所以这样只使用一个逻辑寄存器Load数据，穿插在FMA指令之间的代码，跟之前用5个逻辑寄存器一次Load完所有参与计算的数据，再执行FMA指令，在指令发射层面看是一样的。这才是为什么<strong>节约寄存器</strong>的修改并没有影响到性能的真正原因。</p><h2 id="寄存器分块">寄存器分块</h2><p>从上面分析中可以看到，上述FMA计算过程还并没有把流水线的各流水级填满。可以查到Skylake架构下<code>_mm256_fmadd_pd</code>指令的延迟为4（可以理解为4级流水线），吞吐量为2（双发射）。也就是说至少要8条FMA指令才能将流水级填满。也就是说<code>4x4</code>的微内核（仅需要4条FMA指令）并不是最优解。</p><p>那么问题来了？将微内核改成<code>4x8</code>或者<code>8x4</code>就是最优解嘛？两者性能是相当的嘛？更大的微内核尺寸会更好还是更坏？接下来边做实验边分析。</p><h3 id="8x4向量化"><code>8x4</code>向量化</h3><p><code>8x4</code>向量化后微内核中的一轮运算对应的寄存器分块情况如下图所示：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/5.png" alt="5"></p><p>其中用于累加<code>C</code>矩阵输出结果的向量寄存器为<code>2x4</code>个，用于加载<code>A</code>矩阵数据的寄存器为2个，用于加载<code>B</code>矩阵数据并广播的为1个。代码见<a href="https://github.com/no5-aaron-wu/how-to-optimize-gemm/commit/99f3aac1efe5474291459ba642ae243b1c6bca67">这里</a>，注意一点就是除了微内核<code>AddDot8x4</code>外，A矩阵的Pack函数<code>PackMatrixA</code>也要做对应的修改。性能变化如下图所示：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/9.png" alt="9"></p><p>如预期，性能是有提升的。这里简单再分析一下，在微内核中，共有6条Load指令给8条FMA指令喂数据，不会出现喂不饱的情况。8条FMA指令进行双发射可以填满4级流水线。理论上，这里的寄存器分块方式基本上就可以达到最优了。真的是这样嘛？</p><h3 id="内存对齐">内存对齐</h3><p>在看更多的例子之前，先解决一个小问题。</p><p>在上面的例子中，我们对A矩阵的Load操作是使用的<code>_mm256_load_pd</code>，这其实是有风险的。<code>_mm256_load_pd</code>要求内存是32字节对齐的，当没有对齐时，会报<code>Segmentation fault</code>错误。解决方法有两个：</p><ul><li>分配/释放内存时使用<code>_mm_malloc</code>和<code>_mm_free</code>，<code>_mm_malloc</code>的第二参数可以指定对齐的字节数。我们进一步也可以把对C矩阵的Load指令也改为<code>_mm256_load_pd</code>。代码看<a href="https://github.com/no5-aaron-wu/how-to-optimize-gemm/commit/0e6d2d30897eb38bd675e715659c11f6b56edb8f">这里</a>，注意外部分配内存也要修改，实测性能有略微提升，但不明显，见下图：</li></ul><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/12.png" alt="12"></p><ul><li>使用<code>_mm256_loadu_pd</code>，该load操作不要求内存对齐，但相应的访存性能会下降。实测确实会影响最终性能，见下图：</li></ul><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/11.png" alt="11"></p><p>后面我们还是选择<code>_mm256_loadu_pd</code>这种方式进行接下来的实验，因为我们没有实现对不能整除部分（corner case）的特殊处理，严格对齐的方式对输入尺寸，分块尺寸和微内核尺寸就都有要求，否则就会出错。这里方便做对比，就采用非对齐方式。</p><h3 id="12x4向量化"><code>12x4</code>向量化</h3><p>大佬的<a href="https://zhuanlan.zhihu.com/p/426127316">这个文章</a>是选用的<code>4x3</code>寄存器分块方式（行优先排布），对应到我们这边就是<code>12x4</code>向量化（即<code>3x4</code>寄存器分块），示意图如下图所示：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/10.png" alt="10"></p><p>其中用于累加<code>C</code>矩阵输出结果的向量寄存器为<code>3x4</code>个，用于加载<code>A</code>矩阵数据的寄存器为3个，用于加载<code>B</code>矩阵数据并广播的为1个。刚好用完16个YMM逻辑寄存器（其实用超了应该也没关系，有重命名机制）。代码见<a href="https://github.com/no5-aaron-wu/how-to-optimize-gemm/commit/d293e99676677ec331f45b40fe918fc3caad00b9">这里</a>，注意这里代码中将测试矩阵大小和矩阵分块大小都做了调整，以便能够匹配微内核的尺寸。性能变化情况如下：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/13.png" alt="13"></p><p>问题就出现了，这跟我们的预期不一样啊。我们之前认为8条FMA指令就可以就可以填满4级流水线的，但是增加到12条FMA指令，性能居然还有进一步提升。该怎么解释呢？</p><p>首先我们这里的测试环境比<a href="https://zhuanlan.zhihu.com/p/426127316">原文</a>中的环境要更加复杂，涉及到矩阵分块和局部Pack，即便分块后的矩阵也肯定会超过L1 Cache Size的，访存性能这块肯定会有影响；其次我的用Intrincisc实现，原文中是汇编实现，这块可能也会有影响；第三，我甚至怀疑Skylake的FMA指令不是4级流水线，于是将原文代码修改成<code>4x2</code>寄存器分块方式再次测试，测试代码见<a href="https://github.com/no5-aaron-wu/sgemm_hsw/commit/198b769589f4e6a4f8b852905c279830039d4b3c">这里</a>，发现GFLOPS也基本上能拉满，所以并不是这一块的原因。</p><p>至于具体是哪方面原因导致的其实很难分析，也尝试过将micro-kernel单独拿出来，并且将矩阵大小控制在L1 Cache Size以内去测性能，发现也是两种寄存器分块方式的性能也是有差异的。以我现在的认知，不知道该怎么解释了，先留个坑，后面看能不能填上。</p><h3 id="8x5向量化"><code>8x5</code>向量化</h3><p><code>8x5</code>向量化，即<code>2x5</code>寄存器分块，其中用于累加<code>C</code>矩阵输出结果的向量寄存器为<code>2x5</code>个，用于加载<code>A</code>矩阵数据的寄存器为2个，用于加载<code>B</code>矩阵数据并广播的为1个。示意图如下图所示：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/14.png" alt="14"></p><p>代码见<a href="https://github.com/no5-aaron-wu/how-to-optimize-gemm/commit/7c15f7f068aabcd31c12b256fed224007f3f728f">这里</a>，其他不多说，直接看性能变化：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/15.png" alt="15"></p><p>这！？继续挖坑吧。</p><h2 id="循环展开">循环展开</h2><p>注意到<a href="https://github.com/pigirons/sgemm_hsw/blob/master/sgemm_kernel_x64_fma.S">sgemm_hsw</a>是在一次循环中处理了4次<code>k++</code>的数据的，相当于循环展开。这会对性能有帮助嘛？我们也试试看。代码见<a href="https://github.com/no5-aaron-wu/how-to-optimize-gemm/commit/3e8e571e57c9e439f41b9bf79f1134247ca74af4">这里</a>，性能变化情况如下图：</p><p><img src="/2021/12/23/AI-Algorithm-14-GEMM-V2/16.png" alt="16"></p><p>循环展开确实会有性能提升，循环展开可以<a href="https://www.cnblogs.com/pangchunlei/p/12427281.html">减少分支预测错误，减少条件跳转指令</a>（条件跳转指令的存在会影响乱序发射），从而提升性能。</p><p>前面不同的寄存器分块方式性能不同也可能有一部分这个原因。</p><h1>总结</h1><ol><li>真正要优化好任意尺寸的GEMM运算的性能，要考虑的东西包括但不限于SIMD，访存，Cache，流水线并行，数据冒险，控制冒险等等；</li><li>寄存器分块那一部分还是有一些搞不清楚的问题，后续有了新的感悟再来补充吧。</li></ol><h1>参考</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/426127316">https://zhuanlan.zhihu.com/p/426127316</a></p><p>[2] <a href="https://zhuanlan.zhihu.com/p/383115932">https://zhuanlan.zhihu.com/p/383115932</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> GEMM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构 [2]：指令级并行（ILP）与数据级并行（DLP）</title>
      <link href="/2021/12/22/ComputerArch-2-ILP/"/>
      <url>/2021/12/22/ComputerArch-2-ILP/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>指令级并行（ ILP, Instruction Level Parallelism）是指利用流水级并行和多指令发射等方式提高程序执行的并行度；</p><p>数据级并行（DLP, Data Level Parallelism）是指处理器能够同时处理多条数据的并行方式，即SIMD。</p><p>本文将对上述几种程序优化方式实现简单的测试样例进行性能提升的验证。</p><h1>理论基础</h1><h2 id="周期">周期</h2><p><strong>指令周期</strong>（Instruction Cycle）：完成一条指令的时间；</p><p><strong>机器周期</strong>（Machine Cycle，又称CPU周期）：完成一条指令中单个基本操作（取指，译码，执行等）的时间；</p><p><strong>时钟周期</strong>（Clock Cycle）：主频的倒数；</p><p>三者之间的关系大致如下：</p><p><img src="/2021/12/22/ComputerArch-2-ILP/1.webp" alt="1"></p><h2 id="经典5级流水线">经典5级流水线</h2><p>经典的5级流水线（现代CPU不止5级流水线，随着技术发展到今天，你日常用的手机 ARM 的 CPU 或者 Intel Core的CPU，流水线的深度是 14 级（<s>存疑，暂无数据支撑</s>找到了，看<a href="https://www.lighterra.com/papers/modernmicroprocessors/">这里</a>））如下图所示：</p><p><img src="/2021/12/22/ComputerArch-2-ILP/1.png" alt="1"></p><ul><li><p><strong>指令提取周期（IF）</strong>：送出PC（程序计数器），并将指令从存储器提取到指令寄存器中（IR）；将PC递增4，以完成下一顺序指令的寻址。</p></li><li><p><strong>指令译码/寄存器提取周期（ID）</strong>：对指令进行译码；并访问通用寄存器组（寄存器堆），读出所需操作数，放入临时寄存器；</p></li><li><p><strong>执行/实际地址周期（EX）</strong>：不同指令所进行的操作不同。</p><ul><li><p><em>load和store指令</em>：ALU把指令中所指定的寄存器的内容与偏移量相加，形成访存有效地址。</p></li><li><p><em>寄存器-寄存器ALU指令</em>：ALU按照操作码指定的操作对从通用寄存器组中读出的数据进行运算。</p></li><li><p><em>寄存器-立即数ALU指令</em>：ALU按照操作码指定的操作对从通用寄存器组中读出的操作数和指令中给出的立即数进行运算。</p></li><li><p><em>分支指令</em>：ALU把指令中给出的偏移量与PC值相加，形成转移目标的地址。同时，对在前一个周期读出的操作数进行判断，确定分支是否成功。</p></li></ul></li><li><p><strong>寄存器访问/分支完成计算（MEM）</strong>：不同指令所进行的操作不同。该周期处理的指令只有load、store和分支指令。其它类型的指令在此周期不做任何操作。</p><ul><li><p><em>load指令</em>：用上一个周期计算出的有效地址从存储器中读出相应的数据；</p></li><li><p><em>store指令</em>：把指定的数据写入这个有效地址所指出的存储器单元。</p></li><li><p><em>分支指令</em>：分支“成功”，就把转移目标地址送入PC，分支指令执行完成。</p></li></ul></li><li><p><strong>写回周期（WB）</strong>：不同指令所进行的操作不同。ALU运算指令和load指令在这个周期把结果数据写入通用寄存器组。</p><ul><li><em>ALU运算指令</em>：结果数据来自ALU。</li><li><em>load指令</em>：结果数据来自存储器。</li></ul></li></ul><h2 id="流水线为什么不是越长越好？">流水线为什么不是越长越好？</h2><p>因为增加流水线深度是有性能代价的。</p><p><img src="/2021/12/22/ComputerArch-2-ILP/2.webp" alt="2"></p><p>在流水线中，我们用来同步时钟周期的，是流水线级而不再是整条指令。所以每个流水线级的输出都要放到流水线寄存器（Pipeline Register）中，然后下个时钟周期，交于下一级流水线级进行处理。</p><p>所以每增加一级流水线级，就会多一次写入/读取流水线寄存器的操作，尽管这个过程相比流水线级本身的操作时间要快的多，但无脑的增加流水线的深度，会导致这一过程在整条指令时间消耗中所占的比例越来越大。其次，流水线深度的增加，还会导致冒险问题更难解决，从而导致吞吐量（IPC，Instruction Per Cycle，为CPI，Cycle Per Instruction的倒数）很难达到设计的最大值。因此，应当合理的设计流水线级数，在流水线深度和流水线寄存器overhead间做一定的trade-off。</p><h1>测试用例</h1><h2 id="测试环境">测试环境</h2><p>平台：NVIDIA TX2，CPU Cortex A57，ArmV8架构，支持NEON Advanced SIMD，支持<a href="https://developer.arm.com/architectures/instruction-sets/intrinsics/">NEON Intrinsics</a>，支持SuperScalar（超标量，又称指令多发射）</p><p>线程：单线程，不涉及线程级并行（TLP, Thread Level Parallelism）</p><p>编译器优化：O3</p><h2 id="测试运算量">测试运算量</h2><p>测试用例将会计算如下公式所示的操作：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mi>t</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mspace width="1em"><mi>t</mi><mo>=</mo><mn>0</mn></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>f</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>f</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mspace width="1em"><mi>t</mi><mo>&gt;</mo><mn>0</mn></mspace></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f_t(x) = \begin{cases}1 \quad t = 0 \\f_{t-1}(x) + f_{t-1}(x) * g(x) \quad t &gt; 0 \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>在本例中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x \in [0, 10^7)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t \in [0, 10^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6542em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，即对两个长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">10^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span>的buffer执行乘累加运算，每个元素循环<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>次，运算量为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>（1G）<a href="https://no5-aaron-wu.github.io/2021/12/09/ComputerArch-1-OPS/">MACs</a>。</p><h2 id="基础实现">基础实现</h2><p>无任何优化的C++代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OptLevel0</span><span class="params">(<span class="keyword">const</span> <span class="keyword">float</span> *input, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">float</span> *output, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">const</span> <span class="keyword">int</span> size, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">const</span> <span class="keyword">int</span> loop_cnt)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        output[i] = <span class="number">1.0f</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; loop_cnt; ++k) &#123;</span><br><span class="line">            output[i] += output[i] * input[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>objdump -d</code>得到反汇编代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000000d08 &lt;_Z9OptLevel0PKfPfii&gt;:</span><br><span class="line">     d08:7100005f cmpw2, #0x0</span><br><span class="line">     d0c:5400024d b.led54 &lt;_Z9OptLevel0PKfPfii+0x4c&gt;</span><br><span class="line">     d10:d2800005 movx5, #0x0                   // #0</span><br><span class="line">     d14:1e2e1002 fmovs2, #1.000000000000000000e+00</span><br><span class="line">     d18:bc257822 strs2, [x1, x5, lsl #2]</span><br><span class="line">     d1c:7100007f cmpw3, #0x0</span><br><span class="line">     d20:5400014d b.led48 &lt;_Z9OptLevel0PKfPfii+0x40&gt;</span><br><span class="line">     d24:1e2e1000 fmovs0, #1.000000000000000000e+00</span><br><span class="line">     d28:52800004 movw4, #0x0                   // #0</span><br><span class="line">     d2c:d503201f nop</span><br><span class="line">     d30:bc657801 ldrs1, [x0, x5, lsl #2]</span><br><span class="line">     d34:11000484 addw4, w4, #0x1</span><br><span class="line">     d38:6b04007f cmpw3, w4</span><br><span class="line">     d3c:1f000020 fmadds0, s1, s0, s0</span><br><span class="line">     d40:bc257820 strs0, [x1, x5, lsl #2]</span><br><span class="line">     d44:54ffff61 b.ned30 &lt;_Z9OptLevel0PKfPfii+0x28&gt;  // b.any</span><br><span class="line">     d48:910004a5 addx5, x5, #0x1</span><br><span class="line">     d4c:6b05005f cmpw2, w5</span><br><span class="line">     d50:54fffe4c b.gtd18 &lt;_Z9OptLevel0PKfPfii+0x10&gt;</span><br><span class="line">     d54:d65f03c0 ret</span><br></pre></td></tr></table></figure><p>其中<code>d30</code>到<code>d44</code>为最内层循环代码的汇编代码，可以看到编译器优化并没有将乘加运算进行向量化，而是只采用了标量的融合乘加计算指令<code>fmadd</code>，一条指令只进行一次浮点乘加运算，基本没有加速。</p><p><strong>实测性能：4275ms</strong></p><h2 id="NEON向量化并行（SIMD）">NEON向量化并行（SIMD）</h2><p>使用NEON指令集对乘加运算向量化，这里没有写内联汇编，而是使用了NEON Intrinsics，ARMV8的向量寄存器为128位宽，一条指令可以处理4个浮点数据。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">OptLevel1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">float</span> *input, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">float</span> *output, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">const</span> <span class="keyword">int</span> size, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">const</span> <span class="keyword">int</span> loop_cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size_div = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size / size_div; ++i) &#123;</span><br><span class="line">        <span class="keyword">float32x4_t</span> a = <span class="built_in">vld1q_f32</span>(input + i * size_div);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; loop_cnt; ++k) &#123;</span><br><span class="line">            c = <span class="built_in">vfmaq_f32</span>(c, c, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样查看反汇编有以下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000000d58 &lt;_Z9OptLevel1PKfPfii&gt;:</span><br><span class="line">     d58:7100005f cmpw2, #0x0</span><br><span class="line">     d5c:11000c44 addw4, w2, #0x3</span><br><span class="line">     d60:1a82b082 cselw2, w4, w2, lt  // lt = tstop</span><br><span class="line">     d64:13027c42 asrw2, w2, #2</span><br><span class="line">     d68:7100005f cmpw2, #0x0</span><br><span class="line">     d6c:5400026d b.ledb8 &lt;_Z9OptLevel1PKfPfii+0x60&gt;</span><br><span class="line">     d70:51000442 subw2, w2, #0x1</span><br><span class="line">     d74:91004004 addx4, x0, #0x10</span><br><span class="line">     d78:8b225084 addx4, x4, w2, uxtw #4</span><br><span class="line">     d7c:d503201f nop</span><br><span class="line">     d80:3dc00001 ldrq1, [x0]</span><br><span class="line">     d84:7100007f cmpw3, #0x0</span><br><span class="line">     d88:4f03f600 fmovv0.4s, #1.000000000000000000e+00</span><br><span class="line">     d8c:540000ed b.leda8 &lt;_Z9OptLevel1PKfPfii+0x50&gt;</span><br><span class="line">     d90:52800002 movw2, #0x0                   // #0</span><br><span class="line">     d94:d503201f nop</span><br><span class="line">     d98:4e21cc00 fmlav0.4s, v0.4s, v1.4s</span><br><span class="line">     d9c:11000442 addw2, w2, #0x1</span><br><span class="line">     da0:6b02007f cmpw3, w2</span><br><span class="line">     da4:54ffffa1 b.ned98 &lt;_Z9OptLevel1PKfPfii+0x40&gt;  // b.any</span><br><span class="line">     da8:91004000 addx0, x0, #0x10</span><br><span class="line">     dac:3c810420 strq0, [x1], #16</span><br><span class="line">     db0:eb04001f cmpx0, x4</span><br><span class="line">     db4:54fffe61 b.ned80 &lt;_Z9OptLevel1PKfPfii+0x28&gt;  // b.any</span><br><span class="line">     db8:d65f03c0 ret</span><br><span class="line">     dbc:d503201f nop</span><br></pre></td></tr></table></figure><p>其中，<code>vfmaq_f32</code>对应的汇编指令为<code>fmla</code>，使用了<code>v0</code>和<code>v1</code>两个向量寄存器，一条指令进行四次浮点乘加运算。</p><p><strong>实测性能：1179ms</strong>，提升72.4%，接近理论值75%。</p><h2 id="超标量（指令多发射）">超标量（指令多发射）</h2><blockquote><p>将一条指令从指令译码级（ID）移入此流水线的执行级（EX）的过程称为指令<strong>发射</strong>（Issue）。</p></blockquote><p>Cortex A57支持超标量（Superscalar）又称多发射（Multiple Issue），即存在多条执行pipeline，一个时钟周期内可以发射多条指令，即指令的吞吐量（throughput）&gt; 1，或者称CPI（Cycle Per Instruction）&lt; 1（这里吐槽一下<a href="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#expand=3416&amp;ig_expand=153,153,4911,4953&amp;techs=SSE&amp;text=mul">intel</a>的表示方法，其认为Throughput和CPI是同一个东西，对于双发射的指令，其标注为Throughput=CPI=0.5；我觉得应该是倒数的关系，即Throughput=ICP（Instruction Per Cycle）=2，CPI=0.5）。一个多发射的近似示意图如下所示：</p><p><img src="/2021/12/22/ComputerArch-2-ILP/2.png" alt="2"></p><p>而超标量的硬件实现则是（像<a href="https://no5-aaron-wu.github.io/2022/01/17/ComputerArch-4-Hazard/">乱序执行</a>时给EX阶段增加不同的FU一样）给IF和ID阶段也增加硬件并行支持，可以一次性从内存里面取出多条指令，然后分发给多个并行的指令译码器，进行译码，然后对应交给不同的功能单元（FU）去执行。如下图所示：</p><p><img src="/2021/12/22/ComputerArch-2-ILP/3.webp" alt="2"></p><p><a href="https://developer.arm.com/documentation/uan0015/b">Cortex A57 Software Optimization Guide external</a>中关于多发射的示意图如下：</p><p><img src="/2021/12/22/ComputerArch-2-ILP/4.png" alt="4"></p><p>其中Fetch和Decode是同时对多条指令进行读取和译码，如果指令（们）满足多发射条件（不存在数据冒险），就会在一个时钟周期内发射多条指令到不同的执行pipeline。</p><p>查询手册可知<code>fmla</code>指令的<s>吞吐量为2</s>，即一个时钟周期内可以同时发射两条指令到两条pipeline，并行计算。</p><p><img src="/2021/12/22/ComputerArch-2-ILP/3.png" alt="3"></p><blockquote><p>这里官方手册中有一点很奇怪，<code>FMLA</code>的<code>D-form</code>（Double Word，双字）指令（对应Intrinsics为<code>vfma_f32</code>）确实是双发射，但<code>Q-form</code>（Quad word，四字）指令（对应Intrinsics为<code>vfmaq_f32</code>）是单发射。虽然看到有<a href="http://www.dolbeau.name/dolbeau/publications/peak-alt.pdf">论文</a>写到，在Cortex A57中，有两个64位宽的浮点pipeline，<code>Q-form</code>指令会拆成两个<code>D-form</code>指令发射到这两个pipeline中，但这也不是我们通常认为的那种双发射啊（按这样理解，并行度还是4而不是8）。且后面的实验也能看到，用10条<code>vfmaq_f32</code>指令填满2条流水线的5个流水级是性能最优的（耗时刚好是用5条指令的一半），<s>这也侧面印证了<code>vfmaq_f32</code>也是双发射的。搞不懂了，<strong>姑且就认为<code>vfmaq_f32</code>的吞吐量就是2了</strong>。这里留个坑，回头弄明白了再来填吧</s>。</p><p>来填坑了，仔细看表格，发现<code>vfmaq_f32</code>的延迟是10，即可以理解为单发射，10个流水级。所以也刚好是10条<code>vfmaq_f32</code>指令可以把流水级填满。</p></blockquote><p>双发射要求两条指令之间没有数据依赖（不会因数据冒险而产生发射停顿），因此修改代码，外层循环一次加载8个float数据到两个向量寄存器，最内层循环每次发射两条FMLA进行计算。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OptLevel2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">float</span> *input, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">float</span> *output, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">const</span> <span class="keyword">int</span> size, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">const</span> <span class="keyword">int</span> loop_cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size_div = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size / size_div; ++i) &#123;</span><br><span class="line">        <span class="keyword">float32x4_t</span> a0 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> a1 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float32x4_t</span> c0 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c1 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; loop_cnt; k++) &#123;</span><br><span class="line">            c0 = <span class="built_in">vfmaq_f32</span>(c0, c0, a0);</span><br><span class="line">            c1 = <span class="built_in">vfmaq_f32</span>(c1, c1, a1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">0</span>, c0);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">4</span>, c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看反汇编如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000000dc0 &lt;_Z9OptLevel2PKfPfii&gt;:</span><br><span class="line">     dc0:7100005f cmpw2, #0x0</span><br><span class="line">     dc4:11001c44 addw4, w2, #0x7</span><br><span class="line">     dc8:1a82b082 cselw2, w4, w2, lt  // lt = tstop</span><br><span class="line">     dcc:13037c42 asrw2, w2, #3</span><br><span class="line">     dd0:7100005f cmpw2, #0x0</span><br><span class="line">     dd4:5400032d b.lee38 &lt;_Z9OptLevel2PKfPfii+0x78&gt;</span><br><span class="line">     dd8:51000444 subw4, w2, #0x1</span><br><span class="line">     ddc:91008005 addx5, x0, #0x20</span><br><span class="line">     de0:52800406 movw6, #0x20                  // #32</span><br><span class="line">     de4:91004022 addx2, x1, #0x10</span><br><span class="line">     de8:9ba61484 umaddlx4, w4, w6, x5</span><br><span class="line">     dec:d503201f nop</span><br><span class="line">     df0:3dc00003 ldrq3, [x0]</span><br><span class="line">     df4:7100007f cmpw3, #0x0</span><br><span class="line">     df8:3dc00402 ldrq2, [x0, #16]</span><br><span class="line">     dfc:4f03f600 fmovv0.4s, #1.000000000000000000e+00</span><br><span class="line">     e00:540001ed b.lee3c &lt;_Z9OptLevel2PKfPfii+0x7c&gt;</span><br><span class="line">     e04:4ea01c01 movv1.16b, v0.16b</span><br><span class="line">     e08:52800001 movw1, #0x0                   // #0</span><br><span class="line">     e0c:d503201f nop</span><br><span class="line">     e10:4e23cc21 fmlav1.4s, v1.4s, v3.4s</span><br><span class="line">     e14:11000421 addw1, w1, #0x1</span><br><span class="line">     e18:4e22cc00 fmlav0.4s, v0.4s, v2.4s</span><br><span class="line">     e1c:6b01007f cmpw3, w1</span><br><span class="line">     e20:54ffff81 b.nee10 &lt;_Z9OptLevel2PKfPfii+0x50&gt;  // b.any</span><br><span class="line">     e24:3c9f0041 sturq1, [x2, #-16]</span><br><span class="line">     e28:91008000 addx0, x0, #0x20</span><br><span class="line">     e2c:eb04001f cmpx0, x4</span><br><span class="line">     e30:3c820440 strq0, [x2], #32</span><br><span class="line">     e34:54fffde1 b.nedf0 &lt;_Z9OptLevel2PKfPfii+0x30&gt;  // b.any</span><br><span class="line">     e38:d65f03c0 ret</span><br><span class="line">     e3c:4ea01c01 movv1.16b, v0.16b</span><br><span class="line">     e40:91008000 addx0, x0, #0x20</span><br><span class="line">     e44:eb04001f cmpx0, x4</span><br><span class="line">     e48:3c9f0041 sturq1, [x2, #-16]</span><br><span class="line">     e4c:3c820440 strq0, [x2], #32</span><br><span class="line">     e50:54fffd01 b.nedf0 &lt;_Z9OptLevel2PKfPfii+0x30&gt;  // b.any</span><br><span class="line">     e54:17fffff9 be38 &lt;_Z9OptLevel2PKfPfii+0x78&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中包含了两条<code>fmla</code>指令，分别使用了两个向量寄存器<code>v1</code>，<code>v3</code>和<code>v0</code>，<code>v2</code>。两条指令数据互不依赖，可以进行双发射。</p><p><strong>实测性能：621ms</strong>，（相比上一优化）提升47.3%，接近理论值50%。</p><blockquote><p>填坑之后，可以看到这里并不是真正意义的双发射，而是做了<code>2x</code>的流水级并行，本节和下一节中关于双发射的描述并不符合实际情况，起码在A57上并不准确。</p></blockquote><h2 id="流水级并行">流水级并行</h2><p>5级流水线的不同流水级（Pipeline Stage）在同一时钟周期内也可以并行（比如IF取完上一条指令后就空闲出来了，自然就可以取下一条指令，此时上一条指令在ID级），因此可以在一个指令周期内（不同的时钟周期）发射多条指令，保证一个时钟周期内流水线的各个阶段都有任务在执行。只要执行时间足够长(计算量足够大)的话，除了开始和结束流水线的部分，流水线可以近似<code>5x</code>并行。示意图如下：</p><p><img src="/2021/12/22/ComputerArch-2-ILP/1.jpg" alt="1"></p><p>其中纵轴S0到S5表示流水线的5个流水级，Port0和Port1表示有两个发射端口，即双发射。第一个时钟周期，有两条FMA指令（红色）被发射到Port0和Port1，并执行流水线的第一流水级IF（其实按照更狭义的理解，这里不能称为发射，而是IF取两条指令，后续ID级检查冒险后，能流入EX后才叫发射。但是由于IF和ID可以处理多条指令，<strong>不存在数据冒险的前提下</strong>，与EX级一起看成一整条pipeline，也没毛病，且更容易理解）；而后到了第二个时钟周期，这两条指令进入第二流水级ID，同时新的两条FMA指令（蓝色）进入第一流水级IF；依此类推，周而复始，完美衔接，不存在任何停顿。</p><p>如果是单发射的CPU，需要连续5条（不存在数据冒险的）指令才能填满流水线各个阶段。如果是双发射，则需要至少10条指令。</p><p>同样，流水级并行的<strong>关键</strong>还是在于指令间不存在数据依赖，不产生数据冒险而发生发射停顿。</p><p>因此修改代码，外层循环一次加载40个float数据到10个向量寄存器，最内层循环每次发射（广义）10条FMLA进行计算。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OptLevel3</span><span class="params">(<span class="keyword">const</span> <span class="keyword">float</span> *input, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">float</span> *output, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">const</span> <span class="keyword">int</span> size, </span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">const</span> <span class="keyword">int</span> loop_cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size_div = <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size / size_div; ++i) &#123;</span><br><span class="line">        <span class="keyword">float32x4_t</span> a0 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> a1 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> a2 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> a3 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> a4 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> a5 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> a6 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">24</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> a7 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">28</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> a8 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> a9 = <span class="built_in">vld1q_f32</span>(input + i * size_div + <span class="number">36</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float32x4_t</span> c0 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c1 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c2 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c3 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c4 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c5 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c6 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c7 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c8 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">float32x4_t</span> c9 = <span class="built_in">vmovq_n_f32</span>(<span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// method 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; loop_cnt; k++) &#123;</span><br><span class="line">            c0 = <span class="built_in">vfmaq_f32</span>(c0, c0, a0);</span><br><span class="line">            c1 = <span class="built_in">vfmaq_f32</span>(c1, c1, a1);</span><br><span class="line"></span><br><span class="line">            c2 = <span class="built_in">vfmaq_f32</span>(c2, c2, a2);</span><br><span class="line">            c3 = <span class="built_in">vfmaq_f32</span>(c3, c3, a3);</span><br><span class="line"></span><br><span class="line">            c4 = <span class="built_in">vfmaq_f32</span>(c4, c4, a4);</span><br><span class="line">            c5 = <span class="built_in">vfmaq_f32</span>(c5, c5, a5);</span><br><span class="line"></span><br><span class="line">            c6 = <span class="built_in">vfmaq_f32</span>(c6, c6, a6);</span><br><span class="line">            c7 = <span class="built_in">vfmaq_f32</span>(c7, c7, a7);</span><br><span class="line"></span><br><span class="line">            c8 = <span class="built_in">vfmaq_f32</span>(c8, c8, a8);</span><br><span class="line">            c9 = <span class="built_in">vfmaq_f32</span>(c9, c9, a9);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">0</span>, c0);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">4</span>, c1);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">8</span>, c2);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">12</span>, c3);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">16</span>, c4);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">20</span>, c5);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">24</span>, c6);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">28</span>, c7);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">32</span>, c8);</span><br><span class="line">        <span class="built_in">vst1q_f32</span>(output + i * size_div + <span class="number">36</span>, c9);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应汇编代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000000e58 &lt;_Z9OptLevel3PKfPfii&gt;:</span><br><span class="line">     e58:528ccce4 movw4, #0x6667                // #26215</span><br><span class="line">     e5c:72acccc4 movkw4, #0x6666, lsl #16</span><br><span class="line">     e60:9b247c44 smullx4, w2, w4</span><br><span class="line">     e64:9364fc84 asrx4, x4, #36</span><br><span class="line">     e68:4b827c82 subw2, w4, w2, asr #31</span><br><span class="line">     e6c:7100005f cmpw2, #0x0</span><br><span class="line">     e70:54000b8d b.lefe0 &lt;_Z9OptLevel3PKfPfii+0x188&gt;</span><br><span class="line">     e74:51000442 subw2, w2, #0x1</span><br><span class="line">     e78:a9bd7bfd stpx29, x30, [sp, #-48]!</span><br><span class="line">     e7c:91000445 addx5, x2, #0x1</span><br><span class="line">     e80:9101401e addx30, x0, #0x50</span><br><span class="line">     e84:910003fd movx29, sp</span><br><span class="line">     e88:8b0508a5 addx5, x5, x5, lsl #2</span><br><span class="line">     e8c:a90153f3 stpx19, x20, [sp, #16]</span><br><span class="line">     e90:a9025bf5 stpx21, x22, [sp, #32]</span><br><span class="line">     e94:9100c014 addx20, x0, #0x30</span><br><span class="line">     e98:91004016 addx22, x0, #0x10</span><br><span class="line">     e9c:91008015 addx21, x0, #0x20</span><br><span class="line">     ea0:91010013 addx19, x0, #0x40</span><br><span class="line">     ea4:91018012 addx18, x0, #0x60</span><br><span class="line">     ea8:9101c011 addx17, x0, #0x70</span><br><span class="line">     eac:d37be8a5 lslx5, x5, #5</span><br><span class="line">     eb0:91020010 addx16, x0, #0x80</span><br><span class="line">     eb4:9102400f addx15, x0, #0x90</span><br><span class="line">     eb8:9100402e addx14, x1, #0x10</span><br><span class="line">     ebc:9100802d addx13, x1, #0x20</span><br><span class="line">     ec0:9100c02c addx12, x1, #0x30</span><br><span class="line">     ec4:9101002b addx11, x1, #0x40</span><br><span class="line">     ec8:9101402a addx10, x1, #0x50</span><br><span class="line">     ecc:91018029 addx9, x1, #0x60</span><br><span class="line">     ed0:9101c028 addx8, x1, #0x70</span><br><span class="line">     ed4:91020027 addx7, x1, #0x80</span><br><span class="line">     ed8:91024026 addx6, x1, #0x90</span><br><span class="line">     edc:d2800002 movx2, #0x0                   // #0</span><br><span class="line">     ee0:3ce2681b ldrq27, [x0, x2]</span><br><span class="line">     ee4:7100007f cmpw3, #0x0</span><br><span class="line">     ee8:3ce26ada ldrq26, [x22, x2]</span><br><span class="line">     eec:3ce26ab9 ldrq25, [x21, x2]</span><br><span class="line">     ef0:3ce26a98 ldrq24, [x20, x2]</span><br><span class="line">     ef4:3ce26a77 ldrq23, [x19, x2]</span><br><span class="line">     ef8:3ce26bd6 ldrq22, [x30, x2]</span><br><span class="line">     efc:3ce26a55 ldrq21, [x18, x2]</span><br><span class="line">     f00:3ce26a34 ldrq20, [x17, x2]</span><br><span class="line">     f04:3ce26a13 ldrq19, [x16, x2]</span><br><span class="line">     f08:3ce269f2 ldrq18, [x15, x2]</span><br><span class="line">     f0c:4f03f600 fmovv0.4s, #1.000000000000000000e+00</span><br><span class="line">     f10:5400054d b.lefb8 &lt;_Z9OptLevel3PKfPfii+0x160&gt;</span><br><span class="line">     f14:4ea01c01 movv1.16b, v0.16b</span><br><span class="line">     f18:52800004 movw4, #0x0                   // #0</span><br><span class="line">     f1c:4ea01c02 movv2.16b, v0.16b</span><br><span class="line">     f20:4ea01c03 movv3.16b, v0.16b</span><br><span class="line">     f24:4ea01c04 movv4.16b, v0.16b</span><br><span class="line">     f28:4ea01c05 movv5.16b, v0.16b</span><br><span class="line">     f2c:4ea01c06 movv6.16b, v0.16b</span><br><span class="line">     f30:4ea01c07 movv7.16b, v0.16b</span><br><span class="line">     f34:4ea01c10 movv16.16b, v0.16b</span><br><span class="line">     f38:4ea01c11 movv17.16b, v0.16b</span><br><span class="line">     f3c:d503201f nop</span><br><span class="line">     f40:4e3bce31 fmlav17.4s, v17.4s, v27.4s</span><br><span class="line">     f44:11000484 addw4, w4, #0x1</span><br><span class="line">     f48:4e3ace10 fmlav16.4s, v16.4s, v26.4s</span><br><span class="line">     f4c:6b04007f cmpw3, w4</span><br><span class="line">     f50:4e39cce7 fmlav7.4s, v7.4s, v25.4s</span><br><span class="line">     f54:4e38ccc6 fmlav6.4s, v6.4s, v24.4s</span><br><span class="line">     f58:4e37cca5 fmlav5.4s, v5.4s, v23.4s</span><br><span class="line">     f5c:4e36cc84 fmlav4.4s, v4.4s, v22.4s</span><br><span class="line">     f60:4e35cc63 fmlav3.4s, v3.4s, v21.4s</span><br><span class="line">     f64:4e34cc42 fmlav2.4s, v2.4s, v20.4s</span><br><span class="line">     f68:4e33cc21 fmlav1.4s, v1.4s, v19.4s</span><br><span class="line">     f6c:4e32cc00 fmlav0.4s, v0.4s, v18.4s</span><br><span class="line">     f70:54fffe81 b.nef40 &lt;_Z9OptLevel3PKfPfii+0xe8&gt;  // b.any</span><br><span class="line">     f74:3ca16851 strq17, [x2, x1]</span><br><span class="line">     f78:3ca269d0 strq16, [x14, x2]</span><br><span class="line">     f7c:3ca269a7 strq7, [x13, x2]</span><br><span class="line">     f80:3ca26986 strq6, [x12, x2]</span><br><span class="line">     f84:3ca26965 strq5, [x11, x2]</span><br><span class="line">     f88:3ca26944 strq4, [x10, x2]</span><br><span class="line">     f8c:3ca26923 strq3, [x9, x2]</span><br><span class="line">     f90:3ca26902 strq2, [x8, x2]</span><br><span class="line">     f94:3ca268e1 strq1, [x7, x2]</span><br><span class="line">     f98:3ca268c0 strq0, [x6, x2]</span><br><span class="line">     f9c:91028042 addx2, x2, #0xa0</span><br><span class="line">     fa0:eb05005f cmpx2, x5</span><br><span class="line">     fa4:54fff9e1 b.neee0 &lt;_Z9OptLevel3PKfPfii+0x88&gt;  // b.any</span><br><span class="line">     fa8:a94153f3 ldpx19, x20, [sp, #16]</span><br><span class="line">     fac:a9425bf5 ldpx21, x22, [sp, #32]</span><br><span class="line">     fb0:a8c37bfd ldpx29, x30, [sp], #48</span><br><span class="line">     fb4:d65f03c0 ret</span><br><span class="line">     fb8:4ea01c01 movv1.16b, v0.16b</span><br><span class="line">     fbc:4ea01c02 movv2.16b, v0.16b</span><br><span class="line">     fc0:4ea01c03 movv3.16b, v0.16b</span><br><span class="line">     fc4:4ea01c04 movv4.16b, v0.16b</span><br><span class="line">     fc8:4ea01c05 movv5.16b, v0.16b</span><br><span class="line">     fcc:4ea01c06 movv6.16b, v0.16b</span><br><span class="line">     fd0:4ea01c07 movv7.16b, v0.16b</span><br><span class="line">     fd4:4ea01c10 movv16.16b, v0.16b</span><br><span class="line">     fd8:4ea01c11 movv17.16b, v0.16b</span><br><span class="line">     fdc:17ffffe6 bf74 &lt;_Z9OptLevel3PKfPfii+0x11c&gt;</span><br><span class="line">     fe0:d65f03c0 ret</span><br><span class="line">     fe4:00000000 .inst0x00000000 ; undefined</span><br></pre></td></tr></table></figure><p>可以看到最内层循环中使用了10条<code>fmla</code>指令，20个向量寄存器<code>v0-v7</code>，<code>v16-v27</code>。</p><p><strong>实测性能：139ms</strong>，（相比上一优化）提升77.6%，接近理论值80%。</p><h1>多平台验证</h1><blockquote><p>除TX2外，数据来源自东哥分享，未自测</p></blockquote><table><thead><tr><th style="text-align:center">平台</th><th style="text-align:center">架构</th><th style="text-align:center">L0/ms</th><th style="text-align:center">L1/ms</th><th style="text-align:center">L2/ms</th><th style="text-align:center">L3/ms</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">TX2</td><td style="text-align:center">Cortex A57 AARCH64 2GHz主频</td><td style="text-align:center">4275</td><td style="text-align:center">1179</td><td style="text-align:center">621</td><td style="text-align:center">139</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Apple M1</td><td style="text-align:center">AARCH64 3.14Ghz主频</td><td style="text-align:center">1023</td><td style="text-align:center">220</td><td style="text-align:center">130</td><td style="text-align:center">43</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">AX630A</td><td style="text-align:center">Cortex A53 AARCH64 1.3Ghz主频</td><td style="text-align:center">1256</td><td style="text-align:center">317</td><td style="text-align:center">161</td><td style="text-align:center">44</td><td style="text-align:center">buffer size调整为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">2 \times 10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td style="text-align:center">Amba H22</td><td style="text-align:center">Cortex A53 AARCH32 1Ghz主频</td><td style="text-align:center">2569</td><td style="text-align:center">474</td><td style="text-align:center">240</td><td style="text-align:center">68</td><td style="text-align:center">buffer size调整为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">2 \times 10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>；L3优化中外层循环一次加载32个浮点数据</td></tr></tbody></table><p>上面Amba H22的实验设计中，L3优化中外层循环改为一次加载32个浮点数据的原因是，AARCH32只有16个128bit的向量寄存器，8个用于加载input数据，8个用于累加output，<strong>只能</strong>（非要超量加载也不是不行，只不过需要用到超量部分的数据时，已加载的数据会被压入栈，腾出寄存器给新的数据，这样会增加访存量，且流水线也不能完美衔接，导致性能下降）一次加载32个浮点数据。</p><h1>总结</h1><ol><li>这里是从运算量角度分析性能提升的原因，其实由于一条指令load/store多个数据，访存量也会减少。</li><li>本例中的计算过程比较简单，能够比较接近理论的性能峰值；当计算变复杂时，计算中的数据依赖关系增多，并行将会更难实现，也许更加巧妙的利用流水线可以优化性能，也许根本就无解。</li></ol><h1>参考</h1><p>[1] 计算机体系结构：量化研究方法（第5版）</p><p>[2] <a href="https://zhuanlan.zhihu.com/p/426127316">https://zhuanlan.zhihu.com/p/426127316</a></p><h1>致谢</h1><p>依旧感谢东哥的分享~</p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SIMD </tag>
            
            <tag> ILP </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [13]：初探Transformer</title>
      <link href="/2021/12/13/AI-Algorithm-13-Transformer/"/>
      <url>/2021/12/13/AI-Algorithm-13-Transformer/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><blockquote><p>Google论文：<a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a></p><p>哈佛大神笔记：<a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html">The Annotated Transformer</a></p><p>哈佛大神代码：<a href="https://github.com/harvardnlp/annotated-transformer"> annotated-transformer</a></p></blockquote><p>​本文主要参考了Alexander Rush大神这篇<a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html">The Annotated Transformer</a>，但并不是逐字翻译，而是加入了自己学习过程中的一些拙见和引申，如果不喜欢别人消化过的东西，可以直接阅读原文。Pytorch等框架其实已经实现了Transformer，至于为什么选择这篇文章进行学习而不是直接阅读Pytorch源码，是因为这篇不会包含出于框架本身考虑的过多的抽象和封装，且解读和代码兼而有之，作为Transformer学习的开篇，非常合适。</p><h1>环境</h1><p>​代码所需的运行环境是python-3.6+pytorch-0.3.0（只有x86的linux版本），这里就用wsl的ubuntu环境做配置，刚好我的ubuntu是python3.6，否则可能就需要用conda配置虚拟环境+ipykernel生成jupyter notebook的kernel，大致如下（没有实操）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -c conda-forge -n python3.6 python=3.6</span><br><span class="line"><span class="built_in">source</span> activate python3.6 </span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=pytorch-0.3.0 </span><br><span class="line">jupyter notebook</span><br><span class="line"><span class="comment"># 可以通过kernel-&gt;Change kernel-&gt;pytorch-0.3.0切换jupyter notebook的kernel</span></span><br></pre></td></tr></table></figure><p>​由于我的wsl没有安装cuda，就不安装支持cuda的pytorch版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install https://download.pytorch.org/whl/cpu/torch-0.3.0.post4-cp36-cp36m-linux_x86_64.whl</span><br><span class="line">pip3 install numpy matplotlib spacy torchtext seaborn</span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>​这里不太清楚为什么非要指定pytorch-0.3.0，可能文中使用的某些方法在后续版本更迭中被弃用了，为保证能完美复现，还是要严格按照上述要求配置环境。</p><h1>背景</h1><p>​RNN模型的缺点是需要顺序计算，计算上很难实现并行。因而出现了Extended Neural GPU、ByteNet 和 ConvS2S等网络模型，这些都是以CNN作为构建基础，因此计算所有输入输出位置间的隐藏层表示可以做到并行。但这些模型也有缺点，就是随着距离的增长，将序列中两个位置（时刻）关联起来所需要的操作数也跟着增长。对于ConvS2S而言是线性增长，对ByteNet而言则是对数增长。这就导致很难学习到长距离之间的依赖关系。</p><p>​<strong>Transformer</strong>引入了<strong>Self-Attention（Intra-Attention）机制</strong>，这是一种将序列的不同位置联系起来从而计算序列表示（representation）的注意机制。以机器翻译场景为例，它在编码每一个词的时候都能够<strong>注意</strong>（<strong>attend to</strong>）整个句子，从而可以解决长距离依赖的问题，同时计算Self-Attention可以用<a href="https://no5-aaron-wu.github.io/2021/12/09/AI-Algorithm-12-GEMM/">矩阵乘法</a>一次计算所有的时刻，因此可以充分利用并行计算资源。</p><p>​Transformer是第一个完全依靠Self-Attention机制，完全不使用序列对齐的RNN或卷积，来计算输入输出表示的转换模型。</p><h1>模型结构</h1><p>​目前主流的<strong>神经序列转换</strong>（<strong>neural sequence transduction</strong>）模型要么是RNN一派，要么是带Encoder-Decoder的CNN一派。Transformer模型还通过Attention机制连接encoder和decoder。</p><p>​所谓的序列转换模型就是把一个输入序列转换成另外一个输出序列，它们的长度很可能是不同的。比如基于神经网络的机器翻译，输入是法语句子，输出是英语句子，这就是一个序列转换模型。类似的包括文本摘要、对话等问题都可以看成序列转换问题。我们这里主要关注机器翻译，但是任何输入是一个序列，输出是另外一个序列的问题都可以考虑使用Encoder-Decoder模型。</p><p>​Encoder将输入序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,…,x_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>映射(编码)成一个连续的序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>z</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>z</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">z=(z_1,…,z_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。而Decoder根据<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>来解码得到输出序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>y</mi><mi>m</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(y_1,…,y_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，解码时一次生成一个元素，且每一步都是<strong>自回归</strong>（<strong>auto-regressive</strong>）的，即它会把前一个时刻的输出作为当前时刻的附加输入。</p><h2 id="Encoder-Decoder基础架构">Encoder-Decoder基础架构</h2><p>​Encoder-Decoder结构模型的代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncoderDecoder</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">标准的Encoder-Decoder架构。这是很多模型的基础</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, encoder, decoder, src_embed, tgt_embed, generator</span>):</span></span><br><span class="line"><span class="built_in">super</span>(EncoderDecoder, self).__init__()</span><br><span class="line"><span class="comment"># encoder和decoder都是构造的时候传入的，这样会非常灵活</span></span><br><span class="line">self.encoder = encoder</span><br><span class="line">self.decoder = decoder</span><br><span class="line"><span class="comment"># 源语言和目标语言的embedding</span></span><br><span class="line">self.src_embed = src_embed</span><br><span class="line">self.tgt_embed = tgt_embed</span><br><span class="line"><span class="comment"># generator后面会讲到，就是根据Decoder的隐状态输出当前时刻的词的概率分布</span></span><br><span class="line"><span class="comment"># 基本的实现就是隐状态输入一个全连接层，全连接层的输出大小是字典中词的个数</span></span><br><span class="line"><span class="comment"># 然后接一个softmax变成概率。</span></span><br><span class="line">self.generator = generator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, src, tgt, src_mask, tgt_mask</span>):</span></span><br><span class="line"><span class="comment"># 首先调用encode方法对输入进行编码，然后调用decode方法解码</span></span><br><span class="line"><span class="keyword">return</span> self.decode(self.encode(src, src_mask), src_mask,</span><br><span class="line">tgt, tgt_mask)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">self, src, src_mask</span>):</span></span><br><span class="line"><span class="comment"># 调用encoder来进行编码，传入的参数为embedding后的src和src_mask</span></span><br><span class="line"><span class="keyword">return</span> self.encoder(self.src_embed(src), src_mask)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">self, memory, src_mask, tgt, tgt_mask</span>):</span></span><br><span class="line"><span class="comment"># 调用decoder</span></span><br><span class="line"><span class="keyword">return</span> self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)</span><br></pre></td></tr></table></figure><p>​<code>EncoderDecoder</code>类定义了一种通用的Encoder-Decoder架构。具体的<code>encoder</code>，<code>decoder</code>，<code>src_embed</code>， <code>tgt_embed</code>，<code>generator</code>都是构造函数传入的参数，这样就方便我们对不同的实验更换不同的组件。</p><p>​其中涉及了<a href="https://zhuanlan.zhihu.com/p/138310401">Embedding</a>的概念，简单来讲就是<strong>用向量表示实体</strong>。例如<code>RGB=(255, 255, 255)</code>这一三维向量就是对<strong>白色</strong>这一颜色实体的<strong>Embedding</strong>。</p><h2 id="Generator">Generator</h2><p>​Generator的代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"><span class="comment"># 根据Decoder的隐状态输出一个词的概率分布</span></span><br><span class="line"><span class="comment"># d_model是Decoder输出的大小，vocab是词典大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d_model, vocab</span>):</span></span><br><span class="line"><span class="built_in">super</span>(Generator, self).__init__()</span><br><span class="line">self.proj = nn.Linear(d_model, vocab)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全连接再加上一个softmax</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line"><span class="keyword">return</span> F.log_softmax(self.proj(x), dim=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>​注意：<code>Generator.forward</code>返回的是softmax的log值。softmax函数定义如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><msup><mi>e</mi><msub><mi>x</mi><mi>i</mi></msub></msup><mrow><munderover><mo>∑</mo><mrow><mi>c</mi><mo>=</mo><mn>1</mn></mrow><mi>C</mi></munderover><msup><mi>e</mi><msub><mi>x</mi><mi>c</mi></msub></msup></mrow></mfrac><mspace width="1em"><mi>i</mi><mo separator="true">,</mo><mi>c</mi><mo>∈</mo><mi>C</mi></mspace></mrow><annotation encoding="application/x-tex">softmax(x_i)=\frac{e^{x_i}}{\sum_{c=1}^{C}e^{x_c}}\quad i,c\in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">so</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.5123em;vertical-align:-1.1709em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.1288em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9812em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1709em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>其中：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>为单个样本的全连接层输出分数<a href="https://www.zhihu.com/question/60751553">logits</a>，其尺寸应该与分类问题的类别数一致，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对应第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>个类型的分数；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>为分类问题的类别数；</li></ul><p>​softmax的作用简单来讲，就是将输出分数归一化到0-1，且所有类别分数之和为1。从概率论的角度可以将打分值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>解释为未归一化的对数概率，作为指数的幂就得了未归一化的概率，除法操作就是归一化的过程。</p><p>​这里输出softmax的log值，可以配合<code>nn.NLLLoss</code>计算交叉熵损失（cross-entropy loss），也可以配合<code>nn.KLDivLoss</code>计算相对熵损失（Kullback-Leibler divergence loss）。交叉熵损失的定义如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>L</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munder><mo>∑</mo><mi>n</mi></munder><msub><mi>L</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>L</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>c</mi><mo>=</mo><mn>1</mn></mrow><mi>C</mi></munderover><mo>−</mo><msub><mi>y</mi><mrow><mi>n</mi><mi>c</mi></mrow></msub><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>n</mi><mi>c</mi></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mfrac><msup><mi>e</mi><msub><mi>x</mi><mrow><mi>n</mi><mi>i</mi></mrow></msub></msup><mrow><munderover><mo>∑</mo><mrow><mi>c</mi><mo>=</mo><mn>1</mn></mrow><mi>C</mi></munderover><msup><mi>e</mi><msub><mi>x</mi><mrow><mi>n</mi><mi>c</mi></mrow></msub></msup></mrow></mfrac><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}L&amp;=\frac{1}{N}\sum_nL_n \\L_n&amp;=\sum_{c=1}^{C}-y_{nc}log(softmax(x_{nc}))=-log(\frac{e^{x_{ni}}}{\sum_{c=1}^{C}e^{x_{nc}}})\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.2669em;vertical-align:-2.8834em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3834em;"><span style="top:-5.8903em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord mathnormal">L</span></span></span><span style="top:-2.512em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8834em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3834em;"><span style="top:-5.8903em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.512em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8829em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2671em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">so</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.1288em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9812em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ni</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1709em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8834em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>为观测样本的数量；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">L_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个观测样本的交叉熵损失；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mrow><mi>n</mi><mi>c</mi></mrow></msub></mrow><annotation encoding="application/x-tex">y_{nc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为符号函数，如果样本<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>的真实类别<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>，则取1，否则取0；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mi>n</mi><mi>c</mi></mrow></msub></mrow><annotation encoding="application/x-tex">x_{nc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为样本<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>的输出分数中，对应到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>类别的分数；</li></ul><p>​<strong>NLLLoss</strong>(<strong>Negative Log Likelihood Loss</strong>)是计算负log似然损失（最大似然）。其配合<code>F.log_softmax</code>函数或<code>nn.LogSoftmax</code>Module声明的callable对象可以等效为<code>nn.CrossEntropyLoss</code>。</p><p>​<strong>KLDivLoss</strong>称为KL散度，又称相对熵，公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>L</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munder><mo>∑</mo><mi>n</mi></munder><msub><mi>L</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>L</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>c</mi><mo>=</mo><mn>1</mn></mrow><mi>C</mi></munderover><msub><mi>y</mi><mrow><mi>n</mi><mi>c</mi></mrow></msub><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>n</mi><mi>c</mi></mrow></msub><mo stretchy="false">)</mo><mo>−</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">(</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>n</mi><mi>c</mi></mrow></msub><mo stretchy="false">)</mo><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">)</mo><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}L&amp;=\frac{1}{N}\sum_nL_n \\L_n&amp;=\sum_{c=1}^{C}y_{nc}\bigg(log(y_{nc})-log\big(softmax(x_{nc})\big)\bigg)\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.2669em;vertical-align:-2.8834em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3834em;"><span style="top:-5.8903em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord mathnormal">L</span></span></span><span style="top:-2.512em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8834em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3834em;"><span style="top:-5.8903em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.512em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8829em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2671em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="delimsizing size3">(</span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="delimsizing size1">(</span></span><span class="mord mathnormal">so</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="delimsizing size1">)</span></span><span class="mord"><span class="delimsizing size3">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8834em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>​其中：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">y_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个样本的真值标签的概率分布（0-1，且和为1），对于分类问题而言，就是类别ID的one-hot编码，如总共5类，第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个样本属于第4类，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">y_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<code>[0,0,0,1,0]</code>；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">softmax(x_{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">so</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>为第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个样本输出分数的概率分布（0-1，且和为1），与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mrow><mi>n</mi><mi>c</mi></mrow></msub></mrow><annotation encoding="application/x-tex">y_{nc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的shape相同；</li></ul><p>若参照<code>nn.KLDivLoss</code>的定义，将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">(</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">)</mo></mrow><annotation encoding="application/x-tex">log\big(softmax(x_{n})\big)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="delimsizing size1">(</span></span><span class="mord mathnormal">so</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="delimsizing size1">)</span></span></span></span></span>当作输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则上述公式可以简写为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munder><mo>∑</mo><mi>n</mi></munder><msub><mi>y</mi><mi>n</mi></msub><mo>⋅</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>−</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><mo>∑</mo><msub><mi>y</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mo stretchy="false">(</mo><mo>−</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><mo>∑</mo><msub><mi>y</mi><mi>n</mi></msub><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L=\frac{1}{N}\sum_ny_n\cdot(log(y_n)-x_n)=-\frac{1}{N}\sum y_nx_n - (-\frac{1}{N}\sum y_nlog(y_n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.5714em;vertical-align:-1.25em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol large-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol large-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span></span></p><p>可以看出<strong>相对熵</strong>其实就是<strong>交叉熵</strong>减去<a href="https://zhuanlan.zhihu.com/p/26486223"><strong>信息熵</strong></a>。对于分类问题而言，真值标签的概率分布是确定的（非1即0），那么信息熵为0（即没有不确定性），这时相对熵其实就是交叉熵。</p><p>简单的验证代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.Tensor([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]).unsqueeze(<span class="number">0</span>)</span><br><span class="line">y = torch.ones(<span class="number">1</span>, dtype=torch.long) * <span class="number">3</span></span><br><span class="line">one_hot_y = torch.Tensor([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">m1 = nn.LogSoftmax()</span><br><span class="line">m2 = nn.NLLLoss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line">m3 = nn.CrossEntropyLoss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line">m4 = nn.KLDivLoss(reduction=<span class="string">&#x27;batchmean&#x27;</span>)</span><br><span class="line"></span><br><span class="line">loss1 = m2(m1(x), y)</span><br><span class="line">loss2 = m3(x, y)</span><br><span class="line">loss3 = m4(m1(x), one_hot_y)</span><br><span class="line"><span class="built_in">print</span>(torch.isclose(loss1, loss2, atol=<span class="number">1e-03</span>).<span class="built_in">all</span>())</span><br><span class="line"><span class="built_in">print</span>(torch.isclose(loss1, loss3, atol=<span class="number">1e-03</span>).<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure><p>​这里需要注意的<code>nn.KLDivLoss</code>的<code>reduction='mean'</code>与其他模块不同，它表示在对batch（上例=1）和dimension（上例=5）尺度上做平均（即对每个输入元素平均），而<code>reduction='batchmean'</code>才是在batch维度上做平均。pyTorch会在下一个release版本中将其与其他模块进行统一。</p><h2 id="Transformer">Transformer</h2><p>​Transformer模型也是遵循上面的架构，如下图所示，只不过它的Encoder（左侧）是N个EncoderLayer组成，每个EncoderLayer包含一个Self-Attention SubLayer层和一个全连接SubLayer层。而它的Decoder（右侧）也是N个DecoderLayer组成，每个DecoderLayer包含一个Self-Attention SubLayer层、Attention SubLayer层和全连接SubLayer层。</p><p><img src="/2021/12/13/AI-Algorithm-13-Transformer/1.png" alt="1"></p><h2 id="Encoder-and-Decoder-Stacks">Encoder and Decoder Stacks</h2><p>​如前所述，Encoder和Decoder都是由N个相同结构的Layer<strong>堆积</strong>（<strong>stack</strong>）而成。因此我们首先定义<code>clones</code>函数，用于克隆相同的Layer。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clones</span>(<span class="params">module, N</span>):</span></span><br><span class="line"><span class="comment"># 克隆N个完全相同的SubLayer，使用了copy.deepcopy</span></span><br><span class="line"><span class="keyword">return</span> nn.ModuleList([copy.deepcopy(module) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)])</span><br></pre></td></tr></table></figure><p>​这里使用了<code>nn.ModuleList</code>，ModuleList就像一个普通的Python的List，我们可以使用下标来访问它，它的好处是传入的ModuleList的所有Module都会注册到PyTorch里，这样Optimizer就能找到这里面的参数，从而能够用梯度下降更新这些参数。但是<code>nn.ModuleList</code>并不是<code>nn.Module</code>（的子类），因此它没有<code>forward</code>等方法，我们通常要把它放到某个Module里。</p><h3 id="Encoder">Encoder</h3><p>​Encoder就是<code>N=6</code>个EncoderLayer的stack，最后加上一个LayerNorm。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encoder</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"><span class="string">&quot;Encoder是N个EncoderLayer的stack&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, layer, N</span>):</span></span><br><span class="line"><span class="built_in">super</span>(Encoder, self).__init__()</span><br><span class="line"><span class="comment"># layer clone N个</span></span><br><span class="line">self.layers = clones(layer, N)</span><br><span class="line"><span class="comment"># 再加一个LayerNorm层</span></span><br><span class="line">self.norm = LayerNorm(layer.size)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, mask</span>):</span></span><br><span class="line"><span class="string">&quot;逐层进行处理&quot;</span></span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</span><br><span class="line">x = layer(x, mask)</span><br><span class="line"><span class="comment"># 最后进行LayerNorm，后面会解释为什么最后还有一个LayerNorm。</span></span><br><span class="line"><span class="keyword">return</span> self.norm(x)</span><br></pre></td></tr></table></figure><h4 id="LayerNorm">LayerNorm</h4><p>​LayerNorm不是BatchNorm，与BatchNorm区别在于归一化的维度不同，LayerNorm也存在可学习参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span>，只是其为特征维度，而不是Batch维度。其实现代码如下（也可以用<code>nn.LayerNorm</code>）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayerNorm</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, features, eps=<span class="number">1e-6</span></span>):</span></span><br><span class="line"><span class="built_in">super</span>(LayerNorm, self).__init__()</span><br><span class="line">self.a_2 = nn.Parameter(torch.ones(features))</span><br><span class="line">self.b_2 = nn.Parameter(torch.zeros(features))</span><br><span class="line">self.eps = eps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">mean = x.mean(-<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">std = x.std(-<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">return</span> self.a_2 * (x - mean) / (std + self.eps) + self.b_2</span><br></pre></td></tr></table></figure><h4 id="EncoderLayer">EncoderLayer</h4><p>​按照原始论文的模型，EncoderLayer中每个残差连接后都接一个LayerNorm。单个EncoderLayer的构成为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>x</mi><mo>→</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>f</mi><mtext>-</mtext><mi>a</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>→</mo><mi>x</mi><mo>+</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>f</mi><mtext>-</mtext><mi>a</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>→</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>f</mi><mtext>-</mtext><mi>a</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>→</mo><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>y</mi><mo>→</mo><mi>d</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>→</mo><mi>y</mi><mo>+</mo><mi>d</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>→</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>y</mi><mo>+</mo><mi>d</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>→</mo><mi>z</mi><mo>→</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mtext>-</mtext><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp;x \to self\text{-}attention(x) \to x+self\text{-}attention(x) \to layernorm(x+self\text{-}attention(x)) \to y \\&amp;y \to dense(x) \to y+dense(y) \to layernorm(y+dense(y)) \to z \to next\text{-}layer\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">se</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathnormal">a</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">se</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathnormal">a</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">se</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathnormal">a</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">se</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">se</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">se</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>​<a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html">The Annotated Transformer</a>稍微做了一些修改，将LayerNorm放到SubLayer之前，在SubLayer之后加了一个dropout层。构成如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>→</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>→</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>f</mi><mtext>-</mtext><mi>a</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>→</mo><mspace linebreak="newline"></mspace><mi>d</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy="false">(</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>f</mi><mtext>-</mtext><mi>a</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>→</mo><mi>x</mi><mo>+</mo><mi>d</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy="false">(</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>f</mi><mtext>-</mtext><mi>a</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>→</mo><mi>y</mi><mspace linebreak="newline"></mspace><mi>y</mi><mo>→</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>→</mo><mi>d</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>→</mo><mi>d</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy="false">(</mo><mi>d</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>→</mo><mspace linebreak="newline"></mspace><mi>y</mi><mo>+</mo><mi>d</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy="false">(</mo><mi>d</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>→</mo><mi>z</mi><mo>→</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mtext>-</mtext><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">x \to layernorm(x) \to self\text{-}attention(layernorm(x)) \to \\dropout(self\text{-}attention(layernorm(x))) \to x + dropout(self\text{-}attention(layernorm(x))) \to y \\y \to layernorm(y) \to dense(layernorm(y)) \to dropout(dense(layernorm(y))) \to \\y+dropout(dense(layernorm(y))) \to z \to next\text{-}layer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">se</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathnormal">a</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">se</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathnormal">a</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">se</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathnormal">a</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">se</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">se</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">se</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span></span></span></span></span></p><p>​由于这里把LayerNorm放到了SubLayer之前，所以上面在整个Encoder最后一层后面又再加了一个LayerNorm。总体来看，这里的实现与原论文中是基本一致的，只是对最开始的输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>多做了一次LayerNorm。</p><h5 id="SublayerConnection">SublayerConnection</h5><p>​有上面构成流程图可以看出，无论SubLayer是Self-Attention还是Dense，其前后相关的处理流程都是相同的。这里将SubLayer及其相关操作封装为<code>SublayerConnection</code>类：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SublayerConnection</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">LayerNorm + sublayer(Self-Attenion/Dense) + dropout + 残差连接</span></span><br><span class="line"><span class="string">为了简单，把LayerNorm放到了前面，这和原始论文稍有不同，原始论文LayerNorm在最后。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size, dropout</span>):</span></span><br><span class="line"><span class="built_in">super</span>(SublayerConnection, self).__init__()</span><br><span class="line">self.norm = LayerNorm(size)</span><br><span class="line">self.dropout = nn.Dropout(dropout)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, sublayer</span>):</span></span><br><span class="line"><span class="string">&quot;sublayer是传入的参数，参考DecoderLayer，它可以当成函数调用，这个函数的有一个输入参数&quot;</span></span><br><span class="line"><span class="keyword">return</span> x + self.dropout(sublayer(self.norm(x)))</span><br></pre></td></tr></table></figure><p>​这个类会构造LayerNorm和Dropout，但是Self-Attention或者Dense并不在这里构造，还是放在了<code>EncoderLayer</code>类里，在<code>forward</code>的时候由EncoderLayer传入。这样的好处是更加通用，比如Decoder也是类似的需要在Self-Attention、Attention或者Dense前面后加上LayerNorm和Dropout以及残差连接，我们就可以复用<code>SublayerConnection</code>的代码。</p><h5 id="EncoderLayer-2">EncoderLayer</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncoderLayer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"><span class="string">&quot;EncoderLayer由self-attn和feed forward组成&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size, self_attn, feed_forward, dropout</span>):</span></span><br><span class="line"><span class="built_in">super</span>(EncoderLayer, self).__init__()</span><br><span class="line">self.self_attn = self_attn</span><br><span class="line">self.feed_forward = feed_forward</span><br><span class="line">self.sublayer = clones(SublayerConnection(size, dropout), <span class="number">2</span>)</span><br><span class="line">self.size = size</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, mask</span>):</span></span><br><span class="line"><span class="string">&quot;Follow Figure 1 (left) for connections.&quot;</span></span><br><span class="line">x = self.sublayer[<span class="number">0</span>](x, <span class="keyword">lambda</span> x: self.self_attn(x, x, x, mask))</span><br><span class="line"><span class="keyword">return</span> self.sublayer[<span class="number">1</span>](x, self.feed_forward)</span><br></pre></td></tr></table></figure><p>​为了复用，这里的<code>self_attn</code>层和<code>feed_forward</code>层也是传入的参数，这里只构造两个<code>SublayerConnection</code>类对象。<code>forward</code>首先调用<code>self.sublayer[0]</code>，这是<code>SublayerConnection</code>类的callable对象，最终会调用<code>SublayerConnection</code>类的<code>forward</code>方法。这个方法接受2个参数，一个是输入Tensor，一个是SubLayer的callable对象。在<code>SublayerConnection.forward</code>中，这个 callable对象仅接受一个参数，而<code>self_attn</code>需要4个参数（Query的输入,Key的输入,Value的输入和Mask），不过在Encoder中前3个参数都是输入Tensor，故这里通过lambda函数将<code>self_attn</code>再封装一层，就可以看成只有一个参数<code>x</code>的函数了（mask看成Constance）。</p><h3 id="Decoder">Decoder</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decoder</span>(<span class="params">nn.Module</span>):</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, layer, N</span>):</span></span><br><span class="line"><span class="built_in">super</span>(Decoder, self).__init__()</span><br><span class="line">self.layers = clones(layer, N)</span><br><span class="line">self.norm = LayerNorm(layer.size)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, memory, src_mask, tgt_mask</span>):</span></span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</span><br><span class="line">x = layer(x, memory, src_mask, tgt_mask)</span><br><span class="line"><span class="keyword">return</span> self.norm(x)</span><br></pre></td></tr></table></figure><p>​Decoder也是<code>N=6</code>个DecoderLayer的stack，参数<code>layer</code>是DecoderLayer，它也是一个callable对象，最终<code>__call__</code>会调用<code>DecoderLayer.forward</code>方法，这个方法（后面会介绍）需要4个参数，输入Tensor（<code>x</code>），Encoder层的输出Tensor（<code>memory</code>），输入Encoder的Mask（<code>src_mask</code>）和输入Decoder的Mask（<code>tgt_mask</code>）。所以这里的<code>Decoder.forward</code>也需要这4个参数。</p><h4 id="DecoderLayer">DecoderLayer</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoderLayer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"><span class="string">&quot;Decoder包括self-attn, src-attn, 和feed forward &quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size, self_attn, src_attn, feed_forward, dropout</span>):</span></span><br><span class="line"><span class="built_in">super</span>(DecoderLayer, self).__init__()</span><br><span class="line">self.size = size</span><br><span class="line">self.self_attn = self_attn</span><br><span class="line">self.src_attn = src_attn</span><br><span class="line">self.feed_forward = feed_forward</span><br><span class="line">self.sublayer = clones(SublayerConnection(size, dropout), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, memory, src_mask, tgt_mask</span>):</span> </span><br><span class="line">m = memory</span><br><span class="line">x = self.sublayer[<span class="number">0</span>](x, <span class="keyword">lambda</span> x: self.self_attn(x, x, x, tgt_mask))</span><br><span class="line">x = self.sublayer[<span class="number">1</span>](x, <span class="keyword">lambda</span> x: self.src_attn(x, m, m, src_mask))</span><br><span class="line"><span class="keyword">return</span> self.sublayer[<span class="number">2</span>](x, self.feed_forward)</span><br></pre></td></tr></table></figure><p>​<code>DecoderLayer</code>比<code>EncoderLayer</code>多了一个<code>src-attn</code>层，这是Decoder解码时注意（attend to）Encoder的输出（<code>memory</code>）。<code>src-attn</code>和<code>self-attn</code>的实现是一样的，只不过使用的Query，Key和Value输入不同。普通的Attention（<code>src-attn</code>）的Query是前面的SubLayer输入进来的(即来自<code>self-attn</code>的输出)，Key和Value则是Encoder最后一层的输出<code>memory</code>；而Self-Attention的Query，Key和Value都是来自前一层的输出。</p><h4 id="subsequent-mask">subsequent_mask</h4><p>​此外Decoder的self-Attention还有一点与Encoder的self-Attention不同：Decoder在解码t时刻的时候应当只能注意（attend to）1~t时刻的输入，而不能使用t+1时刻及其以后的输入。我们定义了<code>subsequent_mask</code>函数来生成Mask矩阵，代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsequent_mask</span>(<span class="params">size</span>):</span></span><br><span class="line"><span class="string">&quot;Mask out subsequent positions.&quot;</span></span><br><span class="line">attn_shape = (<span class="number">1</span>, size, size)</span><br><span class="line">subsequent_mask = np.triu(np.ones(attn_shape), k=<span class="number">1</span>).astype(<span class="string">&#x27;uint8&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> torch.from_numpy(subsequent_mask) == <span class="number">0</span></span><br></pre></td></tr></table></figure><p>​函数输出为一个下三角方阵，对角线及以下为1。每一行代表一个时刻的序列Mask。函数首先通过<code>np.triu</code>生成上三角阵，然后通过<code>matrix==0</code>把0变成1，把1变成0。</p><h3 id="Multi-Head-Attention">Multi-Head Attention</h3><h4 id="Attention">Attention</h4><p>​Attention（包括Self-Attention和普通的Attention）可以看成一个函数，它的输入是Query、Key、Value和Mask，输出是一个Tensor。其中输出是Value的加权平均，而权重通过Query和Key计算得到。具体的计算如下图所示，计算公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mfrac><mrow><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup></mrow><msqrt><msub><mi>d</mi><mi>k</mi></msub></msqrt></mfrac><mo stretchy="false">)</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">Attention(Q,K,V)=softmax(\frac{QK^T}{\sqrt{d_k}})V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4483em;vertical-align:-0.93em;"></span><span class="mord mathnormal">so</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5183em;"><span style="top:-2.2528em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8572em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.8172em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1828em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></span></p><p><img src="/2021/12/13/AI-Algorithm-13-Transformer/2.png" alt="2"></p><blockquote><p>最常用的两种Attention分别是Additive Attention和Dot-Product(Multiplicative) Attention。这里使用的其实是带scaling factor（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><msqrt><msub><mi>d</mi><mi>k</mi></msub></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{d_k}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3831em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.5864em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8622em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.8222em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1778em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>）的dot-product attention，因此称为<strong>Scaled Dot-Product Attention</strong>。虽然两者在计算复杂度上是大致相当的，但是由于在实践中矩阵乘法有着高度优化的代码实现，所以后者在时间/空间性能上更具优势。</p><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">d_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值较小时，Additive Attention和Dot-Product Attention的精度表现是相当的，但随着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">d_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>值增大，Additive Attention的表现会优于Dot-Product Attention。这可能是由于随着特征尺度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">d_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的增大，矩阵乘法运算的内积值的数量级越来越大（为啥？假设参与点积的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>中的元素符合均值为0，方差为1的随机分布，则它们的点积<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>⋅</mo><mi>k</mi><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>d</mi><mi>k</mi></msub></msubsup><msub><mi>q</mi><mi>i</mi></msub><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">q \cdot k=\sum_{i=1}^{d_k}q_ik_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2887em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.989em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的均值为0，方差为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">d_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>），更容易落到softmax函数梯度较小的区域，造成梯度消失。因此加入了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><msqrt><msub><mi>d</mi><mi>k</mi></msub></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{d_k}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3831em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.5864em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8622em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.8222em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1778em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>来调整内积大小。</p></blockquote><p>代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attention</span>(<span class="params">query, key, value, mask=<span class="literal">None</span>, dropout=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;Compute &#x27;Scaled Dot Product Attention&#x27;&quot;</span></span><br><span class="line">    d_k = query.size(-<span class="number">1</span>)</span><br><span class="line">    scores = torch.matmul(query, key.transpose(-<span class="number">2</span>, -<span class="number">1</span>)) \</span><br><span class="line">             / math.sqrt(d_k)</span><br><span class="line">    <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        scores = scores.masked_fill(mask == <span class="number">0</span>, -<span class="number">1e9</span>)</span><br><span class="line">    p_attn = F.softmax(scores, dim = -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        p_attn = dropout(p_attn)</span><br><span class="line">    <span class="keyword">return</span> torch.matmul(p_attn, value), p_attn</span><br></pre></td></tr></table></figure><p>​下面以一个实际的例子对上述代码进行理解。</p><blockquote><p>假设Q的shape为<code>(30,8,33,64)</code>，其中30为batch，8为head个数（后面会讲何为head），33为序列长度，64为每个时刻的特征向量长度。K和Q的shape必须相同，而V可以不同，但这里的实现也是相同的。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d_k = query.size(-<span class="number">1</span>)</span><br><span class="line">scores = torch.matmul(query, key.transpose(-<span class="number">2</span>, -<span class="number">1</span>)) / math.sqrt(d_k)</span><br></pre></td></tr></table></figure><p>​这两行代码实现了公式中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup></mrow><msqrt><msub><mi>d</mi><mi>k</mi></msub></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{QK^T}{\sqrt{d_k}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6275em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0895em;"><span style="top:-2.5864em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8622em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.8222em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1778em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">Q</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9191em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，不同的是，公式中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>指的是二维矩阵，而代码中<code>query</code>和<code>key</code>是4D-Tensor，包含了batch和head维度。<a href="https://pytorch.org/docs/master/generated/torch.matmul.html#torch.matmul"><code>torch.matmul</code></a>只会对Tensor的最后两个维度执行矩阵乘法。则输出的<code>scores</code>的shape为<code>(30,8,33,33)</code>，要怎么理解呢？抛开前两个维度不看，那么对于一个shape为<code>(33,33)</code>的attention矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span>而言，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>就表示时刻<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>注意（attend to）时刻<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>的得分（未经过softmax归一化）。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        scores = scores.masked_fill(mask == <span class="number">0</span>, -<span class="number">1e9</span>)</span><br></pre></td></tr></table></figure><p>​这两行代码将<code>scores</code>矩阵中对应到<code>mask</code>为0的位置的值置为一个很小的负值，这样后面经过softmax函数后，该位置的概率就是一个无限接近0的值（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mo>−</mo><mn>1</mn><mi>e</mi><mn>9</mn></mrow></msup><mo>≈</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">e^{-1e9}≈0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mord mathnormal mtight">e</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>）。</p><p>​对于不同的Attention，<code>mask</code>的shape是不同的：</p><ul><li>Encoder Self-Attention和Decoder的普通Attention：<code>mask</code>的shape为<code>(30,1,1,33)</code>，因为8个head的Mask都是一样的，所以第二维为1。第三维为1是因为每个时刻都可以注意（attend to）其他任意时刻(为1的维度在执行加减/逻辑运算时会自动<a href="https://zhuanlan.zhihu.com/p/86997775">broadcasting</a>)。那有人就会问了，既然都可以attend to 所有时刻了，还要<code>mask</code>干嘛？首先是为了（函数设计）计算形式统一，还有就是因为30个batch的序列长度的最大值为33，不足33的样本会在序列后做padding，<code>mask</code>可以将padding的部分屏蔽掉。</li><li>Decoder Self-Attention：<code>mask</code>的shape为<code>(30,1,33,33)</code>，每个时刻对应<code>(33,33)</code>矩阵的一行，对于序列长度不满33的样本，例如长度为30，则要对<code>subsequent_mask(30)</code>的输出矩阵做padding，右侧做3列zero-pad（假设pad值为0），下侧做最后一行外翻的padding（其实后面可以看到，下侧做什么padding都无所谓，在标签平滑时标签为pad值的整行概率分布都会被置0）。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p_attn = F.softmax(scores, dim = -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        p_attn = dropout(p_attn)</span><br></pre></td></tr></table></figure><p>​对<code>scores</code>求softmax，将得分转化为归一化的概率分布<code>p_attn</code>。如果有<code>dropput</code>，还要对<code>p_attn</code>进行dropout（这也是原论文中没有的）。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> torch.matmul(p_attn, value), p_attn</span><br></pre></td></tr></table></figure><p>​最后对<code>p_attn</code>和<code>value</code>（的最后两维）做矩阵乘法，<code>p_attn</code>的shape为<code>(30,8,33,33)</code>，<code>value</code>的shape为<code>(30,8,33,64)</code>，返回Tensor的shape为<code>(30,8,33,64)</code>。</p><h4 id="Muilt-head">Muilt-head</h4><p>​所谓Multi-head，就只是多做几次同样的事情（参数不共享），然后把结果拼接。对于每一个Head，都使用三个权重矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mi>Q</mi></msup></mrow><annotation encoding="application/x-tex">W^Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">Q</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mi>K</mi></msup></mrow><annotation encoding="application/x-tex">W^K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mi>V</mi></msup></mrow><annotation encoding="application/x-tex">W^V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span></span></span></span></span></span></span></span>把输入转换成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>。然后对每一个Head进行Attention的计算，然后把N个Head的Attention输出拼接起来，最后用一个权重矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mi>O</mi></msup></mrow><annotation encoding="application/x-tex">W^O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">O</span></span></span></span></span></span></span></span></span></span></span>把输出压缩一下。用公式表示如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>M</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>i</mi><mi>H</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>C</mi><mi>o</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>t</mi><mo stretchy="false">(</mo><mi>h</mi><mi>e</mi><mi>a</mi><msub><mi>d</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>h</mi><mi>e</mi><mi>a</mi><msub><mi>d</mi><mi>h</mi></msub><mo stretchy="false">)</mo><msup><mi>W</mi><mi>O</mi></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mspace width="1em"><mi>h</mi><mi>e</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub></mspace></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>A</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>Q</mi><msubsup><mi>W</mi><mi>i</mi><mi>Q</mi></msubsup><mo separator="true">,</mo><mi>K</mi><msubsup><mi>W</mi><mi>i</mi><mi>K</mi></msubsup><mo separator="true">,</mo><mi>V</mi><msubsup><mi>W</mi><mi>i</mi><mi>V</mi></msubsup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}MultiHead(Q,K,V)&amp;=Concat(head_1,\dots,head_h)W^O \\where \quad head_i&amp;=Attention(QW_i^Q,KW_i^K,VW_i^V)\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.1706em;vertical-align:-1.3353em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8353em;"><span style="top:-3.944em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">u</span><span class="mord mathnormal">lt</span><span class="mord mathnormal">i</span><span class="mord mathnormal">He</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span></span></span><span style="top:-2.3247em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">h</span><span class="mord mathnormal">ere</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3353em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8353em;"><span style="top:-3.944em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">O</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3247em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9592em;"><span style="top:-2.4231em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.1809em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.453em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.453em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3353em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>​其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>W</mi><mi>i</mi><mi>Q</mi></msubsup><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub><mo>×</mo><msub><mi>d</mi><mi>k</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">W_i^Q \in \reals^{d_{model}×d_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2361em;vertical-align:-0.2769em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9592em;"><span style="top:-2.4231em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.1809em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>W</mi><mi>i</mi><mi>K</mi></msubsup><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub><mo>×</mo><msub><mi>d</mi><mi>k</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">W_i^K \in \reals^{d_{model}×d_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-2.4413em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>W</mi><mi>i</mi><mi>V</mi></msubsup><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub><mo>×</mo><msub><mi>d</mi><mi>v</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">W_i^V \in \reals^{d_{model}×d_v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-2.4413em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>W</mi><mi>i</mi><mi>O</mi></msubsup><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>h</mi><msub><mi>d</mi><mi>v</mi></msub><mo>×</mo><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub></mrow></msup></mrow><annotation encoding="application/x-tex">W_i^O \in \reals^{hd_v×d_{model}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-2.4413em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">O</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>为head个数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">d_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为key的特征向量长度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">d_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为value的特征向量长度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d_{model}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为输入特征向量长度。具体到我们的例子中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">h=8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub><mo>=</mo><msub><mi>d</mi><mi>v</mi></msub><mo>=</mo><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub><mi mathvariant="normal">/</mi><mi>h</mi><mo>=</mo><mn>64</mn></mrow><annotation encoding="application/x-tex">d_k=d_v=d_{model}/h=64</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">64</span></span></span></span>。具体的结构如下图：</p><img src="/2021/12/13/AI-Algorithm-13-Transformer/3.png" alt="3" style="zoom:67%;"><p>​输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>经过多个并行的线性变换后得到h(8)组Query，Key和Value，然后使用Self-Attention计算得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>个向量，然后（在特征向量维度，即-1维）拼接起来，最后使用一个线性变换进行降维（这里<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><msub><mi>d</mi><mi>v</mi></msub><mo>=</mo><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">hd_v=d_{model}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">h</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其实只是将特征向量维度恢复到与原始输入相同）。</p><p>​代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiHeadedAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, h, d_model, dropout=<span class="number">0.1</span></span>):</span></span><br><span class="line"><span class="string">&quot;Take in model size and number of heads.&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(MultiHeadedAttention, self).__init__()</span><br><span class="line"><span class="keyword">assert</span> d_model % h == <span class="number">0</span></span><br><span class="line"><span class="comment"># We assume d_v always equals d_k</span></span><br><span class="line">self.d_k = d_model // h</span><br><span class="line">self.h = h</span><br><span class="line">self.linears = clones(nn.Linear(d_model, d_model), <span class="number">4</span>)</span><br><span class="line">self.attn = <span class="literal">None</span></span><br><span class="line">self.dropout = nn.Dropout(p=dropout)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, query, key, value, mask=<span class="literal">None</span></span>):</span> </span><br><span class="line"><span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"><span class="comment"># 所有h个head的mask都是相同的 </span></span><br><span class="line">mask = mask.unsqueeze(<span class="number">1</span>)</span><br><span class="line">nbatches = query.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1) 首先使用线性变换，然后把d_model分配给h个Head，每个head为d_k=d_model/h </span></span><br><span class="line">query, key, value = \</span><br><span class="line">[l(x).view(nbatches, -<span class="number">1</span>, self.h, self.d_k).transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> l, x <span class="keyword">in</span> <span class="built_in">zip</span>(self.linears, (query, key, value))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 使用attention函数计算</span></span><br><span class="line">x, self.attn = attention(query, key, value, mask=mask, </span><br><span class="line">dropout=self.dropout)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3) 把8个head的64维向量拼接成一个512的向量。然后再使用一个线性变换(512,521)，shape不变。 </span></span><br><span class="line">x = x.transpose(<span class="number">1</span>, <span class="number">2</span>).contiguous() \</span><br><span class="line">.view(nbatches, -<span class="number">1</span>, self.h * self.d_k)</span><br><span class="line"><span class="keyword">return</span> self.linears[-<span class="number">1</span>](x)</span><br></pre></td></tr></table></figure><p>​首先看<code>__init__</code>构造函数，这里<code>d_model</code>为512，是输入Tensor特征向量维度的大小，也是输出Tensor特征向量维度的大小。因为有<code>h</code>（8）个head，所以每个head的<code>d_k</code>和<code>d_v</code>为512/8=64。接着我们构造了4（3个用于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>线性转换，1个用于输出的线性转换）个输入特征长度为<code>d_model</code>，输出特征长度也为<code>d_model</code>的全连接层列表<code>self.linears</code>，最后构造了一个dropout层。</p><p>​然后来看<code>forward</code>方法，拆解如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># 所有h个head的mask都是相同的 </span></span><br><span class="line">    mask = mask.unsqueeze(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>​输入的<code>mask</code>的shape为<code>(batch,1,seqlen)</code>（Self-Attention）或者<code>(batch,seqlen,seqlen)</code>（Attention），通过<code>unsqueeze(1)</code>将其变为<code>(batch,1,1,seqlen)</code>（Self-Attention）或者<code>(batch,1,seqlen,seqlen)</code>（Attention），如前所述。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query, key, value = \</span><br><span class="line">[l(x).view(nbatches, -<span class="number">1</span>, self.h, self.d_k).transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> l, x <span class="keyword">in</span> <span class="built_in">zip</span>(self.linears, (query, key, value))]</span><br></pre></td></tr></table></figure><p>​这一步完成输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>的线性转换。<code>zip</code>将<code>self.linears</code>和<code>(query, key, value)</code>打包成元组列表，元素个数与最短列表一致，即返回<code>[(self.linears[0],query),(self.linears[1],key),(self.linears[2],value)]</code>。以第一组为例，<code>l(x)</code>相当于<code>self.linears[0](query)</code>，即对<code>query</code>执行线性变换，输入<code>query</code>的shape为<code>(batch,seqlen,512)</code>，线性变换后其实还是<code>(batch,seqlen,512)</code>，然后通过<code>view</code>将其变成<code>(batch,seqlen,8,64)</code>，然后通过<code>transpose</code>转换成<code>(batch,8,seqlen,64)</code>。这就是<code>attention</code>所要求的输入shape。同理可以完成对<code>key</code>和<code>value</code>的线性变换。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, self.attn = attention(query, key, value, mask=mask, </span><br><span class="line">dropout=self.dropout)</span><br></pre></td></tr></table></figure><p>​调用<code>attention</code>函数，计算得到<code>x</code>和<code>self.attn</code>。<code>x</code>的shape为<code>(batch,8,seqlen,64)</code>,而<code>self.attn</code>的shape为<code>(batch,8,seqlen,seqlen)</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = x.transpose(<span class="number">1</span>, <span class="number">2</span>).contiguous().view(nbatches, -<span class="number">1</span>, self.h * self.d_k)</span><br><span class="line"><span class="keyword">return</span> self.linears[-<span class="number">1</span>](x)</span><br></pre></td></tr></table></figure><p>​<code>transpose</code>将<code>x</code>的shape转换为<code>(batch,seqlen,8,64)</code>，<code>contiguous</code>为了解决<code>transpose</code>后<a href="https://zhuanlan.zhihu.com/p/64551412">Tensor不连续的问题</a>，然后通过<code>view</code>转换成<code>(batch,seqlen,512)</code>。最后通过<code>self.linears[-1]</code>对<code>x</code>进行线性变换，输出shape依然是<code>(batch,seqlen,512)</code>。</p><h4 id="应用">应用</h4><p>​在Transformer里，有3个地方用到了Multi-Head Attention：</p><ul><li>Encoder的Self-Attention层：<code>query</code>，<code>key</code>和<code>value</code>都是相同的值，来自Encoder中上一层的输出。每个时刻都可以attend to所有时刻的信息，即mask全1（padding除外）。</li><li>Decoder的Self-Attention层：<code>query</code>，<code>key</code>和<code>value</code>都是相同的值，来自Decoder中上一层的输出。每个时刻仅可attend to当前时刻之前的信息，即mask为下三角阵。</li><li>Encoder-Decoder的普通Attention层：<code>query</code>来自Decoder中上一层的输出，而<code>key</code>和<code>value</code>相同，均来自Encoder最后一层的输出。每个时刻都可以attend to所有时刻的信息，即mask全1（padding除外）。</li></ul><h2 id="全联接子层-Position-wise-Feed-Forward-Networks">全联接子层(Position-wise Feed-Forward Networks)</h2><p>​全联接子层由2个线性变换及它们之间的Relu激活构成，公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mi>F</mi><mi>N</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>x</mi><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mo stretchy="false">)</mo><msub><mi>W</mi><mn>2</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">FFN(x)=max(0,xW_1+b_1)W_2+b_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">FFN</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>​代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositionwiseFeedForward</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;Implements FFN equation.&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d_model, d_ff, dropout=<span class="number">0.1</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(PositionwiseFeedForward, self).__init__()</span><br><span class="line">        self.w_1 = nn.Linear(d_model, d_ff)</span><br><span class="line">        self.w_2 = nn.Linear(d_ff, d_model)</span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.w_2(self.dropout(F.relu(self.w_1(x))))</span><br></pre></td></tr></table></figure><p>​其中，FFN的输入输出的特征向量维度<code>d_model</code>为512，隐藏层的特征向量维度<code>d_ff</code>为2048，在两个线性变换之间除了Relu还用了一个dropout。</p><h2 id="Embedding和Softmax">Embedding和Softmax</h2><p>与其他序列转换模型一样，输入的词序列都是字典ID序列，因此需要通过Embedding转化成<code>d_model</code>维的特征向量，源语言和目标语言都需要Embedding。代码实现如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Embeddings</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d_model, vocab</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Embeddings, self).__init__()</span><br><span class="line">        self.lut = nn.Embedding(vocab, d_model)</span><br><span class="line">        self.d_model = d_model</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.lut(x) * math.sqrt(self.d_model)</span><br></pre></td></tr></table></figure><p>这里<code>forward</code>方法中除了通过<code>nn.Embedding</code>对输入<code>x</code>进行Embedding外，还乘上了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{d_{model}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1828em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8572em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.8172em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1828em;"><span></span></span></span></span></span></span></span></span>。</p><p>此外还需要将Decoder的输出Tensor转化成预测下一个词的概率分布，这就是通过前面提到的包含了softmax的<code>Generator</code>实现的。</p><h2 id="位置编码-Positional-Encoding">位置编码(Positional Encoding)</h2><p>由于我们的模型不包含任何RNN和CNN，也就没有任何提取序列位置信息的能力，所以需要要给序列注入一些关于相对位置或绝对位置的信息，因此引入了<strong>位置编码</strong>（<strong>Positional Encoding</strong>）。位置编码与embedding得到的特征向量有相同的维度<code>d_model</code>，因此两者可以通过<strong>相加</strong>的方式完成位置信息的注入。在这里，使用以下公式生产位置编码：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><msub><mi>E</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>s</mi><mo separator="true">,</mo><mn>2</mn><mi>i</mi><mo stretchy="false">)</mo></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>s</mi><mi mathvariant="normal">/</mi><mn>1000</mn><msup><mn>0</mn><mrow><mn>2</mn><mi>i</mi><mi mathvariant="normal">/</mi><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub></mrow></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><msub><mi>E</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>s</mi><mo separator="true">,</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>s</mi><mi mathvariant="normal">/</mi><mn>1000</mn><msup><mn>0</mn><mrow><mn>2</mn><mi>i</mi><mi mathvariant="normal">/</mi><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub></mrow></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}PE_{(pos,2i)}&amp;=sin(pos/10000^{2i/d_{model}}) \\PE_{(pos,2i+1)}&amp;=cos(pos/10000^{2i/d_{model}})\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.196em;vertical-align:-1.348em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.848em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">os</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.312em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">os</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.348em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.848em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord mathnormal">os</span><span class="mord">/1000</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span><span class="mord mtight">/</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.312em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">cos</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord mathnormal">os</span><span class="mord">/1000</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span><span class="mord mtight">/</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.348em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>s</mi><mi>e</mi><mi>q</mi><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">pos \in [0, seqlen)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">os</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">se</span><span class="mord mathnormal" style="margin-right:0.01968em;">ql</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>代表序列位置序号，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2i \in [0, d_{model})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>代表特征向量的偶数维，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2i+1 \in [0, d_{model})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>代表特征向量的奇数维。位置编码本身是表征绝对位置的信息，选择这种方式进行位置编码的好处就是：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><msub><mi>E</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mo>+</mo><mi>k</mi></mrow></msub></mrow><annotation encoding="application/x-tex">PE_{pos+k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">os</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>可以表示成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><msub><mi>E</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">PE_{pos}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">os</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>的线性函数(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo><mo>+</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">sin(a+b)=sin(a)cos(b)+cos(a)sin(b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mord mathnormal">cos</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">cos</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>)，也就提供了表达相对位置信息的能力。</p><p>位置编码的代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositionalEncoding</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;Implement the PE function.&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d_model, dropout, max_len=<span class="number">5000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(PositionalEncoding, self).__init__()</span><br><span class="line">        self.dropout = nn.Dropout(p=dropout)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Compute the positional encodings once in log space.</span></span><br><span class="line">        pe = torch.zeros(max_len, d_model)</span><br><span class="line">        position = torch.arange(<span class="number">0</span>, max_len).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        div_term = torch.exp(torch.arange(<span class="number">0</span>, d_model, <span class="number">2</span>) *</span><br><span class="line">                             -(math.log(<span class="number">10000.0</span>) / d_model))</span><br><span class="line">        pe[:, <span class="number">0</span>::<span class="number">2</span>] = torch.sin(position * div_term)</span><br><span class="line">        pe[:, <span class="number">1</span>::<span class="number">2</span>] = torch.cos(position * div_term)</span><br><span class="line">        pe = pe.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        self.register_buffer(<span class="string">&#x27;pe&#x27;</span>, pe)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = x + Variable(self.pe[:, :x.size(<span class="number">1</span>)], </span><br><span class="line">                         requires_grad=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self.dropout(x)</span><br></pre></td></tr></table></figure><p>​计算过程与公式一一对应，不再赘述。这里是通过<code>register_buffer</code>函数将<code>pe</code>保存下来。<code>register_buffer</code>通常用来保存一些模型参数以外的值。比如在BatchNorm中，我们需要保存<code>running_mean</code>(Moving Average)，它不是模型的参数(不用做梯度下降)，但是模型会修改它，而且在推理的时候也要使用它。这里也是类似的，<code>pe</code>是一个提前计算好的常量，我们在forward要用到它。如果我们保存(序列化)模型到磁盘的话，PyTorch框架也会帮我们保存buffer里的数据到磁盘，这样反序列化的时候能恢复它们。</p><h2 id="完整模型">完整模型</h2><p>​构造完整模型的代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_model</span>(<span class="params">src_vocab, tgt_vocab, N=<span class="number">6</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">d_model=<span class="number">512</span>, d_ff=<span class="number">2048</span>, h=<span class="number">8</span>, dropout=<span class="number">0.1</span></span>):</span> </span><br><span class="line">c = copy.deepcopy</span><br><span class="line">attn = MultiHeadedAttention(h, d_model)</span><br><span class="line">ff = PositionwiseFeedForward(d_model, d_ff, dropout)</span><br><span class="line">position = PositionalEncoding(d_model, dropout)</span><br><span class="line">model = EncoderDecoder(</span><br><span class="line">Encoder(EncoderLayer(d_model, c(attn), c(ff), dropout), N),</span><br><span class="line">Decoder(DecoderLayer(d_model, c(attn), c(attn), c(ff), dropout), N),</span><br><span class="line">nn.Sequential(Embeddings(d_model, src_vocab), c(position)),</span><br><span class="line">nn.Sequential(Embeddings(d_model, tgt_vocab), c(position)),</span><br><span class="line">Generator(d_model, tgt_vocab))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机初始化参数，这非常重要</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> model.parameters():</span><br><span class="line"><span class="keyword">if</span> p.dim() &gt; <span class="number">1</span>:</span><br><span class="line">nn.init.xavier_uniform(p)</span><br><span class="line"><span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><p>​其中，<code>src_vocab</code>是源语言字典词数，<code>tgt_vocab</code>是目标语言字典词数。</p><p>​首先将<code>copy.deepcopy</code>重命名为<code>c</code>，使得后续代码能简介一点。</p><p>​然后构造了<code>MultiHeadedAttention</code>、<code>PositionwiseFeedForward</code>和<code>PositionalEncoding</code>类的对象<code>attn</code>、<code>ff</code>和<code>position</code>。</p><p>​最后构造<code>EncoderDecoder</code>类对象，需要<code>encoder</code>、<code>decoder</code>、<code>src_embed</code>、<code>tgt_embed</code>和<code>generator</code>5个参数：</p><ul><li><code>encoder</code>/<code>decoder</code>：由N个<code>EncoderLayer</code>/<code>DecoderLayer</code>组成，而<code>EncoderLayer</code>/<code>DecoderLayer</code>还需要传入<code>attn</code>（<code>DecoderLayer</code>的<code>self-atten</code>和<code>src-atten</code>结构相同，只是输入不同）和<code>ff</code>这些SubLayer，因为这些SubLayer的结构相同，只需要通过deepcopy拷贝一份，而不需要重新构造。</li><li><code>src_embed</code>/<code>tgt_embed</code>：由一个<code>Embeddings</code>层和位置编码层<code>c(position)</code>组成。</li><li><code>generator</code>：直接构造就行了。</li></ul><h1>训练</h1><h2 id="Batches-and-Masking">Batches and Masking</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Batch</span>:</span></span><br><span class="line">    <span class="string">&quot;Object for holding a batch of data with mask during training.&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, src, trg=<span class="literal">None</span>, pad=<span class="number">0</span></span>):</span></span><br><span class="line">        self.src = src</span><br><span class="line">        self.src_mask = (src != pad).unsqueeze(-<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> trg <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.trg = trg[:, :-<span class="number">1</span>]</span><br><span class="line">            self.trg_y = trg[:, <span class="number">1</span>:]</span><br><span class="line">            self.trg_mask = \</span><br><span class="line">                self.make_std_mask(self.trg, pad)</span><br><span class="line">            self.ntokens = (self.trg_y != pad).data.<span class="built_in">sum</span>()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_std_mask</span>(<span class="params">tgt, pad</span>):</span></span><br><span class="line">        <span class="string">&quot;Create a mask to hide padding and future words.&quot;</span></span><br><span class="line">        tgt_mask = (tgt != pad).unsqueeze(-<span class="number">2</span>)</span><br><span class="line">        tgt_mask = tgt_mask &amp; Variable(</span><br><span class="line">            subsequent_mask(tgt.size(-<span class="number">1</span>)).type_as(tgt_mask.data))</span><br><span class="line">        <span class="keyword">return</span> tgt_mask</span><br></pre></td></tr></table></figure><p>​<code>Batch</code>类构造函数的输入为<code>src</code>、<code>trg</code>和<code>pad</code>，<code>src</code>为源语言样本，<code>trg</code>为目标语言的样本，可以为<code>None</code>，因为推理阶段不需要。</p><p>​举个例子，假设要构建一个训练阶段的Batch，<code>src</code>的shape为<code>(48,20)</code>，48为batch大小，20为最长句子长度，长度不足的句子用<code>pad</code>填充成长度20。<code>trg</code>的shape为<code>(48,25)</code>，表示翻译后最长句子为25个词，同样长度不足也会用<code>pad</code>做padding。</p><p>​<code>self.src</code>是Encoder的输入。<code>self.src_mask</code>将<code>src</code>中所有不等于<code>pad</code>值的位置都置为1，表示可以attend to除pad值外所有时刻。<code>unsqueeze(-2)</code>将<code>src_mask</code>的shape转换为<code>(48,1,20)</code>，这符合上面<code>MultiHeadedAttention.forward</code>输入<code>mask</code>的尺寸要求。</p><p>​<code>self.trg</code>和<code>self.trg_y</code>分别为Decoder的输入和输出损失计算时的真值标签，两者的shape均为<code>(48,24)</code>，一个去尾，一个掐头，这样Decoder的输出就为已知当前时刻词，预测下一时刻词在字典中的概率分布。举个实际的例子，假设<code>trg</code>为<code>&lt;sos&gt; it is a good day &lt;eos&gt;</code>，则<code>self.trg</code>为<code>&lt;sos&gt; it is a good day</code>，而<code>self.trg_y</code>为<code>it is a good day &lt;eos&gt;</code>。</p><p>​<code>self.trg_mask</code>通过<code>make_std_mask</code>函数得到，其中会调用前面介绍的<code>subsequent_mask</code>生成下三角阵，注意这里在逻辑与运算前，tgt_mask的shape为<code>(48,1,24)</code>，而下三角阵的shape为<code>(1,24,24)</code>，这里的逻辑与运算同样是利用了pytorch的<a href="https://zhuanlan.zhihu.com/p/86997775">广播机制</a>，输出的<code>tgt_mask</code>的shape为<code>(48,24,24)</code>。</p><h2 id="训练循环">训练循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_epoch</span>(<span class="params">data_iter, model, loss_compute</span>):</span></span><br><span class="line">    <span class="string">&quot;Standard Training and Logging Function&quot;</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    total_tokens = <span class="number">0</span></span><br><span class="line">    total_loss = <span class="number">0</span></span><br><span class="line">    tokens = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, batch <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_iter):</span><br><span class="line">        out = model.forward(batch.src, batch.trg, </span><br><span class="line">                            batch.src_mask, batch.trg_mask)</span><br><span class="line">        loss = loss_compute(out, batch.trg_y, batch.ntokens)</span><br><span class="line">        total_loss += loss</span><br><span class="line">        total_tokens += batch.ntokens</span><br><span class="line">        tokens += batch.ntokens</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">1</span>:</span><br><span class="line">            elapsed = time.time() - start</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Epoch Step: %d Loss: %f Tokens per Sec: %f&quot;</span> %</span><br><span class="line">                    (i, loss / batch.ntokens, tokens / elapsed))</span><br><span class="line">            start = time.time()</span><br><span class="line">            tokens = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> total_loss / total_toke </span><br></pre></td></tr></table></figure><p>​上面是训练一个epoch的代码。遍历一个epoch中所有的batch，调用<code>model.forward</code>方法做前向推理，其中输入参数<code>model</code>即为<code>make_model</code>函数构建的完整模型。然后通过<code>loss_compute</code>计算损失和反向传播，参数是模型的预测<code>out</code>，真值标签<code>batch.trg_y</code>和batch中所有有效词的个数<code>batch.ntokens</code>。<code>loss_compute</code>是后面两个例子中定义的<code>SimpleLossCompute</code>类或<code>MultiGPULossCompute</code>类的callable对象，<code>MultiGPULossCompute</code>类比较复杂，实现了多GPU的训练。</p><h2 id="训练数据和分批">训练数据和分批</h2><ul><li>WMT 2014 English-German dataset：450万组句子对，字典词数37000；</li><li>WMT 2014 English-French dataset：3600万组句子对，字段词数32000；</li></ul><p>​句子对根据句子长度进行分批，每个batch大约分别包含25000个源语言词和目标语言词。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">global</span> max_src_in_batch, max_tgt_in_batch</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_size_fn</span>(<span class="params">new, count, sofar</span>):</span></span><br><span class="line">    <span class="string">&quot;Keep augmenting batch and calculate total number of tokens + padding.&quot;</span></span><br><span class="line">    <span class="keyword">global</span> max_src_in_batch, max_tgt_in_batch</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">1</span>:</span><br><span class="line">        max_src_in_batch = <span class="number">0</span></span><br><span class="line">        max_tgt_in_batch = <span class="number">0</span></span><br><span class="line">    max_src_in_batch = <span class="built_in">max</span>(max_src_in_batch,  <span class="built_in">len</span>(new.src))</span><br><span class="line">    max_tgt_in_batch = <span class="built_in">max</span>(max_tgt_in_batch,  <span class="built_in">len</span>(new.trg) + <span class="number">2</span>)</span><br><span class="line">    src_elements = count * max_src_in_batch</span><br><span class="line">    tgt_elements = count * max_tgt_in_batch</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(src_elements, tgt_elements)</span><br></pre></td></tr></table></figure><p>​这里定义了一个<code>batch_size_fn</code>函数，是用来作为后面重载自<a href="https://torchtext.readthedocs.io/en/latest/data.html#iterators"><code>torchtext.data.Iterator</code></a>的<code>MyIterator</code>类的参数，该函数返回新样本添加到batch中后，新的有效的batch size。这对动态调整batch size非常有用。</p><h2 id="优化器">优化器</h2><p>​这里使用的是Adam算法，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>1</mn></msub><mo>=</mo><mn>0.9</mn></mrow><annotation encoding="application/x-tex">\beta _{1}=0.9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.9</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>2</mn></msub><mo>=</mo><mn>0.98</mn></mrow><annotation encoding="application/x-tex">\beta _{2}=0.98</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.98</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>9</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\epsilon=10^{-9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span>。并且会在训练过程中改变学习率，遵循以下公式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>l</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>=</mo><msubsup><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow><mrow><mo>−</mo><mn>0.5</mn></mrow></msubsup><mo>⋅</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>s</mi><mi>t</mi><mi>e</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>u</mi><msup><mi>m</mi><mrow><mo>−</mo><mn>0.5</mn></mrow></msup><mo separator="true">,</mo><mi>s</mi><mi>t</mi><mi>e</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>⋅</mo><mi>w</mi><mi>a</mi><mi>r</mi><mi>m</mi><mi>u</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>p</mi><msup><mi>s</mi><mrow><mo>−</mo><mn>1.5</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lrate=d_{model}^{-0.5} \cdot min(step\_num^{-0.5},step\_num \cdot warmup\_steps^{-1.5})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1555em;vertical-align:-0.2914em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.4086em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">0.5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2914em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1741em;vertical-align:-0.31em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">0.5</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1741em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">m</span><span class="mord mathnormal">u</span><span class="mord mathnormal">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1.5</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>​大概的意思是，在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mi>a</mi><mi>r</mi><mi>m</mi><mi>u</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">warmup\_steps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9251em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">m</span><span class="mord mathnormal">u</span><span class="mord mathnormal">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span>（这里取4000）期间，学习率随着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>e</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">step\_num</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9251em;vertical-align:-0.31em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span></span></span></span>线性上升；之后便逐渐下降。实现代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoamOpt</span>:</span></span><br><span class="line">    <span class="string">&quot;Optim wrapper that implements rate.&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, model_size, factor, warmup, optimizer</span>):</span></span><br><span class="line">        self.optimizer = optimizer</span><br><span class="line">        self._step = <span class="number">0</span></span><br><span class="line">        self.warmup = warmup</span><br><span class="line">        self.factor = factor</span><br><span class="line">        self.model_size = model_size</span><br><span class="line">        self._rate = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;Update parameters and rate&quot;</span></span><br><span class="line">        self._step += <span class="number">1</span></span><br><span class="line">        rate = self.rate()</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> self.optimizer.param_groups:</span><br><span class="line">            p[<span class="string">&#x27;lr&#x27;</span>] = rate</span><br><span class="line">        self._rate = rate</span><br><span class="line">        self.optimizer.step()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rate</span>(<span class="params">self, step = <span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;Implement `lrate` above&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            step = self._step</span><br><span class="line">        <span class="keyword">return</span> self.factor * \</span><br><span class="line">            (self.model_size ** (-<span class="number">0.5</span>) *</span><br><span class="line">            <span class="built_in">min</span>(step ** (-<span class="number">0.5</span>), step * self.warmup ** (-<span class="number">1.5</span>)))</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_std_opt</span>(<span class="params">model</span>):</span></span><br><span class="line">    <span class="keyword">return</span> NoamOpt(model.src_embed[<span class="number">0</span>].d_model, <span class="number">2</span>, <span class="number">4000</span>,</span><br><span class="line">            torch.optim.Adam(model.parameters(), lr=<span class="number">0</span>, betas=(<span class="number">0.9</span>, <span class="number">0.98</span>), eps=<span class="number">1e-9</span>))</span><br></pre></td></tr></table></figure><p>​一个关于学习率变化的例子如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Three settings of the lrate hyperparameters.</span></span><br><span class="line">opts = [NoamOpt(<span class="number">512</span>, <span class="number">1</span>, <span class="number">4000</span>, <span class="literal">None</span>), </span><br><span class="line">        NoamOpt(<span class="number">512</span>, <span class="number">1</span>, <span class="number">8000</span>, <span class="literal">None</span>),</span><br><span class="line">        NoamOpt(<span class="number">256</span>, <span class="number">1</span>, <span class="number">4000</span>, <span class="literal">None</span>)]</span><br><span class="line">plt.plot(np.arange(<span class="number">1</span>, <span class="number">20000</span>), [[opt.rate(i) <span class="keyword">for</span> opt <span class="keyword">in</span> opts] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20000</span>)])</span><br><span class="line">plt.legend([<span class="string">&quot;512:4000&quot;</span>, <span class="string">&quot;512:8000&quot;</span>, <span class="string">&quot;256:4000&quot;</span>])</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p><img src="/2021/12/13/AI-Algorithm-13-Transformer/4.png" alt="4"></p><h2 id="正则化">正则化</h2><h3 id="标签平滑-Label-Smoothing">标签平滑(Label Smoothing)</h3><p>​这里使用了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϵ</mi><mrow><mi>l</mi><mi>s</mi></mrow></msub><mo>=</mo><mn>0.1</mn></mrow><annotation encoding="application/x-tex">\epsilon _{ls}=0.1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.1</span></span></span></span>的标签平滑，会损害<a href="https://www.zhihu.com/question/58482430">perplexty</a>指标，但是可以提高精度和<a href="https://zhuanlan.zhihu.com/p/338488036">BLEU</a>分数。</p><p>​对于何为标签平滑，说人话就是将真值标签的概率分布从<strong>非0即1</strong>转变为真值的概率最大（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><msub><mi>ϵ</mi><mrow><mi>l</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">1-\epsilon _{ls}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>），其他非真值（pad值除外）平均分享<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϵ</mi><mrow><mi>l</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\epsilon _{ls}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（<a href="https://movie.douban.com/subject/3742360/">县长来了</a>，打土豪分田地啦）。这样做就是惩罚对某个结果非常确信的打分，避免过拟合。所以标签平滑也是一种正则化方法嘛。这里的代码实现如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LabelSmoothing</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;Implement label smoothing.&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size, padding_idx, smoothing=<span class="number">0.0</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(LabelSmoothing, self).__init__()</span><br><span class="line">        self.criterion = nn.KLDivLoss(size_average=<span class="literal">False</span>)</span><br><span class="line">        self.padding_idx = padding_idx</span><br><span class="line">        self.confidence = <span class="number">1.0</span> - smoothing</span><br><span class="line">        self.smoothing = smoothing</span><br><span class="line">        self.size = size</span><br><span class="line">        self.true_dist = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, target</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> x.size(<span class="number">1</span>) == self.size</span><br><span class="line">        true_dist = x.data.clone()</span><br><span class="line">        true_dist.fill_(self.smoothing / (self.size - <span class="number">2</span>))</span><br><span class="line">        true_dist.scatter_(<span class="number">1</span>, target.data.unsqueeze(<span class="number">1</span>), self.confidence)</span><br><span class="line">        true_dist[:, self.padding_idx] = <span class="number">0</span></span><br><span class="line">        mask = torch.nonzero(target.data == self.padding_idx)</span><br><span class="line">        <span class="keyword">if</span> mask.dim() &gt; <span class="number">0</span>:</span><br><span class="line">            true_dist.index_fill_(<span class="number">0</span>, mask.squeeze(), <span class="number">0.0</span>)</span><br><span class="line">        self.true_dist = true_dist</span><br><span class="line">        <span class="keyword">return</span> self.criterion(x, Variable(true_dist, requires_grad=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>​首先看<code>__init__</code>构造函数，输入参数<code>size</code>指真值标签概率分布的长度，即词典大小；<code>padding_idx</code>指pad值在字典中的索引id；<code>smoothing</code>指要分出去的概率值。<code>self.criterion</code>选择了前面提到的相对熵损失，其他均为直接赋值，不再赘述。</p><p>​再看<code>forward</code>方法，对输入<code>x</code>为Encoder-Decoder模型的输出（Generator输出的概率分布的log值）经过<code>view</code>转换的Tensor，shape为<code>(batch_size*seq_len,vocab_size)</code>，<code>target</code>为真值标签（非one-hot形式），shape为<code>(batch_size*seq_len)</code>。具体操作拆解如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> x.size(<span class="number">1</span>) == self.size</span><br><span class="line">true_dist = x.data.clone()</span><br></pre></td></tr></table></figure><p>​判断模型输出概率分布log值的长度是否等于词典大小；然后新建一个和模型输出shape相同的<strong>真值分布</strong><code>true_dist</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">true_dist.fill_(self.smoothing / (self.size - <span class="number">2</span>))</span><br><span class="line">true_dist.scatter_(<span class="number">1</span>, target.data.unsqueeze(<span class="number">1</span>), self.confidence)</span><br><span class="line">true_dist[:, self.padding_idx] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>​将<code>self.smoothing</code>均分给<code>self.size - 2</code>个“农民”（<code>-2</code>是因为“土豪”占一个坑，“歪果仁”pad值占一个坑）；将<code>self.confidence</code>分给由<code>target</code>认证的“土豪”；“歪果仁”毛都不给。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mask = torch.nonzero(target.data == self.padding_idx)</span><br><span class="line"><span class="keyword">if</span> mask.dim() &gt; <span class="number">0</span>:</span><br><span class="line">    true_dist.index_fill_(<span class="number">0</span>, mask.squeeze(), <span class="number">0.0</span>)</span><br></pre></td></tr></table></figure><p>​序列长度较短的样本需要padding，其真值标签<code>target</code>的最后就会有pad值的ID，这时则需要将这一标签对应的整个概率分布全置为0，这很好理解，序列中padding位置本来就跟序列没关系，不需要参与损失计算。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.true_dist = true_dist</span><br><span class="line"><span class="keyword">return</span> self.criterion(x, Variable(true_dist, requires_grad=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>​最后将模型输出的概率分布的log值<code>x</code>和标签平滑后的真值分布<code>true_dist</code>送给<code>nn.KLDivLoss</code>计算损失值。</p><p>可以结合下面这个例子来进一步加深理解：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example of label smoothing.</span></span><br><span class="line">crit = LabelSmoothing(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0.4</span>)</span><br><span class="line">predict = torch.FloatTensor([[<span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0.7</span>, <span class="number">0.1</span>, <span class="number">0</span>],</span><br><span class="line">                             [<span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0.7</span>, <span class="number">0.1</span>, <span class="number">0</span>], </span><br><span class="line">                             [<span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0.7</span>, <span class="number">0.1</span>, <span class="number">0</span>]])</span><br><span class="line">v = crit(Variable(predict.log()), </span><br><span class="line">         Variable(torch.LongTensor([<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show the target distributions expected by the system.</span></span><br><span class="line">plt.imshow(crit.true_dist)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​<code>crit.true_dist</code>的值为：</p><blockquote><p>[[0.0000, 0.1333, 0.6000, 0.1333, 0.1333],<br>[0.0000, 0.6000, 0.1333, 0.1333, 0.1333],<br>[0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]</p></blockquote><p>​画成heat-map则如下所示：</p><p><img src="/2021/12/13/AI-Algorithm-13-Transformer/5.png" alt="5"></p><p>​下面这个例子也进一步展示了标签平滑对过分相信某一选择的惩罚：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">crit = LabelSmoothing(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0.1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span>(<span class="params">x</span>):</span></span><br><span class="line">    d = x + <span class="number">3</span> * <span class="number">1</span></span><br><span class="line">    predict = torch.FloatTensor([[<span class="number">0</span>, x / d, <span class="number">1</span> / d, <span class="number">1</span> / d, <span class="number">1</span> / d],</span><br><span class="line">                                 ])</span><br><span class="line">    <span class="comment">#print(predict)</span></span><br><span class="line">    <span class="keyword">return</span> crit(Variable(predict.log()),</span><br><span class="line">                 Variable(torch.LongTensor([<span class="number">1</span>]))).data[<span class="number">0</span>]</span><br><span class="line">plt.plot(np.arange(<span class="number">1</span>, <span class="number">100</span>), [loss(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>)])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/12/13/AI-Algorithm-13-Transformer/6.png" alt="6"></p><h1>两个例子</h1><p>​原文作者还给了一简一繁两个训练的例子和一些其他的进阶玩法，这里暂时pass，有需要再看吧。</p><h1>总结</h1><p>​这里只是对Transformer的基本理论和<a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html">The Annotated Transformer</a>中的代码实现做了一一对应的解读，只回答了<strong>是什么</strong>的问题，至于要回答<strong>为什么</strong>和<strong>怎么用</strong>的问题，道阻且跻。</p><h1>参考</h1><p>[1] <a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a></p><p>[2] <a href="https://kexue.fm/archives/4765">Attention is All You Need 浅读（简介+代码）</a></p><p>[3] <a href="http://fancyerii.github.io/2019/03/09/transformer-codes/">Transformer代码阅读</a></p><p>[4] <a href="https://zhuanlan.zhihu.com/p/130883313">Transformer详解</a></p><p>[5] <a href="https://zhuanlan.zhihu.com/p/107889011">The Annotated Transformer的中文注释版</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [12]：GEMM优化</title>
      <link href="/2021/12/09/AI-Algorithm-12-GEMM/"/>
      <url>/2021/12/09/AI-Algorithm-12-GEMM/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>GEMM（General Matrix Multiplication，通用矩阵乘）是深度学习或其他涉及科学计算领域中常用的计算操作，也是消耗计算资源较大的操作，对其做性能优化就很有必要。</p><h1>基本概念</h1><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>C</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>A</mi><mi>B</mi><mspace width="1em"><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo>∈</mo><msup><mi>R</mi><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow></msup></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>C</mi><mrow><mi>m</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></munderover><msub><mi>A</mi><mrow><mi>m</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><msub><mi>B</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub><mspace width="1em"><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo separator="true">,</mo><mi>k</mi><mo>∈</mo><msup><mi>R</mi><mi>n</mi></msup></mspace></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}C&amp;=AB \quad A,B\in R^{n×n} \\C_{m,n}&amp;=\sum_{k=1}^KA_{m,k}B_{k,n} \quad m,n,k \in R^n\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.9304em;vertical-align:-2.2152em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7152em;"><span style="top:-5.7036em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.2152em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2152em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7152em;"><span style="top:-5.7036em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8213em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.2152em;"><span class="pstrut" style="height:3.8283em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2152em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>的尺寸分别为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>×</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">M×K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>×</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">K×N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>×</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">M×N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>。如下图所示：</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/1.svg" alt="1"></p><p>基础实现（伪）代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; M; m++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; N; n++) &#123;</span><br><span class="line">    C[m][n] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; K; k++) &#123;</span><br><span class="line">      C[m][n] += A[m][k] * B[k][n];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意我们这里与<a href="https://github.com/flame/how-to-optimize-gemm/wiki">how to optimize gemm</a>保持一致，采用列优先（column-major）顺序存储矩阵元素。即元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A[m][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>的索引值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>×</mo><mi>M</mi><mo>+</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">k×M+m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>。</p></blockquote><p>对于GEMM性能的优化可以从两个方面入手：</p><ul><li><ol><li>算法分析角度：根据矩阵乘计算特性，从数学角度优化，如前面提到的<a href="https://no5-aaron-wu.github.io/2021/11/18/AI-Algorithm-6-Strassen/">Strassen算法</a>和<a href="https://no5-aaron-wu.github.io/2021/11/16/AI-Algorithm-4-Winograd/">Winograd算法</a>，有兴趣可以传送过去，这里不再赘述；</li></ol></li><li><ol start="2"><li>软件优化角度：根据计算机体系结构的特点，选择性的调整计算顺序，主要有<strong>循环拆分向量化</strong>和<strong>内存重排</strong>等，后续将以<a href="https://github.com/flame/how-to-optimize-gemm/wiki">how to optimize gemm</a>为参考展开讲。</li></ol></li></ul><h1>How to optimize gemm</h1><p>在考虑优化方法前，我们先看一下基础实现方法的计算操作数和访存量情况（不考虑<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>矩阵初始化为0的操作）：</p><ul><li>计算操作数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>M</mi><mi>N</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">2MNK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.10903em;">MN</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>分别为3层循环次数，2为最内层循环的1次乘法和1次加法；</li><li>访存量：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mi>M</mi><mi>N</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">4MNK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.10903em;">MN</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>分别为3层循环次数，4为最内层循环中对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>中元素的内存访问次数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>先读后写，所以要2次。</li></ul><blockquote><p>这里我们将<strong>最内层循环</strong>称为<strong>微内核（micro kernel）</strong>，后面可能会混用这两个概念。</p></blockquote><p><a href="https://github.com/flame/how-to-optimize-gemm/wiki">how to optimize gemm</a>中分步骤详细阐述了优化思路，最终的优化提升情况如下图所示：</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/2.png" alt="2"></p><p>其核心思想就是将输出分块，进行计算拆分，以提高对输入的重用，减少访存。下面对其中几次关键提升展开来探讨一下（原文也介绍了一些无优化或负优化的操作，如<strong>循环展开</strong>、<strong>间接寻址代替指针递增</strong>、<strong>过多的使用普通寄存器</strong>等，这里不展开，有兴趣自己可以看下)。</p><h2 id="1-×-4向量化"><code>1 × 4</code>向量化</h2><h3 id="基础实现">基础实现</h3><p>首先<a href="https://github.com/flame/how-to-optimize-gemm/wiki">how to optimize gemm</a>中第一次明显的优化提升出现在<a href="https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_5">这里</a>，把输出的计算按列拆分成若干个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1×4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>的小块，最内层循环一次计算4个值，如下图：</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/gemm-1x4.svg" alt="gemm-1x4"></p><p>实现的（伪）代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; N; n += <span class="number">4</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; M; m++) &#123;</span><br><span class="line">    C[m][n + <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    C[m][n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    C[m][n + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    C[m][n + <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; K; k++) &#123;</span><br><span class="line">      C[m][n + <span class="number">0</span>] += A[m][k] * B[k][n + <span class="number">0</span>];</span><br><span class="line">      C[m][n + <span class="number">1</span>] += A[m][k] * B[k][n + <span class="number">1</span>];</span><br><span class="line">      C[m][n + <span class="number">2</span>] += A[m][k] * B[k][n + <span class="number">2</span>];</span><br><span class="line">      C[m][n + <span class="number">3</span>] += A[m][k] * B[k][n + <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照原文的解释是这里最内层循环中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A[m][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>元素是可以重用的，只需从内存中加载一次就可以供给4次运算。但这里其实在代码中是没有体现的，之所以还能奏效全仰仗编译器的优化能力（即编译器能够在编译优化时将上述代码中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A[m][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>加载到某一固定寄存器中以实现4次数据复用）。因此该实现的访存量变为了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>2</mn><mo>+</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo stretchy="false">)</mo><mi>M</mi><mi>N</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">(2+1+\frac{1}{4})MNK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.10903em;">MN</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>。</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/1.png" alt="1"></p><h3 id="进一步优化：使用寄存器减少访存">进一步优化：使用寄存器减少访存</h3><p><a href="https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_6">这一步</a>性能有了进一步的优化，主要有两点修改：</p><ul><li>作者<strong>明确</strong>使用了1个寄存器代替了循环中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A[m][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>，一次加载，4次复用，与上一轮优化的目标是一致的，但是只做这一修改的性能相比之前靠编译器完成复用优化的版本还是有一定幅度的性能提升，说明单纯依赖编译器优化并不可靠。</li><li>作者用4个寄存器代替了循环中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo>+</mo><mn>0..3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">C[m][n+0..3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0..3</span><span class="mclose">]</span></span></span></span>，累加计算先写到寄存器中，等最内层循环结束后再写到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>矩阵对应位置的内存中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>矩阵中每个元素只需写1次。因此我们的访存量变为了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>N</mi><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo stretchy="false">)</mo><mi>M</mi><mi>N</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">MN+(1+\frac{1}{4})MNK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">MN</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.10903em;">MN</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>。</li></ul><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/3.png" alt="3"></p><h3 id="进一步优化：使用指针减少索引开销">进一步优化：使用指针减少索引开销</h3><p><a href="https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_7">这一步</a>用指针指向了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo>+</mo><mn>0..3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">B[k][n + 0..3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0..3</span><span class="mclose">]</span></span></span></span>的首地址，在微内核中只需递增指针即可完成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>的遍历，而不需要计算索引值（一般内存存储并不像伪代码中的二维形式，而是一维的，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">B[k][n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span>的索引值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>K</mi><mo>+</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">nK+k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>每次都要计算）。原文中这一步是有优化收益的，但我实测下来性能提升并不明显（可能跟编译器的优化或指令集不同有关吧）。</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/4.png" alt="4"></p><h2 id="4-×-4向量化"><code>4 × 4</code>向量化</h2><h3 id="基础实现-2">基础实现</h3><p>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1 × 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>向量化类似，<a href>这里</a>把输出的计算按列拆分成若干个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">4×4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>的小块，最内层循环一次计算16个值，如下图所示：</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/gemm-4x4.svg" alt="gemm-4x4"></p><p>实现的（伪）代码可以写成：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; N; n += <span class="number">4</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; M; m += <span class="number">4</span>) &#123;</span><br><span class="line">    C[m + <span class="number">0</span>][n + <span class="number">0.</span><span class="number">.3</span>] = <span class="number">0</span>;</span><br><span class="line">    C[m + <span class="number">1</span>][n + <span class="number">0.</span><span class="number">.3</span>] = <span class="number">0</span>;</span><br><span class="line">    C[m + <span class="number">2</span>][n + <span class="number">0.</span><span class="number">.3</span>] = <span class="number">0</span>;</span><br><span class="line">    C[m + <span class="number">3</span>][n + <span class="number">0.</span><span class="number">.3</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; K; k++) &#123;</span><br><span class="line">      C[m + <span class="number">0</span>][n + <span class="number">0.</span><span class="number">.3</span>] += A[m + <span class="number">0</span>][k] * B[k][n + <span class="number">0.</span><span class="number">.3</span>];</span><br><span class="line">      C[m + <span class="number">1</span>][n + <span class="number">0.</span><span class="number">.3</span>] += A[m + <span class="number">1</span>][k] * B[k][n + <span class="number">0.</span><span class="number">.3</span>];</span><br><span class="line">      C[m + <span class="number">2</span>][n + <span class="number">0.</span><span class="number">.3</span>] += A[m + <span class="number">2</span>][k] * B[k][n + <span class="number">0.</span><span class="number">.3</span>];</span><br><span class="line">      C[m + <span class="number">3</span>][n + <span class="number">0.</span><span class="number">.3</span>] += A[m + <span class="number">3</span>][k] * B[k][n + <span class="number">0.</span><span class="number">.3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里微内核中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>m</mi><mo>+</mo><mn>0..3</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A[m + 0..3][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0..3</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo>+</mo><mn>0..3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">B[k][n + 0..3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0..3</span><span class="mclose">]</span></span></span></span>都是可以复用的。即在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1 × 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>向量化的基础上减少了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>的访存量。在不考虑其他进一步优化操作的情况下，访存量变为了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>2</mn><mo>+</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo stretchy="false">)</mo><mi>M</mi><mi>N</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">(2+\frac{1}{4}+\frac{1}{4})MNK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.10903em;">MN</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>。与未做任何优化对比如下：</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/5.png" alt="5"></p><p>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1 × 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>向量化的基础实现对比如下:</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/6.png" alt="6"></p><h3 id="进一步优化">进一步优化</h3><p>同样的，<a href="https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_6"><strong>使用寄存器减少访存</strong></a>能够减少<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>的访存量，将总的访存量减少到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>N</mi><mo>+</mo><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo stretchy="false">)</mo><mi>M</mi><mi>N</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">MN+(\frac{1}{4}+\frac{1}{4})MNK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">MN</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.10903em;">MN</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>，从而获得性能提升，这是可以预见的。</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/7.png" alt="7"></p><p>但是与相同优化策略下的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1 × 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>向量化测试用例<code>MMult_1x4_6</code>对比，实测下来并没有与文中那样更有优势，可能使用的普通寄存器太多，反而起到了负优化。</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/8.png" alt="8"></p><p>同样的，<a href="https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_7"><strong>使用指针减少索引开销</strong></a>的性能提升也不明显。</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/9.png" alt="9"></p><h3 id="更进一步优化：SIMD">更进一步优化：SIMD</h3><p><a href="https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_10">这一步</a>开始使用SSE指令进行并行计算加速，由于数据类型为double，128位的向量寄存器的并行度为2。实测下来也和预期一样，性能提升明显。</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/10.png" alt="10"></p><h3 id="更进一步优化：大矩阵分块">更进一步优化：大矩阵分块</h3><p>从前面图中也可以看出，随着矩阵尺寸的增大，性能是会下降的。这主要是因为随着尺寸的增大，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>矩阵这种跳列的非连续访问的矩阵（假设是列优先存储）<a href="https://www.cnblogs.com/jokerjason/p/10711022.html">cache miss</a>的情况会越来越严重。</p><p><a href="https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_11">大矩阵分块</a>的目的就是解决cache miss。</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/11.png" alt="11"></p><h3 id="更进一步优化：优化局部内存布局">更进一步优化：优化局部内存布局</h3><p>从上图中可以看到，虽然尺寸＞200之后的性能下降止住了，但是1-200之间还是会有性能下降。这还是因为不能命中L1 Cache的原因导致的。</p><p>因此可以通过<a href="https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_13">优化<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>矩阵的局部内存布局</a>来提高L1 Cache命中。如下图所示：</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/12.png" alt="12"></p><p>假设依然是列优先存储，微内核大小为<code>4 x 4</code>，计算方向是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>方向，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>矩阵的水平方向，每次循环加载4个元素后，就需要跳到下一列去加载4个元素。假设Cache Line Size 为64Byte，数据元素大小为8byte，则执行一次访存操作会将8个元素读到Cache中。</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>矩阵普通的内存排布顺序就如左侧红色箭头所示。每次访存load到Cache Line中实际只需要前四个值，后四个值暂时不会用。当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>的列数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>小的时候，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>循环结束时L1 Cache还没被填满，则每个Cache Line的后四个值还能命中。但当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>的列数足够大时，后四个值还没被用Cache就满了，最早load的Cache Line会被覆盖，当你真正要用后四个值的时候还得重新load，这就是发生了L1 Cache miss。</li><li>而采用右侧这样的内存排布，微内核依次加载的内存是连续的，一次load到Cache Line中8个值会在连续的两次运算中被用到，这就减少来Cache miss，从而提高了性能。</li></ul><p>优化局部内存布局的性能对比情况如下图：</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/13.png" alt="13"></p><p>同样的也可以<a href="https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_15">对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>矩阵的局部内存排布做优化</a>，如下图：</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/14.png" alt="14"></p><p>但是实测下来，与原文所述表现不同的是，对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>矩阵的局部内存排布的优化并没有取得明显的提升，反而出现了一定程度的负优化。</p><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/15.png" alt="15"></p><p>这可能跟<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>矩阵元素的取用顺序有关，对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>而言，微内核的方向（即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>）的方向是垂直方向，每次取完水平方向的4个元素后，会跳到下一行继续取用。</p><ul><li>从整个L1 Cache的角度看，一次微内核中内存块只有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>∗</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">4*K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>大小，以测试中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mn>800</mn></mrow><annotation encoding="application/x-tex">K_{max}=800</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">800</span></span></span></span>，单个元素为8Byte为例，则大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>∗</mo><mn>800</mn><mo>∗</mo><mn>8</mn><mi mathvariant="normal">/</mi><mn>1024</mn><mo>=</mo><mn>25</mn><mi>K</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">4*800*8/1024=25KB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">800</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8/1024</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">25</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>，并没有超过我的电脑的L1 Cache大小（32KB）。</li><li>从Cache Line的角度看，即使是上图左侧的内存排布方式，一次load到Cache Line中的8个值（Cache Line Size = 64B，DataType=double）中的后4个值虽然不会在下一次load前就马上被用掉，但也就隔3次load后就会被用到，所以不会出现L1 Cache miss。</li></ul><p><img src="/2021/12/09/AI-Algorithm-12-GEMM/16.png" alt="16"></p><p>因此对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>矩阵的局部排布优化没有起到预期的效果，反而因为局部内存重排本身的计算代价（这里作者是将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>矩阵的重排操作放在了运行时计算中，对于实际的神经网络而言，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>对应权重，是固定不变的。所以是可以在运行时前的初始化阶段完成重排操作的）导致出现负优化。至于原文中作者为什么能有性能提升，闹不明白（按照作者的描述，他用的1.7Ghz Intel Core i5的MacBook Air，查了下对应的CPU是I5-2557M，其L1 Cache 大小是64KB，这就说不太通了）。</p><h1>QNNPACK</h1><p><a href="https://github.com/pytorch/QNNPACK">QNNPACK</a>（Quantized Neural Network PACKage） 是Facebook 开源的专门用于量化神经网络的计算加速库。是在 <a href="https://github.com/Maratyszcza/NNPACK">NNPACK</a> (Neural Network PACKage) 的基础上，在<a href="https://jackwish.net/blog/2019/neural-network-quantization-introduction-chn.html">量化</a>（Quantization）技术被引入到神经网络中后进一步优化的计算加速库。</p><p>QNNPACK 开源时附带了一份<a href="https://code.fb.com/ml-applications/qnnpack">技术报告性质的博客</a>。其中也描述了QNNPACK对于GEMM优化的思路，与传统方法略有区别，但大同小异。归纳一下，就是针对在<strong>移动端</strong>运行的<strong>量化</strong>后的<strong>神经网络</strong>这一特定应用领域，对微内核尺寸和局部内存重排方式做了特定的处理，以获得更好的性能。</p><h1>总结</h1><p>有时候编译器会默默做很多事，而且计算机硬件的差异也可能会导致结果并不能如预期，所以不能想当然的复制黏贴别人的优化方法，能不能获得性能提升还是得以实测结果为准。</p><h1>参考</h1><p>[1] <a href="https://github.com/flame/how-to-optimize-gemm/wiki">how to optimize gemm</a></p><p>[2] <a href="https://jackwish.net/blog/2019/gemm-optimization.html">通用矩阵乘（GEMM）优化算法</a></p><p>[3] <a href="https://engineering.fb.com/2018/10/29/ml-applications/qnnpack/">QNNPACK: Open source library for optimized mobile deep learning</a></p><p>[4] <a href="https://jackwish.net/blog/2019/neural-network-quantization-introduction-chn.html">神经网络量化简介</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> GEMM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构 [1]：CPU/GPU/NPU算力</title>
      <link href="/2021/12/09/ComputerArch-1-OPS/"/>
      <url>/2021/12/09/ComputerArch-1-OPS/</url>
      
        <content type="html"><![CDATA[<h1>基本术语</h1><h2 id="OPS">OPS</h2><p>Operations Per Second的缩写。</p><ul><li><p>1 TOPS代表处理器每秒钟可进行一万亿次（10^12）操作。</p></li><li><p>1 GOPS代表处理器每秒钟可进行十亿次（10^9）操作。</p></li><li><p>1 MOPS代表处理器每秒钟可进行一百万次（10^6）操作。</p></li><li><p>TOPS同GOPS与MOPS可以换算，都代表每秒钟能处理的次数，单位不同而已。</p></li></ul><p>注意这里的<strong>操作</strong>并不特指float32，也可能是float16，int8，int4等。要符合实际计算时采用的数据类型。</p><h2 id="FLOPS">FLOPS</h2><p>Floating-point Operations Per Second的缩写。</p><p>常被用来估算芯片的计算能力，尤其是在使用到大量<strong>浮点运算</strong>的科学计算领域中。</p><blockquote><p>OPS与FLOPS在AI应用中一般指<strong>乘加</strong>操作。</p></blockquote><h2 id="FLOPs">FLOPs</h2><p>Floating-point Operations的缩写，注意s小写，表示复数。</p><p>意指浮点运算数，理解为计算量。在深度学习中，我们用FLOPs，来衡量算法/模型的复杂度。</p><h2 id="MACs">MACs</h2><p>Multiply–Accumulate Operations的缩写。</p><p>意指乘加累积操作数，同样是计算量，常常被人们与FLOPs概念混淆。实际上1MACs包含一个乘法操作与一个加法操作，等于2FLOPs。</p><h2 id="Ghz">Ghz</h2><p>十亿赫兹（10^9 Hz， 10 0000 0000Hz）。</p><p>GHz是CPU的处理频率，1 GHz 表示CPU一秒有10亿次时钟震荡（电路上表现为脉冲信号）。</p><h1>常见芯片算力</h1><h2 id="NPU">NPU</h2><p>各个AI芯片都会宣传自己的峰值AI算力。</p><h3 id="Apple">Apple</h3><ul><li>A11   0.6TOPS</li></ul><p>第一代Neural Engine，当时Neural Engine主要针对的应用是iPhone新推出的人脸识别锁屏FaceID以及人脸关键点追踪Animoji，且Neural Engine的算力并不对第三方应用开放。</p><ul><li>A12   5 TOPS</li><li>A13   6 TOPS</li><li>A14   11 TOPS</li><li>A15   15.8 TOPS</li></ul><p>注意这里用的是TOPS，不是TFLOPS，已知Apple的ANE（Apple Neural Engine）运算是跑的float16，则这里的OPS就是指每秒可以执行N 万亿次fp16的乘加操作。</p><h3 id="爱芯AX630A"><a href="https://axera-tech.com/product/T7297367876758893768?k=AX630A">爱芯AX630A</a></h3><ul><li>8核NPU，算力32TOPS@int4，8TOPS@int8。其中4核用于神经网络计算</li><li>CPU 4核Cortex A53</li></ul><h3 id="海思Hi3559AV100"><a href="https://www.hisilicon.com/cn/products/smart-vision/public-security/AI-IPC/Hi3559AV100">海思Hi3559AV100</a></h3><ul><li>四核DSP+双核NNIE，算力4TOPS@8bit</li><li>CPU 双核A73 + 三核A53</li></ul><h3 id="NVIDIA-TX2"><a href="https://www.nvidia.cn/autonomous-machines/embedded-systems/jetson-tx2/">NVIDIA TX2</a></h3><ul><li>GPU算力1.33 TFLOPS</li><li>CPU 双核丹佛2和四核Cortex-A57</li></ul><h3 id="安霸AMBA-H22"><a href="https://www.ambarella.com/wp-content/uploads/H22-Product-Brief.pdf">安霸AMBA H22</a></h3><ul><li>CPU 4核Cortex-A53</li></ul><h3 id="安霸AMBA-CV22"><a href="https://www.ambarella.com/wp-content/uploads/CV22-product-brief-consumer.pdf">安霸AMBA CV22</a></h3><ul><li>CPU 4核Cortex-A53</li><li>VPU CVFLow算力4TOPS@8bit</li></ul><h3 id="安霸AMBA-CV5"><a href="https://investor.ambarella.com/node/12581/pdf">安霸AMBA CV5</a></h3><ul><li>CPU 双核Cortex-A76</li><li>VPU  CVFLow算力16TOPS@8bit（传言）</li></ul><h2 id="CPU">CPU</h2><p>CPU芯片一般不会宣传浮点峰值算力，但是可以根据主频，核数，指令集支持情况估算出来。</p><p>估算公式为:  <strong>核数 * 主频 * CPU单个指令周期可以处理的浮点数据个数</strong></p><p>以<a href="https://www.intel.cn/content/www/cn/zh/products/sku/191792/intel-core-i79700-processor-12m-cache-up-to-4-70-ghz/specifications.html"><strong>Intel Core i7 9700</strong></a>为例（此估算方法对ARM-CPU同样适用）：</p><ul><li>核数：8；</li><li>主频：3Ghz，最大睿频4.7Ghz，姑且按3GHz算；</li><li>指令集最高支持到AVX2（又叫AVX256），AVX2引入了FMA操作（通过CPU-Z可以查阅到支持FMA3），由于AVX2和FMA都是支持双发射（即<a href="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#expand=3416&amp;ig_expand=153,153,3171,3171&amp;techs=FMA">吞吐量=2，CPI=0.5</a>），说人话就是一个时钟周期内可以同时开始执行两条指令。所以AVX2一次可以处理2 * 256bit的浮点数据，FMA是浮点相乘和浮点累加两个的融合操作，所以含有FMA的单元处理数据量需要翻倍。即 2(FMA) * 2(双发射) * 256 / 32 = 32个float32数据。</li></ul><p>综上，该CPU的浮点峰值算力为8 * 3G * 32 = 768GFLOPS = 0.768TFLOPS</p><h2 id="GPU">GPU</h2><p>GPU算力计算类似CPU，虽然单核的主频低，但是核数多，以<a href="https://www.nvidia.cn/geforce/graphics-cards/gtx-1660-ti/"><strong>GTX1660Ti</strong></a>为例:</p><ul><li>核数：1536；</li><li>主频：1.5Ghz，加速频率1.77Ghz；</li><li>一个时钟周期可以处理一次浮点运算。即：1次浮点乘或者浮点加运算。</li></ul><p>综上，该GPU的浮点峰值算力为1536 * 1.5G * 1 = 2304GFLOPS = 2.304TFLOPS</p><h1>总结</h1><p>在实际应用中算力只能作为大致参考，代码的运行速度还受I/O，降频等因素影响。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [11]：门控递归单元GRU</title>
      <link href="/2021/12/08/AI-Algorithm-11-GRU/"/>
      <url>/2021/12/08/AI-Algorithm-11-GRU/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>门控递归单元（Gated Recurrent Unit，GRU）是LSTM的一个流行的简化变种，由<a href="http://arxiv.org/pdf/1406.1078v3.pdf">Cho, et al. (2014)</a>提出。</p><h1>算法原理</h1><p>GRU将<strong>遗忘门</strong>和<strong>输入门</strong>合并成一个<strong>更新门（update gate）</strong>（输出为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">z_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>），将胞元状态<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>和隐藏层状态<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>合二为一，并且加了一个作用于隐藏层状态<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>的<strong>重置门（reset gate）</strong>（输出为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">r_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）。</p><p><img src="/2021/12/08/AI-Algorithm-11-GRU/1.png" alt="1"></p><p>GRU聪明的一点就在于使用了同一个门控<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>同时完成了<strong>遗忘</strong>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">1-z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>）和<strong>记忆</strong>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>）的操作。遗忘和记忆的程度之和为1，就保证了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>的尺度不变，也就省去了输出前的tanh操作。</p><h1>与LSTM的对应关系</h1><ul><li><ol><li>GRU的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">h_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>对应到LSTM的胞元状态<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>；</li></ol></li><li><ol start="2"><li>GRU重置门其实对应到LSTM的输出门，则GRU的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mi>t</mi></msub><mo>∗</mo><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">r_t*h_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6153em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>对应到LSTM的隐藏层状态<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">h_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>，相当于隐藏层状态即算即用，也就不用额外的变量存储隐藏层状态了；</li></ol></li><li><ol start="3"><li>GRU的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><msub><mi>z</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">1-z_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对应到LSTM的遗忘门输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">f_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，GRU的更新门输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">z_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对应到LSTM的输入门输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>i</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">i_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>；</li></ol></li></ul><h1>总结</h1><p>GRU能达到与LSTM相同的功能，但参数比LSTM要少，需要的计算资源和时间成本更少，没有理由不流行嘛 ( :</p><h1>参考</h1><p>[1] <a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/">Understanding LSTM Networks</a></p><p>[2] <a href="https://zhuanlan.zhihu.com/p/32481747">人人都能看懂的GRU</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> GRU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [10]：长短期记忆网络LSTM</title>
      <link href="/2021/12/08/AI-Algorithm-10-LSTM/"/>
      <url>/2021/12/08/AI-Algorithm-10-LSTM/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>RNN的不足就在于随着时间序列的增加，前后信息关联度会逐渐减小，存在横向梯度消失现象。即<strong>短期记忆问题</strong>或<strong>长期依赖问题</strong>。为了解决这一问题，LSTM<a href="http://www.bioinf.jku.at/publications/older/2604.pdf">应运而生</a>。</p><h1>算法原理</h1><h2 id="RNN-LSTM">RNN-&gt;LSTM</h2><p>长短期记忆网络（Long Short-Term Memory network，LSTM）是一种特殊的RNN，和RNN一样，其隐藏层有着随时间序列重复的节点，只不过节点内部的结构要更为复杂。</p><p>RNN中隐藏层节点内部的结构非常简单，如果激活函数为tanh，则如下图所示：</p><p><img src="/2021/12/08/AI-Algorithm-10-LSTM/1.png" alt="1"></p><p>LSTM的结构要更为复杂，如下图：</p><p><img src="/2021/12/08/AI-Algorithm-10-LSTM/2.png" alt="2"></p><p>图中各图形符号的含义如下：</p><p><img src="/2021/12/08/AI-Algorithm-10-LSTM/3.png" alt="3"></p><ul><li>黄色方框：神经网络（激活）层（黄框tanh和粉圈tanh的区别就是黄框前是有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mo>⋅</mo><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">W \cdot input+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>的卷积操作的）；</li><li>粉红色圆圈：逐点运算（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⨂</mo></mrow><annotation encoding="application/x-tex">\bigotimes</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⨂</span></span></span></span>即为hadamard product<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⨀</mo></mrow><annotation encoding="application/x-tex">\bigodot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⨀</span></span></span></span>，后续图中公式也用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord">∗</span></span></span></span>表示；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⨁</mo></mrow><annotation encoding="application/x-tex">\bigoplus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⨁</span></span></span></span>即为矩阵加法）；</li><li>黑色箭头线：向量转移；</li><li>箭头汇合：向量合并<code>concat</code>操作；</li><li>箭头分离：向量拷贝供不同模块使用；</li></ul><h2 id="核心思想">核心思想</h2><p>LSTM的核心思想是胞元状态<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>（Cell State）的流动，即图中上方的水平贯穿线。</p><p>胞元状态有点像一个传送带。它沿着时间轴一路往下，每个节点只会对其做一些小的线性变换。信息很容易以不变的方式流过。</p><p><img src="/2021/12/08/AI-Algorithm-10-LSTM/4.png" alt="4"></p><p>所谓的线性变换即为给胞元状态移除或添加信息，这是通过一种叫<strong>门</strong>的结构进行调节的。门可以选择性的让信息通过，由一个sigmoid激活层和一个逐点乘操作组成。sigmoid的输出约束在了0~1之间，即表示让信息通过的程度。一个LSTM节点有3个门结构，用于保持和控制胞元状态。</p><h2 id="结构分解">结构分解</h2><h3 id="遗忘门（forget-gate）">遗忘门（forget gate）</h3><p>决定上一时刻胞元状态<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>的通过/遗忘程度，它的输入是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">h_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>（隐藏层状态，hidden state）和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，输出为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">f_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，即为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>的每一个值生成一个0~1的scale系数。0代表完全遗忘，1代表完全通过。</p><blockquote><p>举一个NLP的例子，胞元状态中可能包含当前主语的性别信息，以便能够使用正确的代词（他她它）。当看到新的主语出现时，则需要忘记旧的主语的性别。</p></blockquote><p><img src="/2021/12/08/AI-Algorithm-10-LSTM/5.png" alt="5"></p><h3 id="输入门-input-gate">输入门(input gate)</h3><p>决定哪些新的信息要被更新进胞元状态，及更新的程度，输入同样是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">h_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，输出为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>i</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">i_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，它作用到一个新的候选值向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>C</mi><mi>t</mi></msub><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde{C_t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0702em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>，这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>C</mi><mi>t</mi></msub><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde{C_t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0702em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>是由tanh激活层对输入做非线性变换得到的。最终生成的信息会逐点加到胞元状态中。</p><blockquote><p>还以NLP为例，我们需要增加一个新的性别到胞元状态中，以替换已经被忘记的旧性别。</p></blockquote><p><img src="/2021/12/08/AI-Algorithm-10-LSTM/6.png" alt="6"></p><p>有了上述两步的输出，就可以将胞元状态由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>更新到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">C_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>了。其实就是做一次逐点的线性变换。乘上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">f_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>来遗忘我们决定遗忘的信息，加上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>i</mi><mi>t</mi></msub><mo>∗</mo><mover accent="true"><msub><mi>C</mi><mi>t</mi></msub><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">i_t*\tilde{C_t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0702em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>来增加新的信息。</p><p><img src="/2021/12/08/AI-Algorithm-10-LSTM/7.png" alt="7"></p><h3 id="输出门（output-gate）">输出门（output gate）</h3><p>决定哪些胞元状态要被输出，及输出的程度。输入同样是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">h_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，输出为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>o</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">o_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，它作用到胞元状态经过tanh激活函数后的向量上。</p><blockquote><p>还以NLP为例，我们现在看到了一个新的主语，则输出信息最好跟动词的选择相关，因为下一个词大概率是谓语。这时输出信息中就可以包含主语是单数还是复数，这决定了动词的形态。</p></blockquote><p><img src="/2021/12/08/AI-Algorithm-10-LSTM/8.png" alt="8"></p><h1>总结</h1><p>LSTM 节点通过门结构对胞元状态上的信息进行线性的修改，从而保证了在时间序列变长的情况下，依然能够保持时间相关性不会衰减。</p><h1>参考</h1><p>[1] <a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/">Understanding LSTM Networks</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LSTM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [9]：循环神经网络RNN</title>
      <link href="/2021/12/08/AI-Algorithm-9-RNN/"/>
      <url>/2021/12/08/AI-Algorithm-9-RNN/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>循环神经网络（Recurrent Neural Networks，RNN）是一种特殊的神经网络模型，常常被用来处理序列数据。</p><h1>基本原理</h1><h2 id="感性认识">感性认识</h2><p>传统的卷积神经网络的结构比较简单：输入层 – 隐藏层 – 输出层。层与层之间是全连接的，层中各神经元之间没有连接。而循环神经网络中隐藏层的神经元结点之间是有连接的。前一次的输出结果，带到下一次的隐藏层中，一起训练。一个NLP的工作原理如下：</p><p>假设输入是一个字符串，对字符串进行分割后有若干有先后顺序的单词作为网络输入：</p><p><img src="/2021/12/08/AI-Algorithm-9-RNN/1.gif" alt="1"></p><p>先将 “what”作为 RNN 的输入，得到输出<code>O1</code></p><p><img src="/2021/12/08/AI-Algorithm-9-RNN/2.gif" alt="2.gif"></p><p>再将“time”输入到 RNN 网络，得到输出<code>O2</code>，这时<strong>前面 “what” 的输出也产生了影响（隐藏层中有一半（定性非定量）是黑色）</strong></p><p><img src="/2021/12/08/AI-Algorithm-9-RNN/3.gif" alt="3.gif"></p><p>以此类推，后续各输入都会受到之前输出结果的影响</p><p><img src="/2021/12/08/AI-Algorithm-9-RNN/4.gif" alt="4.gif"></p><p>我们只需要关心最终的输出<code>O5</code></p><p><img src="/2021/12/08/AI-Algorithm-9-RNN/5.gif" alt="5.gif"></p><p>当然RNN的缺点也显而易见：随着时间序列的增加，前后信息关联度会逐渐减小，存在横向梯度消失现象。说人话就是越早输入的信息对后续的影响越小。短期的记忆影响较大（如橙色区域），但是长期的记忆影响就很小（如黑色和绿色区域）。这就是 RNN 存在的<strong>短期记忆</strong>问题。</p><p><img src="/2021/12/08/AI-Algorithm-9-RNN/1.jpg" alt="1"></p><h2 id="公式推导">公式推导</h2><p>一个简单的 RNN结构实例如图：</p><p><img src="/2021/12/08/AI-Algorithm-9-RNN/1.png" alt="1"></p><p>上图中的 RNN 模型有一个输入层<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>，一个隐藏层<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>和一个输出层<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>为连接输入层与隐藏层的权重矩阵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>为连接隐藏层与输出层的权重矩阵，而<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>为隐藏层中前节点到后节点的权重矩阵。将隐藏层的结构展开后，可以看出对应于不同时刻<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>，其输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝑂</mi><mi>𝑡</mi></msub></mrow><annotation encoding="application/x-tex">𝑂_𝑡</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不仅仅与当前时刻的输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝑥</mi><mi>𝑡</mi></msub></mrow><annotation encoding="application/x-tex">𝑥_𝑡</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>有关，还与上一时刻的隐藏层输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝑆</mi><mrow><mi>𝑡</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">𝑆_{𝑡−1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>有关。总结为公式有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>O</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>V</mi><msub><mi>S</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>S</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>U</mi><msub><mi>x</mi><mi>t</mi></msub><mo>+</mo><mi>W</mi><msub><mi>S</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}O_t&amp;=g(VS_t) \\S_t&amp;=f(Ux_t+WS_{t-1})\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑔</mi></mrow><annotation encoding="application/x-tex">𝑔</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑓</mi></mrow><annotation encoding="application/x-tex">𝑓</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>均代表激活函数，其中RNN激活函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>常用为tanh，至于为什么不用Relu？可以看<a href="https://www.zhihu.com/question/61265076">这里</a></p><p>将上述两个式子合并可得：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>O</mi><mi>t</mi></msub><mo>=</mo><mi>g</mi><mo fence="false" stretchy="true" minsize="3em" maxsize="3em">(</mo><mi>V</mi><mi>f</mi><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">(</mo><mi>U</mi><msub><mi>x</mi><mi>t</mi></msub><mo>+</mo><mi>W</mi><mi>f</mi><mo fence="false" stretchy="true" minsize="1.8em" maxsize="1.8em">(</mo><mi>U</mi><msub><mi>x</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mi>W</mi><mi>f</mi><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">(</mo><mi>U</mi><msub><mi>x</mi><mrow><mi>t</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mi>W</mi><mi>f</mi><mo stretchy="false">(</mo><mi>U</mi><msub><mi>x</mi><mrow><mi>t</mi><mo>−</mo><mn>3</mn></mrow></msub><mo>+</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo stretchy="false">)</mo><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">)</mo><mo fence="false" stretchy="true" minsize="1.8em" maxsize="1.8em">)</mo><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">)</mo><mo fence="false" stretchy="true" minsize="3em" maxsize="3em">)</mo></mrow><annotation encoding="application/x-tex">O_t=g\Bigg(Vf\bigg(Ux_t+Wf\Big(Ux_{t-1}+Wf\big(Ux_{t-2}+Wf(Ux_{t-3}+···)\big)\Big)\bigg)\Bigg)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="delimsizing size4">(</span></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="delimsizing size3">(</span></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="delimsizing size2">(</span></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="delimsizing size1">(</span></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord">+</span><span class="mpunct">⋅⋅⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">)</span><span class="mord"><span class="delimsizing size1">)</span></span><span class="mord"><span class="delimsizing size2">)</span></span><span class="mord"><span class="delimsizing size3">)</span></span><span class="mord"><span class="delimsizing size4">)</span></span></span></span></span></span></p><p>由此可见，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>时刻的输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝑂</mi><mi>𝑡</mi></msub></mrow><annotation encoding="application/x-tex">𝑂_𝑡</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>会受到当前及以前若干次的输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝑥</mi><mi>𝑡</mi></msub></mrow><annotation encoding="application/x-tex">𝑥_𝑡</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝑥</mi><mrow><mi>𝑡</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">𝑥_{𝑡−1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝑥</mi><mrow><mi>𝑡</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">𝑥_{𝑡−2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>等的影响，且同一隐藏层会共享 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>等权重参数，即 RNN 会对不同时刻的输入做相同的特征提取工作，这样可以大大减少参数数量。还有一点需要注意，在实际应用中只需要最后一帧序列的识别结果，所以并不需要将每一时刻的隐藏层都与一个输出层相连，这样也可以减少不必要的计算。</p><h1>优化算法之LSTM</h1><p>长短期记忆网络（ Long Short-Term Memory network，LSTM）是对RNN的改进，其能够避免RNN存在的短期记忆问题。具体算法原理后续文章再<a href="https://no5-aaron-wu.github.io/2021/12/08/AI-Algorithm-10-LSTM/">展开</a>。</p><h1>优化算法之GRU</h1><p>门控递归单元（Gated Recurrent Unit，GRU）是LSTM的一个变体。主要是在LSTM模型的基础上做了一些简化和调整，能够有更好的性能。同样具体算法原理后续文章再<a href="https://no5-aaron-wu.github.io/2021/12/08/AI-Algorithm-11-GRU/">展开</a>。</p><h1>参考</h1><p>[1] <a href="https://easyai.tech/ai-definition/rnn/">https://easyai.tech/ai-definition/rnn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LSTM </tag>
            
            <tag> GRU </tag>
            
            <tag> RNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海思AI开发 [5]：一般问题记录</title>
      <link href="/2021/12/07/Hi3559AV100-5-NormalQA/"/>
      <url>/2021/12/07/Hi3559AV100-5-NormalQA/</url>
      
        <content type="html"><![CDATA[<h1>Upsample 输入问题</h1><p>在转换SDK中自带的yolov3模型（<code>HiSVP_PC_V1.1.4.0\software\data\detection\yolov3\model\yolov3.prototxt</code>）时，报以下错误：</p><blockquote><p>F0817 15:32:17.480885  1352 layer.hpp:349] Check failed: ExactNumBottomBlobs() == bottom.size() (2 vs. 1) Upsample Layer takes 2 bottom blob(s) as input.</p></blockquote><h2 id="原因：">原因：</h2><p>RuyiStudio中caffe Upsample的实现需要两个bottom，但实际模型prototxt中该层只有一个bottom</p><blockquote><p>one for feature maps, and one for the max-pooling indeices;</p></blockquote><h2 id="解决方案：">解决方案：</h2><ul><li><ol><li>对caffe window的源码进行修改，编译，并替换RuyiStudio的工具（<a href="https://blog.csdn.net/jiadongfengyahoo/article/details/117336122">传送门</a>，要高贵的CSDN VIP才能看，没实践）</li></ol></li><li><ol start="2"><li>有一说，用deconv替换upsample，看到我们自己的模型是这样做的</li></ol></li></ul><h2 id="延伸：">延伸：</h2><p>在使用Get Caffe Output功能时，yolov3也遇到同样的问题</p><h1>python缺少rpn模块</h1><p>在转换模型时报以下错误</p><blockquote><p>File “D:\software\RuyiStudio\Resources\pythonScript\get_caffe_shape.py”, line 28,<br>in <module><br>import rpn<br>ImportError: No module named ‘rpn’</module></p></blockquote><h2 id="原因：-2">原因：</h2><p>字面意思，python脚本中找不到一个叫<code>rpn</code>的模块</p><h2 id="解决方案：-2">解决方案：</h2><ol><li><p>直接<code>pip install rpn</code> （如果电脑上有多个版本的python，确保是安装到RuyiStudio所依赖的py35下）</p></li><li><p>其实就是安装时略过了手动安装步骤7和8导致的，rpn在这个roi_pooling目录下</p></li></ol><p><img src="/2021/12/07/Hi3559AV100-5-NormalQA/1.png" alt="1"><br>那就安装vs2015后执行<code>setup_roi_caffe.bat</code>，下载<code>py-faster-rcnn-windows-master.zip</code>。还是有网络的老问题，那就自己在脚本中找url手动下载和解压，注释掉wget和7z的语句，再次执行bat脚本，<s>成功生成。</s> 并没有= =</p><p><img src="/2021/12/07/Hi3559AV100-5-NormalQA/2.png" alt="2"></p><ul><li><p>首先，sed操作的权限问题，可以通过用管理员权限打开一个cmd，再<code>cd D:\software\ruyi_env_setup</code>下，执行<code>setup_roi_caffe.bat</code>脚本解决；</p></li><li><p>其次，build操作并没有成功，错误如下，只会拷贝已有的一些文件到<code>roi_pooling</code>目录下（虽然这也能解决rpn模块找不到的问题），但送佛送到西嘛</p></li></ul><blockquote><p>D:\software\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29910\bin\Hostx64\x64\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MT -ID:\software\ruyi_env_setup\python35\lib\site-packages\numpy\core\include -ID:\software\ruyi_env_setup\python35\include -ID:\software\ruyi_env_setup\python35\include “-ID:\software\Microsoft Visual Studio\2015\Community\VC\Include” “-ID:\Windows Kits\10\include\10.0.19041.0\shared” “-ID:\Windows Kits\10\include\10.0.19041.0\um” “-ID:\Windows Kits\10\include\10.0.19041.0\winrt” “-ID:\Windows Kits\10\include\10.0.19041.0\ucrt” “-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um” /Tcutils\bbox.c /Fobuild\temp.win-amd64-3.5\Release\utils\bbox.obj<br>bbox.c<br>D:\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt.h(10): fatal error C1083: 无法打开包括文件: “vcruntime.h”: No such file or directory<br>error: command ‘D:\software\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29910\bin\Hostx64\x64\cl.exe’ failed with exit status 2</p></blockquote><ul><li>可以看到，这里调用的还是vs2019的cl.exe，而不是vs2015，通过everything搜索并没有找到vs2015版本的cl.exe，根本没有<code>Tools</code>文件夹，回看步骤7，应该是这个vs组件没有安装，重新打开安装程序，选上<code>Common Tools for Visual C++ 2015</code>和<code>Windows 8.1 SDK and Universal CRT SDK</code>组件，调整安装。</li><li>重新执行<code>setup_roi_caffe.bat</code>脚本，可以看到没有error，并在<code>D:\software\ruyi_env_setup\py-faster-rcnn-windows-master\lib\build\temp.win-amd64-3.5\Release</code>目录下生成了若干库，并且在<code>nms</code> <code>pycocotools</code> <code>utils</code>文件夹下生成了.c和.pyd文件，这些文件会一并被拷贝到<code>roi_pooling</code>目录下</li></ul><p><img src="/2021/12/07/Hi3559AV100-5-NormalQA/3.png" alt="3"></p><h1>RuyiStudio编译工程弹出错误窗口</h1><p><img src="/2021/12/07/Hi3559AV100-5-NormalQA/4.png" alt="4"></p><p>Console窗口并没有提示代码有error，应该是工程或IDE的错误，暂时不影响后续代码，也google不到有效的解决方法，暂时搁置。</p><h1>Detect Result功能不能匹配结果文件</h1><p>结果文件中根据名称去跟图片匹配，完全一致则可以匹配上，分辨率不同也没关系</p><p><img src="/2021/12/07/Hi3559AV100-5-NormalQA/5.png" alt="5"></p><p><img src="/2021/12/07/Hi3559AV100-5-NormalQA/6.png" alt="6"></p><h1>编译自己demo遇到的问题</h1><h2 id="需要交叉编译OpenCV">需要交叉编译OpenCV</h2><p>参考 <a href="https://no5-aaron-wu.github.io/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/"><strong>交叉编译OpenCV</strong></a> 笔记</p><h2 id="存在未定义引用">存在未定义引用</h2><blockquote><p><a href="http://libnnie.so">libnnie.so</a>: undefined reference to memset_s</p></blockquote><p><code>memset_s</code>函数由<code>libsecurec.so</code>库提供，链接该库即可</p><p>如何确定某个库中是否含有某个函数，执行以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">readelf -s libsecurec.so | grep memset_s</span><br></pre></td></tr></table></figure><p>输出如下：</p><blockquote><p>40: 0000000000002908  3284 FUNC    GLOBAL DEFAULT   11 memcpy_sOptTc<br>67: 0000000000001bb8   112 FUNC    GLOBAL DEFAULT   11 memcpy_s<br>75: 0000000000001c28  3292 FUNC    GLOBAL DEFAULT   11 memcpy_sOptAsm<br>81: 000000000000dd58   100 FUNC    GLOBAL DEFAULT   11 wmemcpy_s</p></blockquote><blockquote><p><a href="http://libnnie.so">libnnie.so</a>:  undefined reference to HI_MPI_SYS_MmzAlloc_Cached</p></blockquote><p>链接<code>libmpi.so</code>库</p><h1>运行自己demo遇到的问题</h1><h2 id="无法显示图片">无法显示图片</h2><blockquote><p>terminate called after throwing an instance of ‘cv::Exception’<br>what():  OpenCV(4.1.0) /home/aaron-wu/opencv/opencv-4.1.0/modules/highgui/src/window.cpp:627: error: (-2:Unspecified error) The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script in function ‘cvShowImage’</p></blockquote><p>注释掉<code>cv::imshow()</code>相关语句</p><h2 id="分配内存错误">分配内存错误</h2><blockquote><p>ERROR: MMAP ADDR: 0x7fb5e791e0-0x7fb64140b0</p></blockquote><p>在CMakeLists.txt 增加宏定义</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -DHISI_CHIP&quot;</span>)</span><br></pre></td></tr></table></figure><p>该宏控制内存分配和释放所调用的函数是<code>HI_MPI_SYS_MmzFree</code>，<code>HI_MPI_SYS_MmzAlloc</code>还是<code>malloc</code>，<code>free</code>。</p><p>查看MMZ内存使用情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/umap/media-mem</span><br></pre></td></tr></table></figure><h2 id="疑似内存泄露">疑似内存泄露</h2><p>在程序执行完毕后有这些打印信息</p><blockquote><p>mmz_userdev:mmz_userdev_release:<br>MMB LEAK(pid=1596): 0xDCF9E000, 6082560 bytes, ‘’<br>mmz_userdev:mmz_userdev_release:<br>mmb&lt;0xdcf9e000&gt; mapped to userspace 0x00000000ffd25912 will be unmaped!<br>mmz_userdev:mmz_userdev_release:<br>MMB LEAK(pid=1596): 0xDD56B000, 4034560 bytes, ‘’<br>mmz_userdev:mmz_userdev_release:<br>mmb&lt;0xdd56b000&gt; mapped to userspace 0x00000000e10a0392 will be unmaped!<br>mmz_userdev:mmz_userdev_release:<br>MMB LEAK(pid=1596): 0xDD944000, 4096 bytes, ‘’<br>mmz_userdev:mmz_userdev_release:<br>mmb&lt;0xdd944000&gt; mapped to userspace 0x00000000bdd4e59c will be unmaped!<br>mmz_userdev:mmz_userdev_release:<br>MMB LEAK(pid=1596): 0xDD945000, 520192 bytes, ‘’<br>mmz_userdev:mmz_userdev_release:<br>mmb&lt;0xdd945000&gt; mapped to userspace 0x00000000051ec222 will be unmaped!<br>mmz_userdev:mmz_userdev_release:<br>MMB LEAK(pid=1596): 0xDD9C4000, 20480 bytes, ‘’<br>mmz_userdev:mmz_userdev_release:<br>mmb&lt;0xdd9c4000&gt; mapped to userspace 0x0000000051b58146 will be unmaped!<br>mmz_userdev:mmz_userdev_release:<br>MMB LEAK(pid=1596): 0xDD9C9000, 73728 bytes, ‘’<br>mmz_userdev:mmz_userdev_release:<br>mmb&lt;0xdd9c9000&gt; mapped to userspace 0x00000000cf2d5fe3 will be unmaped!<br>mmz_userdev:mmz_userdev_release:<br>MMB LEAK(pid=1596): 0xDD9DB000, 262144 bytes, ‘’<br>mmz_userdev:mmz_userdev_release:<br>mmb&lt;0xdd9db000&gt; mapped to userspace 0x00000000a8baa11a will be unmaped!</p></blockquote><p>确为内存泄露，没有free内存导致的</p><h2 id="NNIE的预处理">NNIE的预处理</h2><p>按照demo的代码逻辑以及相关文档的描述，NNIE的Forward是包含部分预处理操作的：</p><ul><li><ol><li>这部分预处理操作怎么做是由转换wk时的配置确定的，包括量化操作和BGR-&gt;RGB的通道顺序转换；</li></ol></li><li><ol start="2"><li>如果选择<code>image_type</code>为<code>U8</code>，则只接受BGR_planar类型的输入，外部仅需要关注resize和packed-&gt;planar转换操作，另放到src_blob中时，注意stride的对齐；</li></ol></li><li><ol start="3"><li>转换时的预处理归一化mean值如果各通道不同，则mean值顺序与<code>RGB_order</code>的顺序保持一致；</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> HISI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> HISI </tag>
            
            <tag> NNIE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海思AI开发 [4]：NNIE Mapper 模型转换问题记录</title>
      <link href="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/"/>
      <url>/2021/12/03/Hi3559AV100-4-NNIEMapperQA/</url>
      
        <content type="html"><![CDATA[<h1>问题1 pooling层尺寸不一致</h1><p>pooling层输出尺寸的计算公式如下:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>h</mi><mi>o</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>i</mi></msub><mo>+</mo><mn>2</mn><mo>∗</mo><mi>p</mi><mi>a</mi><mi>d</mi><mo>−</mo><mi>k</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>l</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>w</mi><mi>o</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>w</mi><mi>i</mi></msub><mo>+</mo><mn>2</mn><mo>∗</mo><mi>p</mi><mi>a</mi><mi>d</mi><mo>−</mo><mi>k</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>l</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}h_o=(h_i+2*pad-kernel)/stride+1\\w_o=(w_i+2*pad-kernel)/stride+1\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>当不能整除（输入或卷积核为奇数）时，pytorch默认是<code>floor</code>，而caffe默认是<code>ceil</code>，因此会出现onnx2caffe转换后输出尺寸比pytorch大1的情况。</p><h2 id="解决办法：Slice层切割pooling层的输出">解决办法：Slice层切割pooling层的输出</h2><ul><li><p>如果训练端发现该问题，可以pytorch的pooling设置为<code>ceil_mode=True</code></p></li><li><p>如果部署端发现该问题，不想重新修改模型retrain，则需要手动修改prototxt</p><ul><li>首先，不能采用将padding置为0的方式，虽然能获得相同的size，但计算方式会发生变化，实测也是会出现掉点的。具体可以看下图；</li></ul><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/1.png" alt="1"></p><ul><li>从上图可以看到，可以将caffe ceil模式输出的结果的最后一行和最后一列切掉，从而获得与pytorch相同的输出；</li><li>最后，其实也可以修改caffe端pooling层为<code>floor</code>模式，但在当前情景下，caffe只是作为中转，还要转换到nnie模型，可能还会出现不匹配的情况，故这里不适用。</li></ul></li></ul><h2 id="代价：无效输出增多">代价：无效输出增多</h2><p>由于slice分割了pooling层的输出，故每次slice都会产生一个无用的tensor输出（最后一行/列），nnie每个模型seg的最大输出个数为16（hi_nnie.h中定义了<code>#define SVP_NNIE_MAX_OUTPUT_NUM 16</code>），故如果有些模型slice加的多，还得将这些无用输出合并成一个。</p><h1>问题2 不支持relu6</h1><h2 id="解决办法：多个op组合进行替代">解决办法：多个op组合进行替代</h2><p>relu6即在relu的基础上，将最大值钳制到6，图像如下：</p><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/2.png" alt="2"></p><p>caffe和nnie没有现成的op支持，如非用relu6不可，可以用几个caffe支持的op组合进行代替，公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mi>h</mi><mi>r</mi><msub><mi>e</mi><mi>o</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>0</mn><mspace width="1em"><mi>r</mi><mi>e</mi><mi>l</mi><mi>u</mi><mo>&lt;</mo><mo>=</mo><mn>6</mn></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>1</mn><mspace width="1em"><mi>r</mi><mi>e</mi><mi>l</mi><mi>u</mi><mo>&gt;</mo><mn>6</mn></mspace></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">thre_o=\left\{\begin{aligned}&amp;0 \quad relu&lt;=6 \\&amp;1 \quad relu&gt;6\end{aligned}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">6</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>r</mi><mi>e</mi><mi>l</mi><mi>u</mi><msub><mn>6</mn><mi>o</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>t</mi><mi>h</mi><mi>r</mi><msub><mi>e</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>∗</mo><mi>r</mi><mi>e</mi><mi>l</mi><mi>u</mi><mo>+</mo><mi>t</mi><mi>h</mi><mi>r</mi><msub><mi>e</mi><mi>o</mi></msub><mo>∗</mo><mn>6</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}relu6_o = (1 - thre_o) * relu + thre_o * 6\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5em;vertical-align:-0.5em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1em;"><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>阈值判断用<code>threshold</code>，乘和偏置作可以用<code>power</code>，tensor相加的操作可以用<code>eltwise</code>，具体组合方式见下图</li></ul><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/3.png" alt="3"></p><h2 id="衍生问题：Power-层shift-1-0无法正常加1">衍生问题：Power 层<code>shift=1.0</code>无法正常加1</h2><p>上述转换验证onnx-&gt;caffe模型是可以正常转换的，但再转换到nnie模型时出了问题；</p><p>测试发现nnie的power op 无法正常执行<code>shift=1.0</code>的偏置操作，上图左边的power算子的输出应当是0和1的mask，结果却输出的是-1和0，遂做了以下测试：</p><ul><li>当<code>shift=2.0</code>时，可以正常加2；</li><li>当<code>shift=1.1</code>时，可以正常加1.1；</li><li>当<code>shift=1.0001</code>（或更小）时，可以正常加1；</li></ul><p><s>故可以通过将shift设置为带上一个很小的余量规避上述问题（估计是精度舍入的问题），完成正常加1的操作；</s></p><p>与HISI的FAE沟通后得到的最终答案是，GPU版本的mapper工具确实存在bug，可以暂时使用CPU版本进行规避。</p><h2 id="代价：由此带来的性能损失">代价：由此带来的性能损失</h2><p>测试自用人脸检测模型：</p><ul><li>用上述op替换的方式实现relu6，量化方式设置为16bit，测试上板推理时间为162ms</li><li>不考虑精度变化的情况下，将relu6直接替换为relu，其他配置不变，测试上板推理时间为54ms</li></ul><p>即增加的<code>power</code>、<code>threshold</code> 、<code>eltwise</code>等op带来了3倍的时间消耗</p><h2 id="替代解决方案：训练端修正">替代解决方案：训练端修正</h2><p>训练端调整，不使用relu6</p><h1>nnie op调试方法</h1><h2 id="（optional）自己构建单op模型">（optional）自己构建单op模型</h2><ul><li>通过pytorch构建一个自己所要验证的单op模型，输出为onnx；</li><li>好处就是可以构建更纯粹的测试环境，摒除无关因素的干扰，可以自定义输入尺寸和值，更容易观察现象，模型转换，向量比较等操作也会更快；</li><li>通过<a href="https://github.com/no5-aaron-wu/onnx2caffe"><code>onnx2caffe</code>脚本工程</a>将onnx转换到caffe模型；<ul><li>实测python3.5 + onnx 1.6.0 + protobuf 3.16.0 + hisi caffe 环境 可以正常运行</li><li>如果程序找不到caffe库，可以在环境变量中设置PYTHONPATH，或者在IDE（Pycharm为例）中设置搜索路径</li></ul></li></ul><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/4.png" alt="4"></p><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/5.png" alt="5"></p><h2 id="获得nnie模型的推理结果">获得nnie模型的推理结果</h2><p>nnie mapper的设置如下图所示<br><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/6.png" alt="6"></p><ul><li>将<code>log_level</code>设置为<code>Function level</code>，量化转换模型结束后会跑一遍推理，将推理的各层中间结果保存到工程目录的<code>mapper_quant</code>文件夹下；</li><li>那么推理的输入是什么呢？是<code>image_list</code>，如果list中只有一个图，那就是这个图，如果有多张图，会跑list中最后一张图；</li><li>中间结果会保存为<code>*.hex</code>格式的文件，每行一个元素，共该层的输出尺寸<code>n*c*h*w</code>行，元素用32bit定点数（20.12）的16进制补码表示，即高20位为整数部分，低12位为小数部分，至于补码到float数的转换，可以自行计算，也可以用vector comparison工具的转换功能；</li><li>量化校正数据<code>image_list</code>可以是图片，也可以是自定义的tensor，即如图中所示，将<code>image_type</code>设置为<code>S32</code>，<code>image_list</code>为张量文件，张量文件中一个完整的张量（<code>c*h*w</code>个点）为一行，以浮点文本表示，点与点之间以空格或逗号分割。如下图所示（查看开了自动换行，实际为1行）</li></ul><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/7.png" alt="7"></p><h2 id="获得caffe模型的推理结果">获得caffe模型的推理结果</h2><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/8.png" alt="8"></p><ul><li>工具如图进行配置，关键预处理方式与nnie mapper设为一致，则会将中间结果输出到指定目录</li><li>中间结果保存为<code>*.float</code>文件，与<code>*.hex</code>一样，每行一个元素，共输出尺寸<code>n*c*h*w</code>行，但元素为用科学计数法表示的小数。</li><li>这个工具只能选择图像作为输入，如果要对比自定义tensor作为输入的结果则需要生成tensor对应的jpg，且选择合适的预处理以转化成原tensor，方便与nnie量化中间结果进行比较，理论上可行，但颇为不便，此处未做尝试。</li><li>此工具对应<code>RuyiStudio\Resources\pythonScript\cnn_convert_bin_and_print_featuremap.py</code>脚本，也可以直接修改脚本，应该也可以实现自定义tensor作为输入，同样未做尝试。</li></ul><h2 id="对比不同模型的中间结果">对比不同模型的中间结果</h2><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/9.png" alt="9"></p><ul><li><code>Prototxt Has Inplace Layers</code>：如果prototxt中存在<code>inplace</code>写法（即为相互连接的几个层中，top是相同的，bottom是不完全相同的）则需要勾选，并选择相应的prototxt文件，这些层会被表示为一个框，一般通过nnie mapper的自动标记功能生成的<code>*nnie_mark_*.prototxt</code>会把合适的层组成<code>inplace</code>结构，应该是能优化性能吧。具体如下图；</li></ul><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/10.png" alt="10"></p><ul><li><code>Parse Dot File</code>：如果是对比的结果一个是caffe或nnie mapper的推理结果，另一个是仿真数据，则需要勾选并选择工程目录下生成的<code>cnn_net_tree.dot</code>文件，以进行层的匹配；</li><li><code>Left Folder</code>/<code>Right Folder</code>：选择要对比的两个文件夹，注意nnie mapper的中间结果会非常多，很多都是不需要的，可以根据caffe结果的文件名筛选出对应的文件单独放到另一个文件夹下，否则单是读取文件的时间就会慢到让你崩溃（因为它会一边读文件，一遍进行层匹配）；</li><li><code>Algorithm Setting</code>：是一些误差参数的阈值设定，超过阈值的会被标红，默认就好；</li><li>点击<code>Compare</code>，比较向量相似度，一般看余弦相似度<code>CosineSimilarity</code>，大于0.99一般问题不大，0.95-0.99之间有点问题，0.95以下就可能会导致比较严重的掉点了；</li><li>点击<code>Show Result</code>：会将误差标注的拓扑图上，并用颜色区分严重程度，方便定位哪些层问题问题比较大；</li><li>双击需要查看的行，会弹出每个元素对比的窗口，这里有个比较好用功能就是<code>Convert To Float</code>，当你不知道怎么从补码转换到float时，这里可以给你一个参考，但不建议双击尺寸较大的行，加载的速度慢到怀疑人生；</li></ul><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/11.png" alt="11"></p><ul><li>对比看什么呢？</li></ul><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/12.png" alt="12"></p><h1>问题3 low-bandwidth 量化精度下降</h1><h2 id="现象1：benchmark-AP-下降明显">现象1：benchmark AP 下降明显</h2><p>自用人车狗模型：</p><p>mnn结果</p><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/13.png" alt="13"></p><p>nnie-high-precision结果</p><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/14.png" alt="14"></p><p>nnie-low-bandwidth结果</p><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/15.png" alt="15"></p><h2 id="现象2：vector-comparison-余弦相似度低">现象2：vector comparison 余弦相似度低</h2><p>比较nnie-high-precision与caffe中间结果，余弦相似度 输入=1，后续各层均&gt;0.99，下图展示了部分层的误差情况，灰色代表≥0.99</p><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/16.png" alt="16"></p><p>比较nnie-low-precision与caffe中间结果，余弦相似度 输入=1，后续出现下降情况，部分层降到0.9以下，输出层在0.95左右，下图展示了部分层的误差情况，橘色为0.95~0.99，红色为&lt;0.95</p><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/17.png" alt="17"></p><h2 id="解决办法：high-precision-精度恢复">解决办法：high-precision 精度恢复</h2><p>如上所述，当把量化方式改为16bit的high-precision模式时，精度的下降在可接受的范围内（AP↓0.5%）</p><h2 id="衍生问题：specify-（FP16-INT8混合量化）无法达到预期的折中效果">衍生问题：specify （FP16+INT8混合量化）无法达到预期的折中效果</h2><p>按照上面精度问题的定位步骤图中<code>第3步-case1</code>的建议，做了如下尝试</p><ul><li><strong>将第一个卷积层置为<code>_hp</code></strong>：AP和向量相似度有一点提升，但不明显</li><li><strong>从前往后逐层置为<code>_hp</code></strong>：首先，实测像bn，relu这样没有权重的层，即使设为<code>_hp</code>也没有影响，且通过Ruyistudio的<code>Graph View</code>工具看到的<code>Layer Info</code>，这些层也没有<code>High precision layer</code>参数（见下图），侧面印证了这一点。其次，当把第二个卷积层（437）置为<code>_hp</code>后，就出问题了，该层的余弦相似度降到0.81，后续所有层的余弦相似度都断崖式下降。</li></ul><p><img src="/2021/12/03/Hi3559AV100-4-NNIEMapperQA/18.png" alt="18"></p><ul><li><strong>所有层（带<code>High precision layer</code>）全部置为<code>_hp</code></strong>：理论上该操作应当与<code>compile_mode=High-precision</code>获得同样的结果，但是却与上面第二点类似，从437开始，精度断崖式下降。尝试在此基础上，把437踢出<code>_hp</code>的队伍，发现，精度从445开始出现断崖式下降。再把445踢出<code>_hp</code>队伍，又从453开始重蹈覆辙。后面还是历史的轮回，没有再进一步验证。</li></ul><h2 id="代价：由此带来的性能损失-2">代价：由此带来的性能损失</h2><p>目前采用16bit量化模式可以解决精度问题，但带来了性能的损失，实测自用人车狗模型的推理时间由20ms-&gt;30ms</p><h2 id="替代解决方案：FP16-INT8混合量化">替代解决方案：FP16+INT8混合量化</h2><p>specify的bug定位到了，hisi FAE反馈当卷积层的group不为1，高精度量化存在bug，可以用DepthwiseConv做替换进行规避，据说DepthwiseConv的性能还更好一些。</p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">layer &#123;</span><br><span class="line">  name: <span class="string">&quot;437_hp&quot;</span></span><br><span class="line">  type: <span class="string">&quot;Convolution&quot;</span></span><br><span class="line">  bottom: <span class="string">&quot;434&quot;</span></span><br><span class="line">  top: <span class="string">&quot;437&quot;</span></span><br><span class="line">  convolution_param &#123;</span><br><span class="line">    num_output: <span class="number">32</span></span><br><span class="line">    bias_term: <span class="literal">false</span></span><br><span class="line">    <span class="keyword">group</span>: <span class="number">32</span></span><br><span class="line">    pad_h: <span class="number">1</span></span><br><span class="line">    pad_w: <span class="number">1</span></span><br><span class="line">    kernel_h: <span class="number">3</span></span><br><span class="line">    kernel_w: <span class="number">3</span></span><br><span class="line">    stride_h: <span class="number">1</span></span><br><span class="line">    stride_w: <span class="number">1</span></span><br><span class="line">    dilation: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">layer &#123;</span><br><span class="line">  name: <span class="string">&quot;437_hp&quot;</span></span><br><span class="line">  type: <span class="string">&quot;DepthwiseConv&quot;</span></span><br><span class="line">  bottom: <span class="string">&quot;434&quot;</span></span><br><span class="line">  top: <span class="string">&quot;437&quot;</span></span><br><span class="line">  convolution_param &#123;</span><br><span class="line">    num_output: <span class="number">32</span></span><br><span class="line">    bias_term: <span class="literal">false</span></span><br><span class="line">    # <span class="keyword">group</span>: <span class="number">32</span></span><br><span class="line">    pad_h: <span class="number">1</span></span><br><span class="line">    pad_w: <span class="number">1</span></span><br><span class="line">    kernel_h: <span class="number">3</span></span><br><span class="line">    kernel_w: <span class="number">3</span></span><br><span class="line">    stride_h: <span class="number">1</span></span><br><span class="line">    stride_w: <span class="number">1</span></span><br><span class="line">    dilation: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实测在仅将前两个卷积层用FP16量化的情况下，上述人车狗模型混合量化的性能与INT8量化接近（&lt;1ms），精度掉点在可接受的范围内（1-2个点）</p>]]></content>
      
      
      <categories>
          
          <category> HISI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> HISI </tag>
            
            <tag> NNIE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海思AI开发 [3]：交叉编译OpenCV</title>
      <link href="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/"/>
      <url>/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/</url>
      
        <content type="html"><![CDATA[<h1>下载</h1><p>下载指定版本的<a href="https://github.com/opencv/opencv/tree/4.1.0">opencv-4.1.0</a>和<a href="https://github.com/opencv/opencv_contrib/tree/4.1.0">opencv_contrib-4.1.0</a>的源码<br><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/1.png" alt="1"><br><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/2.png" alt="2"><br>下载的压缩包拷贝到linux服务器上，解压</p><h1>安装cmake-gui</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cmake-gui</span><br></pre></td></tr></table></figure><h1>运行cmake-gui</h1><h2 id="选择source-code路径和build路径，点击Configure">选择source code路径和build路径，点击Configure</h2><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/3.png" alt="3"></p><h2 id="选择交叉编译配置选项">选择交叉编译配置选项</h2><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/4.png" alt="4"></p><h2 id="配置c和c-的编译器">配置c和c++的编译器</h2><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/5.png" alt="5"></p><h2 id="点击finish会进行初步的配置">点击finish会进行初步的配置</h2><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/6.png" alt="6"></p><h2 id="进一步配置">进一步配置</h2><h3 id="配置build类型">配置build类型</h3><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/7.png" alt="7"></p><h3 id="配置安装路径">配置安装路径</h3><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/8.png" alt="8"></p><h3 id="将opencv-contrib模块也编译进来">将opencv_contrib模块也编译进来</h3><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/9.png" alt="9"></p><h3 id="保险起见，添加交叉编译器的根目录">保险起见，添加交叉编译器的根目录</h3><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/10.png" alt="10"></p><h3 id="勾选BUILD-opencv-world">勾选BUILD_opencv_world</h3><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/11.png" alt="11"></p><h2 id="再次点击Configure，开始解问题吧">再次点击Configure，开始解问题吧 ( :</h2><h3 id="问题1-缺少boostdesc-bgm-i">问题1 缺少boostdesc_bgm.i</h3><p>cmake尝试下载该文件，但网络问题卡住<br><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/12.png" alt="12"><br>打开<code>opencv_contrib-4.1.0\modules\xfeatures2d\CMakeLists.txt</code>，注释掉下载的命令<br><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/13.png" alt="13"></p><p>该模块也会因此被disable，目前用不到，先关了吧</p><p>也可以自行下载对应的文件放到对应的位置，这里先不管了(是福不是祸，是祸躲不过 ( : )</p><h3 id="问题2-缺少face-landmark-model-dat">问题2 缺少face_landmark_model.dat</h3><p>打开<code>opencv_contrib-4.1.0\modules\face\CMakeLists.txt</code>，注释掉下载的命令<br><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/14.png" alt="14"></p><p>同样，影响暂时未知</p><p>再次点击Configure，Configuring done</p><p>点击Generate，Generating done</p><h1>开始make</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> build_hisi</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure><h2 id="问题1">问题1</h2><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/15.png" alt="15"></p><p>在<code>common.cc</code>中增加宏定义<code>#define HAVE_PTHREAD</code></p><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/16.png" alt="16"></p><h2 id="问题2-类型转换错误">问题2 类型转换错误</h2><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/17.png" alt="17"></p><p>打开<code>opencv-4.1.0\build_hisi\CMakeCache.txt</code>，添加 <code>-fpermissive</code> 编译选项</p><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/18.png" alt="18"></p><h2 id="问题3-缺少boostdesc-bgm-i">问题3 缺少boostdesc_bgm.i</h2><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/19.png" alt="19"></p><ul><li><p>终究逃不掉，自己下载吧</p></li><li><p>打开<code>\opencv_contrib-4.1.0\modules\xfeatures2d\cmake\download_boostdesc.cmake</code>，参照里面的下载内容打开url，右键另存为文件。</p></li></ul><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/20.png" alt="20"></p><ul><li>同理打开<code>\opencv_contrib-4.1.0\modules\xfeatures2d\cmake\download_vgg.cmake</code>，下载所需内容</li><li>将这些下载的文件拷贝到<code>opencv_contrib-4.1.0\modules\xfeatures2d\src</code>下</li></ul><h2 id="问题4-undefined-reference-to-“pthread-key-create”">问题4 undefined reference to “pthread_key_create”</h2><p>打开<code>opencv-4.1.0\build_hisi\CMakeCache.txt</code>，<code>CMAKE_EXE_LINKER_FLAGS</code>添加 <code>-lpthread -lrt -ldl</code> 链接选项</p><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/21.png" alt="21"></p><h2 id="问题5">问题5</h2><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/22.png" alt="22"></p><p>打开<code>\opencv-4.1.0\3rdparty\libpng\pngpriv.h</code>，做如下替换</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#  <span class="meta-keyword">if</span> (defined(__ARM_NEON__) || defined(__ARM_NEON)) &amp;&amp; \</span></span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(PNG_ARM_NEON) &amp;&amp; (defined(__ARM_NEON__) || defined(__ARM_NEON)) &amp;&amp; \</span></span><br></pre></td></tr></table></figure><h2 id="问题6">问题6</h2><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/23.png" alt="23"></p><p>头文件include地址不对，<code>features2d/test/test_detectors_regression.impl.hpp</code>在opencv-4.1.0的<code>opencv-4.1.0/modules/</code>而不是<code>opencv_contrib-4.1.0/modules/</code></p><p>将以下几个文件从<code>opencv-4.1.0\modules\features2d\test</code>目录拷贝到<code>opencv_contrib-4.1.0\modules\xfeatures2d\test</code>目录下</p><blockquote><p>test_descriptors_invariance.impl.hpp<br>test_descriptors_regression.impl.hpp<br>test_detectors_invariance.impl.hpp<br>test_detectors_regression.impl.hpp<br>test_invariance_utils.hpp</p></blockquote><p>打开<code>\opencv_contrib-4.1.0\modules\xfeatures2d\test\test_features2d.cpp</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;features2d/test/test_detectors_regression.impl.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;features2d/test/test_descriptors_regression.impl.hpp&quot;</span></span></span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;test_detectors_regression.impl.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;test_descriptors_regression.impl.hpp&quot;</span></span></span><br></pre></td></tr></table></figure><p>打开<code>\opencv_contrib-4.1.0\modules\xfeatures2d\test\test_rotation_and_scale_invariance.cpp</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;features2d/test/test_detectors_invariance.impl.hpp&quot;</span> <span class="comment">// main OpenCV repo</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;features2d/test/test_descriptors_invariance.impl.hpp&quot;</span> <span class="comment">// main OpenCV repo</span></span></span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;test_detectors_invariance.impl.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;test_descriptors_invariance.impl.hpp&quot;</span></span></span><br></pre></td></tr></table></figure><h1>make install</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p><img src="/2021/12/01/Hi3559AV100-3-CrossCompileOpenCV/24.png" alt="24"></p><h1>测试库</h1><ul><li>创建以下文件：</li></ul><p><code>cvtColor.cpp</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;./dog.jpg&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;reading image fails \n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Mat gray;</span><br><span class="line">    <span class="built_in">cvtColor</span>(img, gray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;./dog_gray.png&quot;</span>, gray);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cvtColor done\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CMakeLists.txt</code></p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span> FATAL_ERROR)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED opencv_world)</span><br><span class="line"><span class="comment"># SET(OpenCV_LIBS &quot;/home/aaron-wu/opencv/arm-linux-hisi/lib/libopencv_world.so&quot;)</span></span><br><span class="line"><span class="comment"># SET(OpenCV_INCLUDE_DIRS &quot;/home/aaron-wu/opencv/arm-linux-hisi/include/opencv4&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># skip rpath</span></span><br><span class="line"><span class="comment"># SET(CMAKE_SKIP_RPATH TRUE)</span></span><br><span class="line"><span class="comment"># SET(CMAKE_SKIP_BUILD_RPATH TRUE)</span></span><br><span class="line"><span class="comment"># SET(CMAKE_SKIP_INSTALL_RPATH TRUE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set rpath self</span></span><br><span class="line"><span class="keyword">SET</span>(CMAKE_BUILD_WITH_INSTALL_RPATH <span class="keyword">TRUE</span>)</span><br><span class="line"><span class="keyword">SET</span>(CMAKE_INSTALL_RPATH <span class="string">&quot;/lib&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(demo cvtColor.cpp)</span><br><span class="line"><span class="keyword">SET</span>(CMAKE_EXE_LINKER_FLAGS <span class="string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -lpthread -lrt -ldl&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="variable">$&#123;OpenCV_LIBS&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo PUBLIC <span class="variable">$&#123;OpenCV_LIBS&#125;</span>)</span><br><span class="line"><span class="keyword">target_include_directories</span>(demo PUBLIC <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br></pre></td></tr></table></figure><ul><li>build&amp;make</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">touch build.sh</span><br><span class="line"><span class="comment"># 编辑build.sh如下</span></span><br><span class="line">sh build.sh</span><br></pre></td></tr></table></figure><p><code>build.sh</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">    -DCMAKE_C_COMPILER=aarch64-himix210-linux-gcc \</span><br><span class="line">    -DCMAKE_CXX_COMPILER=aarch64-himix210-linux-g++ \</span><br><span class="line">    -DOpenCV_DIR=/home/aaron-wu/opencv/arm-linux-hisi/lib/cmake/opencv4 \</span><br><span class="line">    ..</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><ul><li>生成demo拷贝到板子上，同时拷贝<code>libopencv_world.so</code>到板子的<code>/lib</code>目录下</li><li>在板子上执行<code>./demo</code>，成功。</li></ul>]]></content>
      
      
      <categories>
          
          <category> HISI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> HISI </tag>
            
            <tag> NNIE </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海思AI开发 [2]：搭建开发环境</title>
      <link href="/2021/12/01/Hi3559AV100-2-SetEnv/"/>
      <url>/2021/12/01/Hi3559AV100-2-SetEnv/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 Linux 服务器上建立交叉编译环境，Windows 工作台通过串口和网口与Hi3559AV100 单板连接，开发人员可以在 Windows 工作台中进行程序开发或者远程登录到 Linux 服务器进行程序开发。</p></blockquote><p><img src="/2021/12/01/Hi3559AV100-2-SetEnv/1.png" alt="1"></p><h1>搭建Linux服务器环境</h1><h2 id="使用wsl安装Ubuntu18-04">使用wsl安装Ubuntu18.04</h2><ul><li><ol><li>直接在Windows Store中搜索linux进行安装</li></ol></li><li><ol start="2"><li><a href="https://github.com/DDoSolitary/LxRunOffline/releases/download/v3.4.1/LxRunOffline-v3.4.1-msvc.zip">下载管理工具</a></li></ol></li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;tool<span class="literal">-dir</span>&gt;</span><br><span class="line">.\LxRunOffline.exe <span class="literal">-h</span>   <span class="comment"># 查看帮助</span></span><br><span class="line"></span><br><span class="line">.\LxRunOffline.exe list  <span class="comment"># 查看当前已有的WSL</span></span><br><span class="line"></span><br><span class="line">.\LxRunOffline.exe di <span class="literal">-n</span> Ubuntu  <span class="comment"># 查看子系统的位置</span></span><br><span class="line"></span><br><span class="line">.\LxRunOffline.exe <span class="built_in">move</span> <span class="literal">-n</span> Ubuntu <span class="literal">-d</span> &lt;tar<span class="literal">-dir</span>&gt; <span class="comment"># 将子系统移动到指定文件夹</span></span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>通过管理工具可以将子系统移动到非C盘，防止C盘爆炸</li></ol></li></ul><h2 id="安装nfs，samna，ssh等网络组件">安装nfs，samna，ssh等网络组件</h2><p>暂时略过，windows可以通过<code>\\wsl$\Ubuntu-18.04</code>访问wsl的文件系统</p><h2 id="软件包安装">软件包安装</h2><ul><li><ol><li>配置默认使用bash，执行<code>sudo dpkg-reconfigure dash</code>，选no</li></ol></li><li><ol start="2"><li>执行如下，安装软件包：</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install make libc6:i386 lib32z1 lib32stdc++6 zlib1g-dev libncurses5-dev ncurses-term libncursesw5-dev g++ u-boot-tools:i386 texinfo texlive gawk libssl-dev openssl bc</span><br></pre></td></tr></table></figure><p>报如下错误：</p><blockquote><p>Package libc6:i386 is not available, but is referred to by another package.<br>This may mean that the package is missing, has been obsoleted, or<br>is only available from another source<br>However the following packages replace it:<br>libdb1-compat tzdata</p></blockquote><blockquote><p>E: Package ‘libc6:i386’ has no installation candidate<br>E: Unable to locate package u-boot-tools:i386</p></blockquote><p>跳过<code>libc6:i386</code>，直接安装<code>lib32z1</code>，会提示如下：</p><blockquote><p>The following additional packages will be installed:<br>libc6-i386<br>The following NEW packages will be installed:<br>lib32z1 libc6-i386</p></blockquote><p>这应该是名字写的有问题，同样<code>u-boot-tools:i386</code>也会有：</p><blockquote><p>E: Unable to locate package u-boot-tools:i386`</p></blockquote><p>尝试<code>u-boot-tools-i386</code>也不行，安装<code>u-boot-tools</code>倒是可以。</p><p>其他软件包安装没有问题。</p><ul><li><ol start="3"><li>创建<code>/etc/ld.so.preload</code>文件，并执行 <code>echo &quot;&quot; &gt; /etc/ld.so.preload</code>，以解决 64bit linux server 上某些第三方库编译失败的问题。</li></ol></li></ul><h2 id="安装交叉编译工具">安装交叉编译工具</h2><ul><li><ol><li>将<code>aarch64-himix210-linux.tgz</code>拷贝到linux系统<code>~</code>文件夹下，执行如下命令：</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf aarch64-himix210-linux.tgz</span><br><span class="line"><span class="built_in">cd</span> aarch64-himix210-linux/</span><br><span class="line">sudo ./aarch64-himix210-linux.install</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>打印如下提示信息：</li></ol></li></ul><blockquote><p>Installing HuaWei LiteOS Linux at /opt/hisi-linux/x86-arm<br>mkdir: created directory ‘/opt/hisi-linux’<br>mkdir: created directory ‘/opt/hisi-linux/x86-arm’<br>mkdir: created directory ‘/opt/hisi-linux/x86-arm/aarch64-himix210-linux’<br>Extract cross tools …<br>export path /opt/hisi-linux/x86-arm/aarch64-himix210-linux/bin</p></blockquote><p>是为安装成功</p><h2 id="测试交叉编译工具">测试交叉编译工具</h2><p>写了一个简单的测试工程，目录结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">|--build</span><br><span class="line">    |--corss_build.sh</span><br><span class="line">|--include</span><br><span class="line">    |--hello.h</span><br><span class="line">|--src</span><br><span class="line">    |--hello.cc</span><br><span class="line">|--CMakeLists.txt</span><br><span class="line">|--main.cc</span><br></pre></td></tr></table></figure><p><code>cross_build.sh</code>内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">    -DCMAKE_C_COMPILER=aarch64-himix210-linux-gcc \</span><br><span class="line">    -DCMAKE_CXX_COMPILER=aarch64-himix210-linux-g++ \</span><br><span class="line">    ..</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>执行sh文件结果如下：</p><blockquote><p>– The C compiler identification is GNU 7.3.0<br>– The CXX compiler identification is GNU 7.3.0<br>– Check for working C compiler: /opt/hisi-linux/x86-arm/aarch64-himix210-linux/bin/aarch64-himix210-linux-gcc<br>– Check for working C compiler: /opt/hisi-linux/x86-arm/aarch64-himix210-linux/bin/aarch64-himix210-linux-gcc – works<br>– Detecting C compiler ABI info<br>– Detecting C compiler ABI info - done<br>– Detecting C compile features<br>– Detecting C compile features - done<br>– Check for working CXX compiler: /opt/hisi-linux/x86-arm/aarch64-himix210-linux/bin/aarch64-himix210-linux-g++<br>– Check for working CXX compiler: /opt/hisi-linux/x86-arm/aarch64-himix210-linux/bin/aarch64-himix210-linux-g++ – works<br>– Detecting CXX compiler ABI info<br>– Detecting CXX compiler ABI info - done<br>– Detecting CXX compile features<br>– Detecting CXX compile features - done<br>– Configuring done<br>– Generating done<br>– Build files have been written to: /home/aaron-wu/cross_compile_test/hello/build<br>Scanning dependencies of target hello<br>[ 66%] Building CXX object CMakeFiles/hello.dir/src/hello.cc.o<br>[ 66%] Building CXX object CMakeFiles/hello.dir/main.cc.o<br>[100%] Linking CXX executable hello<br>[100%] Built target hello<br>编译成功</p></blockquote><h1>首次安装SDK</h1><h2 id="SDK包">SDK包</h2><p>在<code>Hi3559AV100***/01.software/board</code>目录下，可以看到一个<code>Hi3559AV100_SDK_Vx.x.x.x.tgz</code> 的文件，该文件就是 Hi3559AV100 的软件开发包</p><h2 id="解压缩SDK包">解压缩SDK包</h2><ul><li><ol><li>将上述SDK包拷贝到linux服务器上</li></ol></li><li><ol start="2"><li>执行如下命令进行解压缩</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxf Hi3559AV100_SDK_Vx.x.x.x.tgz</span><br></pre></td></tr></table></figure><h2 id="展开SDK包内容">展开SDK包内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Hi3559AV100_SDK_V2.0.4.0/</span><br><span class="line">sudo sh ./sdk.cleanup</span><br><span class="line">sudo sh ./sdk.unpack</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HISI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> HISI </tag>
            
            <tag> NNIE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海思AI开发 [1]：RuyiStudio安装</title>
      <link href="/2021/11/30/Hi3559AV100-1-setup/"/>
      <url>/2021/11/30/Hi3559AV100-1-setup/</url>
      
        <content type="html"><![CDATA[<h1>编译链MinGW-W64安装</h1><h2 id="下载MinGW-W64"><a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/">下载MinGW-W64</a></h2><p><img src="/2021/11/30/Hi3559AV100-1-setup/1.png" alt="1"></p><p>下载完毕后解压到指定路径，我这里是<code>D:\software\mingw64</code></p><h2 id="下载msys"><a href="https://sourceforge.net/projects/mingwbuilds/files/external-binary-packages/">下载msys</a></h2><p>下载完毕解压到mingw64根目录下</p><p><img src="/2021/11/30/Hi3559AV100-1-setup/2.png" alt="2"></p><h2 id="添加系统变量">添加系统变量</h2><p><code>D:\software\mingw64\bin</code>和<code>D:\software\mingw64\msys\bin</code>添加到系统变量</p><h2 id="重命名gcc">重命名gcc</h2><p>将<code>D:\software\mingw64\bin</code>下<code>x86_64-w64-mingw32-gcc.exe</code>再拷贝一份并重命名为<code>mingw32-gcc.exe</code>，否则RuyiStudio工具不能自动识别到MinGW工具链。</p><h2 id="重启计算机">重启计算机</h2><h1>Python3.5+Caffe环境配置</h1><h2 id="下载caffe-builder"><a href="https://github.com/willyd/caffe-builder/releases">下载caffe-builder</a></h2><p>下载完毕后放到<code>D:\software\ruyi_env_setup</code>（我拷贝了一份该文件夹<code>&lt;your-dir&gt;\SVP_PC\HiSVP_PC_V1.1.4.0\tools\nnie\windows\ruyi_env_setup-3.0.7</code>）</p><blockquote><p>其实下面的脚本会再下一次 = =<br><img src="/2021/11/30/Hi3559AV100-1-setup/3.png" alt="3"></p></blockquote><h2 id="执行setup-python-bat脚本">执行setup_python.bat脚本</h2><p>可能会遇到以下错误，需手动配置：</p><ul><li><ol><li>wget 下载中断或者无法连接到url的话，杀掉进程，再开</li></ol></li><li><ol start="2"><li>环境变量配置失败，path超过1024个字符</li></ol></li></ul><p><img src="/2021/11/30/Hi3559AV100-1-setup/4.png" alt="4"></p><ul><li><ol start="3"><li>手动配置path：<strong>系统</strong>环境变量中增加变量<code>RUYI_PYTHON_PATH</code>，变量值设定如下：</li></ol></li></ul><p><img src="/2021/11/30/Hi3559AV100-1-setup/5.png" alt="5"></p><ul><li><ol start="4"><li>添加<code>%RUYI_PYTHON_PATH%</code>到系统环境变量path的开头；</li></ol></li><li><ol start="5"><li>手动添加<strong>用户</strong>环境变量<code>PYTHONPATH</code>（已被脚本添加过了）</li></ol></li></ul><p><img src="/2021/11/30/Hi3559AV100-1-setup/6.png" alt="6"></p><ul><li><ol start="6"><li>后续步骤4-8均略过（4、5、6脚本做过了， <s>7、8后续视情况再配置</s> 不配置不行，<a href="https://no5-aaron-wu.github.io/2021/12/07/Hi3559AV100-5-NormalQA/">后面还是会出问题 </a>）</li></ol></li></ul><h1>RuyiStudio启动</h1><p>从SDK拷贝<code>RuyiStudio-3.0.7.zip</code>到自己目录（<code>D:\software</code>）下，解压，双击RuyiStudio.exe便可启动IDE</p><p><img src="/2021/11/30/Hi3559AV100-1-setup/7.png" alt="7"></p><p>选择工作目录</p><p><img src="/2021/11/30/Hi3559AV100-1-setup/8.png" alt="8"></p><h1>参考</h1><ul><li>《HiSVP 开发指南.pdf》</li></ul>]]></content>
      
      
      <categories>
          
          <category> HISI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> HISI </tag>
            
            <tag> NNIE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA基础 [5]：互斥锁设计</title>
      <link href="/2021/11/30/CUDA-5-mutexLock/"/>
      <url>/2021/11/30/CUDA-5-mutexLock/</url>
      
        <content type="html"><![CDATA[<h1>初版</h1><blockquote><p>流传甚广的版本，来自《GPU高性能编程CUDA实战》中的sample</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CudaKernelLock</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* mutex;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CudaKernelLock</span>(<span class="keyword">void</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">        cudaError_t ret = <span class="built_in">cudaMalloc</span>((<span class="keyword">void</span>**)&amp;mutex, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">        ret = <span class="built_in">cudaMemcpy</span>(mutex, &amp;state, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), cudaMemcpyHostToDevice);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">CudaKernelLock</span>() &#123;</span><br><span class="line">        <span class="built_in">cudaFree</span>(mutex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">__device__ <span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">atomicCAS</span>(mutex, <span class="number">0</span>, <span class="number">1</span>) != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">__device__ <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">atomicExch</span>(mutex, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个方法思路是可行的，即通过原子比较交换操作<code>atomicCAS</code>竞争<code>mutex</code>，<code>atomicCAS</code><strong>读取</strong><code>mutex</code>的值，<strong>计算</strong><code>(*mutex==0?1:*mutex)</code>,并将结果<strong>存储</strong>在原内存地址。这三个操作为一个原子事务中执行。函数返回交换前的<code>*mutex</code>值。这样就在一个线程获取<code>mutex</code>并置值后，其他线程一直在等待。直到<code>atomicExch</code>置<code>mutex</code>为0后可再次获取。故在核函数中<code>lock</code>和<code>unlock</code>函数之间的操作是串行的。</p><h1>存在问题【踩坑&amp;填坑】</h1><p>但上述实现有以下几个问题：</p><h2 id="该锁的设计只能在CUDA的block之间加锁。">该锁的设计只能在CUDA的block之间加锁。</h2><p>一个block只能有一个thread，即核函数只能设计成<code>kernel&lt;&lt;&lt;128,1&gt;&gt;&gt;(...)</code>而不能是<code>kernel&lt;&lt;&lt;1,128&gt;&gt;&gt;(...)</code>，否则则会<strong>死锁</strong>。原因是因为CUDA是以warp为单位运行的，而warp的运行遵循同步执行规则（locked-step execution），即一个warp中的线程同时执行一个函数，并同时退出一个函数（SIMT）。一个warp（通常是32个thread）其中一个线程获得锁之后，等待其他线程一起退出lock函数，但其他线程等待该线程执行unlock来释放锁，从而出现了死锁。但当一个block中只有一个thread时，一个warp中只有一个thread，进而不会死锁。</p><h2 id="lock和unlock函数之间的非原子操作，并不一定是严格线程安全的。"><code>lock</code>和<code>unlock</code>函数之间的非原子操作，并不一定是严格线程安全的。</h2><p>如下所示为一个计算数组中大于阈值的元素个数的操作。然而并不能得到正确的<code>cnt</code>结果。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">GtThrCntKernel</span><span class="params">(<span class="keyword">float</span>* src, <span class="keyword">int</span> len, <span class="keyword">float</span> thr, <span class="keyword">int</span>* cnt, CudaKernelLock Lock)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos_start = blockDim.x * blockIdx.x + threadIdx.x;</span><br><span class="line">    <span class="keyword">int</span> pos_step = blockDim.x * gridDim.x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = pos_start;i &lt; len;i += pos_step) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src[i] &lt;= thr) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Lock.<span class="built_in">lock</span>();</span><br><span class="line">        *cnt = *cnt + <span class="number">1</span>;</span><br><span class="line">        Lock.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol><li>原因是一个线程对一个全局存储器或共享存储器的修改并不一定对其他block中线程是立即可见的，也就是说可能有些线程仍然是读取的若干次自增前的<code>cnt</code>。</li></ol></li><li><ol start="2"><li>解决这个问题有三种方法：</li></ol><ul><li><ol><li>在自增后加个延时函数，但加多长合适，加少了不安全，加多了影响效率，太蠢了；</li></ol></li><li><ol start="2"><li>将<code>*cnt = *cnt + 1;</code>替换为<code>atomicAdd(cnt, 1);</code>,以确保读写操作都是原子的；</li></ol></li><li><ol start="3"><li>更加<strong>通用</strong>的方法是使用<code>__threadfence()</code>，对该命令的官方解释是能确保执行该命令的线程在在该语句前对全局存储器或共享存储器的访问已经全部完成（不是保证所有线程运行到同一位置），即该命令之前的所生产的数据能够安全地被其他线程消费，执行结果对gird中所有线程可见（<code>__threadfence_block()</code>是执行结果对block中所有线程可见）。可以在<code>lock</code>和<code>unlock</code>中加上该命令。</li></ol></li></ul></li></ul><h2 id="如果采用如下所示的调用方式，该锁设计是不可重入的。">如果采用如下所示的调用方式，该锁设计是不可重入的。</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callKernel</span><span class="params">()</span></span>&#123;</span><br><span class="line">    CudaKernelLock lock_;</span><br><span class="line">    <span class="comment">// prepare the data</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// launch kernel</span></span><br><span class="line">    GtThrCntKernel &lt;&lt; &lt;<span class="number">128</span>, <span class="number">1</span> &gt;&gt; &gt; (dev_a, len, thr, dev_c, lock_);</span><br><span class="line">    CudaError_t ret = <span class="built_in">cudaGetLastError</span>();</span><br><span class="line">    <span class="keyword">if</span> (ret != cudaSuccess) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;addKernel launch failed: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(ret));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// launch kernel again</span></span><br><span class="line">    GtThrCntKernel &lt;&lt; &lt;<span class="number">128</span>, <span class="number">1</span> &gt;&gt; &gt; (dev_a, len, thr, dev_c, lock_);</span><br><span class="line">    ret = <span class="built_in">cudaGetLastError</span>();</span><br><span class="line">    <span class="keyword">if</span> (ret != cudaSuccess) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;addKernel launch failed: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(ret));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol><li>首先这里核函数调用时对<code>lock_</code>只能传值，不能传引用或指针，因为<code>lock_</code>对象是host端的量，传引用或指针给核函数，核函数中是没有办法用的。</li></ol></li><li><ol start="2"><li>传值的话就涉及到拷贝构造，即核函数中生成一个自己的device端的lock对象，并执行默认的浅拷贝<code>mutex</code>指针，浅拷贝本身没有问题，本身也希望<code>mutex</code>只有一份，但问题在于核函数退出时，析构自己的lock对象会把唯一的一个<code>mutex</code>的内存给free掉，这就导致lock_出来后就不可用了，再次将其传入kernel函数时，<code>mutex</code>指针就是个野指针了，此时<code>cudaGetLastError</code>会报错。</li></ol></li><li><ol start="3"><li><strong>解决办法1</strong>：提前将lock对象拷贝到device端，核函数传device端的指针，就避免函数内拷贝构造和析构问题。</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">GtThrCntKernel</span><span class="params">(<span class="keyword">float</span>* src, <span class="keyword">int</span> len, <span class="keyword">float</span> thr, <span class="keyword">int</span>* cnt, CudaKernelLock* Lock)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos_start = blockDim.x * blockIdx.x + threadIdx.x;</span><br><span class="line">    <span class="keyword">int</span> pos_step = blockDim.x * gridDim.x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = pos_start;i &lt; len;i += pos_step) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src[i] &lt;= thr) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Lock-&gt;<span class="built_in">lock</span>();</span><br><span class="line">        <span class="built_in">atomicAdd</span>(cnt, <span class="number">1</span>);</span><br><span class="line">        Lock-&gt;<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callKernel</span><span class="params">()</span></span>&#123;</span><br><span class="line">    CudaKernelLock lock_;</span><br><span class="line">    CudaKernelLock *dev_lock_;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>((<span class="keyword">void</span>**)&amp;dev_lock_, <span class="built_in"><span class="keyword">sizeof</span></span>(CudaKernelLock));</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(dev_lock_, &amp;lock_, <span class="built_in"><span class="keyword">sizeof</span></span>(CudaKernelLock), cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="comment">// prepare the data</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// launch kernel</span></span><br><span class="line">    GtThrCntKernel &lt;&lt; &lt;<span class="number">128</span>, <span class="number">1</span> &gt;&gt; &gt; (dev_a, len, thr, dev_c, dev_lock_);</span><br><span class="line">    CudaError_t ret = <span class="built_in">cudaGetLastError</span>();</span><br><span class="line">    <span class="keyword">if</span> (ret != cudaSuccess) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;addKernel launch failed: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(ret));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// launch kernel again</span></span><br><span class="line">    GtThrCntKernel &lt;&lt; &lt;<span class="number">128</span>, <span class="number">1</span> &gt;&gt; &gt; (dev_a, len, thr, dev_c, dev_lock_);</span><br><span class="line">    ret = <span class="built_in">cudaGetLastError</span>();</span><br><span class="line">    <span class="keyword">if</span> (ret != cudaSuccess) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;addKernel launch failed: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(ret));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li><strong>解决办法2</strong>：单独封装<code>Mutex</code>类，Lock类中用shared_ptr管理<code>Mutex</code>，拷贝构造时只会让shared_ptr的use_count加1，不会生成新的<code>Mutex</code>副本，且只有最后一个shared_ptr析构的时候（use_count为0时），才会析构<code>Mutex</code>，可以解决我们的问题。但是遗憾的是，<code>__deivice__</code>函数中不支持shared_ptr重载的<code>-&gt;</code>操作符，我们只能在<code>__device__</code>函数外额外定义变量<code>mutex_ptr</code>取得<code>Mutex</code>类对象中的<code>mutex</code>指针，还得自己实现拷贝构造函数(默认的拷贝构造也行)，就有了如下略显丑陋的实现。</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mutex</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* mutex;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Mutex</span>() &#123;</span><br><span class="line">        <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">        cudaError_t ret = <span class="built_in">cudaMalloc</span>((<span class="keyword">void</span>**)&amp;mutex, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">        ret = <span class="built_in">cudaMemcpy</span>(mutex, &amp;state, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), cudaMemcpyHostToDevice);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Mutex</span>() &#123;</span><br><span class="line">        <span class="built_in">cudaFree</span>(mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CudaKernelLock</span> &#123;</span>·</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::shared_ptr&lt;Mutex&gt; mutex = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span>* mutex_ptr = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CudaKernelLock</span>(<span class="keyword">void</span>) &#123;</span><br><span class="line">        mutex = std::make_shared&lt;Mutex&gt;();</span><br><span class="line">        mutex_ptr = mutex-&gt;mutex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CudaKernelLock</span>(<span class="keyword">const</span> CudaKernelLock&amp; lock) &#123;</span><br><span class="line">        mutex = lock.mutex;</span><br><span class="line">        mutex_ptr = mutex-&gt;mutex;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">CudaKernelLock</span>(<span class="keyword">void</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">__device__ <span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">atomicCAS</span>(mutex_ptr, <span class="number">0</span>, <span class="number">1</span>) != <span class="number">0</span>);</span><br><span class="line">        __threadfence();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">__device__ <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">        __threadfence();</span><br><span class="line">        <span class="built_in">atomicExch</span>(mutex_ptr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li><strong>解决办法3</strong>：将<code>cudaFree</code>封装成lamda函数，shared_ptr创建时传入销毁函数，优点是不用单独封装<code>Mutex</code>类，缺点还是绕不开需要一个裸指针<code>mutex_ptr</code>去给__device__函数使用。</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CudaKernelLock</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;<span class="keyword">int</span>&gt; mutex;</span><br><span class="line">    <span class="keyword">int</span>* mutex_ptr = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CudaKernelLock</span>() &#123;</span><br><span class="line">        <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">        cudaError_t ret = <span class="built_in">cudaMalloc</span>((<span class="keyword">void</span>**)&amp;mutex_ptr, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">        ret = <span class="built_in">cudaMemcpy</span>(mutex_ptr, &amp;state, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), cudaMemcpyHostToDevice);</span><br><span class="line">        <span class="comment">// auto lamdaFree = [](int* p) &#123;</span></span><br><span class="line">        <span class="comment">//    cudaFree(p);</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line">        <span class="comment">// std::shared_ptr&lt;int&gt; tmp(mutex_ptr, lamdaFree);</span></span><br><span class="line">        <span class="function">std::shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">tmp</span><span class="params">(mutex_ptr, [](<span class="keyword">int</span>* p) &#123;cudaFree(p);&#125;)</span></span>;</span><br><span class="line">        mutex = std::<span class="built_in">move</span>(tmp);<span class="comment">//std::make_shared&lt;int&gt;(dev_mutex, lamdaFree);</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">CudaKernelLock</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">__device__ <span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">atomicCAS</span>(mutex_ptr, <span class="number">0</span>, <span class="number">1</span>) != <span class="number">0</span>);</span><br><span class="line">        __threadfence();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">__device__ <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">        __threadfence();</span><br><span class="line">        <span class="built_in">atomicExch</span>(mutex_ptr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>真·线程锁设计</h1><blockquote><p>好看不一定好用</p></blockquote><p>上述的通用互斥锁类的设计虽然封装的好，但还是解决不了block内thread死锁的问题，因此只能<code>kernel&lt;&lt;&lt;n,1&gt;&gt;&gt;(...)</code>这样去使用，测试下来，虽然比CPU串行遍历计算要快，但还是没有完全发挥CUDA并行计算的能力，毕竟一个warp执行单元中只有一个thread。因此实现了如下直接嵌在核函数里的丑陋但好用的<strong>真·线程互斥锁</strong>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">GtThrCntKernel</span><span class="params">(<span class="keyword">float</span>* src, <span class="keyword">int</span> len, <span class="keyword">float</span> thr, <span class="keyword">int</span>* cnt, <span class="keyword">int</span>* mutex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos_start = blockDim.x * blockIdx.x + threadIdx.x;</span><br><span class="line"><span class="keyword">int</span> pos_step = blockDim.x * gridDim.x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos_start;i &lt; len;i += pos_step) &#123;</span><br><span class="line">    <span class="keyword">if</span> (src[i] &lt;= thr) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> blocked = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(blocked)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">atomicCAS</span>(mutex, <span class="number">0</span>, <span class="number">1</span>))&#123;</span><br><span class="line">            <span class="comment">// **** critical section ****//</span></span><br><span class="line">            <span class="built_in">atomicAdd</span>(cnt, <span class="number">1</span>);</span><br><span class="line">            __threadfence();</span><br><span class="line">            <span class="comment">// **** critical section ****//</span></span><br><span class="line">            <span class="built_in">atomicExch</span>(mutex, <span class="number">0</span>);</span><br><span class="line">            blocked = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callKernel</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mutex_state = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *mutex_;</span><br><span class="line">CudaError_t ret = <span class="built_in">cudaMalloc</span>((<span class="keyword">void</span> **)&amp;mutex_, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">ret = <span class="built_in">cudaMemcpy</span>(mutex_, &amp;mutex_state, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare the data</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// launch kernel</span></span><br><span class="line">GtThrCntKernel &lt;&lt;&lt;<span class="number">4</span>, <span class="number">128</span>&gt;&gt;&gt; (dev_a, len, thr, dev_c, mutex_);</span><br><span class="line">ret = <span class="built_in">cudaGetLastError</span>();</span><br><span class="line"><span class="keyword">if</span> (ret != cudaSuccess) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;addKernel launch failed: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(ret));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaFree</span>(mutex_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如上所示，思路还是一样的，只不过加/解锁的操作没了函数的封装，直接嵌在核函数里，也就没有了warp必须同进同出函数的问题，信息量<code>mutex</code>仍然需要预先在外部分配好，但是没有了类的封装，自然也不会存在构造/析构的问题。同样临界区中block之间的线程安全问题仍需要原子操作或__threadfence()去解决。</li><li>实测下来，不再会出现死锁问题，不会有重入问题，且速度会快不少。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CUDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
            <tag> 计算机体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA基础 [4]：多流测试</title>
      <link href="/2021/11/28/CUDA-4-MultiStreamTest/"/>
      <url>/2021/11/28/CUDA-4-MultiStreamTest/</url>
      
        <content type="html"><![CDATA[<h1>BackGround</h1><p>测试验证cuda多流的并行调度逻辑<br>测试环境：GTX1650+VS2019+Nsight</p><h1>单流循环</h1><p>按序执行</p><p><img src="/2021/11/28/CUDA-4-MultiStreamTest/1.jpg" alt="1"></p><h1>双流循环（方式1）</h1><p>目前最优的并行方式</p><p><img src="/2021/11/28/CUDA-4-MultiStreamTest/2.jpg" alt="2"></p><h1>双流循环（方式2）</h1><p>并行程度不如方式1</p><p><img src="/2021/11/28/CUDA-4-MultiStreamTest/3.jpg" alt="3"></p><h1>双流循环（方式3）</h1><p><img src="/2021/11/28/CUDA-4-MultiStreamTest/4.jpg" alt="4"></p><h1>双流循环（方式4）</h1><p><img src="/2021/11/28/CUDA-4-MultiStreamTest/5.jpg" alt="5"></p><h1>TX2 deviceQuery</h1><p><img src="/2021/11/28/CUDA-4-MultiStreamTest/6.jpg" alt="6"></p><h1>总结</h1><ul><li><ol><li>Nsight能可视化cuda的时间线，可以在设计初期帮助规避一些不合理的设计逻辑，但PC和TX2上设备支持情况不同，在PC上的表现不完全等同于TX2上表现，TX2上需另做测试，看是否满足预期；</li></ol></li><li><ol start="2"><li>从上述对比结果看，在确保上下文依赖关系正确的情况下，同一流的操作放在一起调用能获得更好的并行效果；</li></ol></li><li><ol start="3"><li>TX2只有一个copy engine， 所以拷贝操作间不能并行。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> CUDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
            <tag> 计算机体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA基础 [3]：流和事件</title>
      <link href="/2021/11/28/CUDA-3-StreamAndEvent/"/>
      <url>/2021/11/28/CUDA-3-StreamAndEvent/</url>
      
        <content type="html"><![CDATA[<h1>流（stream）</h1><p>设备操作包括：数据传输和执行kernel函数。</p><p>在cuda中，所有的设备操作都在stream中执行。当没有指定stream时，使用默认的stream。</p><h2 id="默认stream">默认stream</h2><p>默认stream是一个针对设备操作同步的stream，也就是说，只有当所有之前设备上任何stream(包括默认stream)里面的操作全部完成时，才开始默认stream里面操作的执行，并且默认stream里面的一个操作必须完成，其他任何stream（包括默认stream）里面的操作才能开始。</p><p>举个例子：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cudaMemcpy(d_a, a, numBytes, cudaMemcpyHostToDevice); </span><br><span class="line">increment&lt;&lt;&lt;<span class="number">1</span>,N&gt;&gt;&gt;(d_a);</span><br><span class="line">cudaMemcpy(a, d_a, numBytes, cudaMemcpyDeviceToHost);</span><br></pre></td></tr></table></figure><ul><li><ol><li>从设备端来看，这三个操作都在默认stream中，并且按顺序执行；</li></ol></li><li><ol start="2"><li>从主机端来看，数据传输是阻塞的或者同步传输，而kernel是异步的；</li></ol><ul><li>第一步主机到设备的数据传输是同步的，CPU线程不能到达第二行直到主机到设备的数据传输完成。</li><li>一旦kernel被launch，CPU线程移到第三行，但是该行的传输还不能开始，因为设备端正在执行第二行的内容（但如果在2-3行之间插入其他cpu操作是可以执行的）。</li></ul></li></ul><h2 id="非默认stream">非默认stream</h2><ul><li><ol><li>非默认stream中的数据传输使用函数<code>cudaMemcpyAsync()</code>，这个函数在主机端是非阻塞的，传输处理后控制权马上返回给主机线程；</li></ol></li><li><ol start="2"><li>自定义一个stream可以用<code>cudaError_t cudaStreamCreate(cudaStream_t* pStream)</code>函数；</li></ol></li><li><ol start="3"><li>当执行一次异步数据传输时，我们<s>必须</s>(此处存疑)使用<strong>页锁定内存<code>pinned memory</code>或<code>page-locked memory)</code></strong>：</li></ol><ul><li>对CUDA架构而言，主机端的内存被分为两种，一种是<strong>可分页内存（<code>pageable memroy</code>）<strong>和</strong>页锁定内存（<code>page-locked</code>或<code>pinned</code>）</strong>。可分页内存是由操作系统API函数<code>malloc()</code>在主机内存上分配的，页锁定内存是由CUDA函数<code>cudaHostAlloc()</code>在主机内存上分配的。页锁定内存的重要属性是主机的操作系统将不会对这块内存进行<em><strong>分页</strong></em>（<a href="https://www.jianshu.com/p/f9e362e64ef9">分页机制</a>）和<em><strong>交换</strong></em>操作，确保该内存始终驻留在物理内存中。</li><li>如果在异步数据传输期间，host端的某些操作导致内存换页，可能会导致数据传输异常（另外一个说法：没有显示定义页锁定内存时，当将<code>pageable host Memory</code>数据送到device时，CUDA驱动会分配临时的页锁定内存，并将host数据放到这个临时空间里，然后再向device传输数据）；</li><li>GPU知道页锁定内存的物理地址，可以通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Blue"><mtext>直接内存访问</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{Blue}直接内存访问</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:Blue;">直接内存访问</span></span></span></span><code>Direct Memory Access, DMA</code>技术直接在主机和GPU之间复制数据，速率更快。由于每个页锁定内存都需要分配物理内存，并且这些内存不能交换到磁盘上，所以页锁定内存比使用标准<code>malloc()</code>分配的可分页内存更消耗内存空间。</li><li>分配页锁定内存可以使用<code>cudaHostAlloc()</code>函数或<code>cudaMallocHost()</code>函数（C API）；</li><li>释放页锁定内存使用<code>cudaFreeHost()</code>；</li><li>将可分页内存注册为页锁定内存<code>cudaHostRegister()</code>；</li></ul></li><li><ol start="4"><li>关于<strong>多流</strong>，后续会做相关的<a href="https://no5-aaron-wu.github.io/2021/11/28/CUDA-4-MultiStreamTest/">测试</a>，另外可以参考以下博客：</li></ol><ul><li><a href="https://zhuanlan.zhihu.com/p/78557104">https://zhuanlan.zhihu.com/p/78557104</a> （其中多个kernel可以并行的描述存疑）</li><li><a href="https://blog.csdn.net/u010335328/article/details/52453499">https://blog.csdn.net/u010335328/article/details/52453499</a></li></ul></li></ul><h1>同步</h1><ul><li><code>cudaDeviceSynchronize()</code>：该方法将阻塞CPU端线程的执行，直到GPU端完成之前CUDA的任务，包括kernel函数、数据拷贝等；</li><li><code>cudaStreamSynchronize()</code>：这个方法接受一个stream ID，它将阻塞CPU执行直到GPU端完成相应stream ID的所有CUDA任务，但其它stream中的CUDA任务可能执行完也可能没有执行完；</li><li><code>cudaStreamQuery()</code>：检查stream中的操作是否全部完成并返回状态，即使有操作没完成也不会阻塞host。如果所有操作都完成了，则返回<code>cudaSuccess</code>，否则返回<code>cudaErrorNotReady</code>；</li></ul><h1>事件（Event）</h1><p>用来标记stream执行过程的某个特定的点，其主要用途是：1. 同步stream执行；2. 操控device运行步调。</p><ul><li><ol><li><code>__host____device__cudaError_t cudaEventRecord ( cudaEvent_t event, cudaStream_t stream = 0 )</code>：记录一个事件。如果<code>stream</code>是非零的，当流中所有的操作完毕，事件被记录；否则，当CUDA context中所有的操作完毕，事件被记录。由于这个操作是异步的，必须使用<code>cudaEventQuery</code>和/或<code>cudaEventSyncronize</code>函数来决定何时事件被真的记录了。如果cudaEventRecord 之前被调用了，并且事件还没有被记录，函数返回<code>cudaErrorInvalidValue</code>。</li></ol></li><li><ol start="2"><li><code>cudaEventSyncronize()</code>：阻塞host直到事件真的被记录。</li></ol></li><li><ol start="3"><li><code>cudaError_t cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t stop)</code>：返回start和stop之间的时间间隔，单位是毫秒。start和stop不必关联到同一个stream上，但是要注意，如果二者任意一个关联到了非默认stream上，时间间隔可能要比期望的大。这是因为<code>cudaEventRecord</code>是异步发生的，我们没办法保证度量出来的时间恰好就是两个event之间，所以只是想要gpu工作的时间间隔，则stop和strat都关联到默认stream就好了。</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create two events</span></span><br><span class="line">cudaEvent_t start, stop;</span><br><span class="line"><span class="built_in">cudaEventCreate</span>(&amp;start);</span><br><span class="line"><span class="built_in">cudaEventCreate</span>(&amp;stop);</span><br><span class="line"><span class="comment">// record start event on the default stream</span></span><br><span class="line"><span class="built_in">cudaEventRecord</span>(start);</span><br><span class="line"><span class="comment">// execute kernel</span></span><br><span class="line">kernel&lt;&lt;&lt;grid, block&gt;&gt;&gt;(arguments);</span><br><span class="line"><span class="comment">// record stop event on the default stream</span></span><br><span class="line"><span class="built_in">cudaEventRecord</span>(stop);</span><br><span class="line"><span class="comment">// wait until the stop event completes</span></span><br><span class="line"><span class="built_in">cudaEventSynchronize</span>(stop);</span><br><span class="line"><span class="comment">// calculate the elapsed time between two events</span></span><br><span class="line"><span class="keyword">float</span> time;</span><br><span class="line"><span class="built_in">cudaEventElapsedTime</span>(&amp;time, start, stop);</span><br><span class="line"><span class="comment">// clean up the two events</span></span><br><span class="line"><span class="built_in">cudaEventDestroy</span>(start);</span><br><span class="line"><span class="built_in">cudaEventDestroy</span>(stop);</span><br></pre></td></tr></table></figure><h1>参考</h1><ul><li><a href="https://www.cnblogs.com/1024incn/p/5891051.html">https://www.cnblogs.com/1024incn/p/5891051.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CUDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
            <tag> 计算机体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA基础 [2]：Get Started</title>
      <link href="/2021/11/27/CUDA-2-start/"/>
      <url>/2021/11/27/CUDA-2-start/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CUDA（Compute Unified Device Architecture）计算统一设备框架</p></blockquote><h1>GPU架构特点</h1><ul><li><p><strong>核的角度</strong>：首先CPU由专为顺序串行处理而优化的几个核心组成。而GPU则由数以千计的更小、更高效的核心组成，这些核心专门为同时处理多任务而设计，可高效地处理并行任务。也就是，CPU虽然每个核心自身能力极强，处理任务上非常强悍，无奈他核心少，在并行计算上表现不佳；反观GPU，虽然他的每个核心的计算能力不算强，但他胜在核心非常多，可以同时处理多个计算任务，在并行计算的支持上做得很好。GPU和CPU的不同硬件特点决定了他们的应用场景，CPU是计算机的运算和控制的核心，GPU主要用作图形图像处理。图像在计算机呈现的形式就是矩阵，我们对图像的处理其实就是操作各种矩阵进行计算，而很多矩阵的运算其实可以做并行化，这使得图像处理可以做得很快，因此GPU在图形图像领域也有了大展拳脚的机会。</p></li><li><p><strong>数据处理角度</strong>：CPU需要很强的通用性来处理各种不同的数据类型，比如整型、浮点数等，同时它又必须擅长处理逻辑判断所导致的大量分支跳转和中断处理，所以CPU其实就是一个能力很强的伙计，他能把很多事处理得妥妥当当，当然啦我们需要给他很多资源供他使用（各种硬件），这也导致了CPU不可能有太多核心（核心总数不超过16）。而GPU面对的则是类型高度统一的、相互无依赖的大规模数据和不需要被打断的纯净的计算环境，GPU有非常多核心（费米架构就有512核），虽然其核心的能力远没有CPU的核心强，但是胜在多，在处理简单计算任务时呈现出“人多力量大”的优势，这就是并行计算的魅力。</p></li></ul><p><strong>异构计算</strong>：不同体系结构的处理器相互协作完成计算任务，并行部分在GPU上运行，串行部分在CPU运行。CPU负责总体的程序流程，而GPU负责具体的计算任务，当GPU各个线程完成计算任务后，我们就将GPU那边计算得到的结果拷贝到CPU端，完成一次计算任务。</p><h1>CUDA线程模型</h1><h2 id="线程模型（软件角度）">线程模型（软件角度）</h2><p>kernel在device上执行时实际上是启动很多线程，一个kernel所启动的所有线程称为一个网格（<code>grid</code>），同一个网格上的线程共享相同的全局内存空间，<strong><code>grid</code><strong>是线程结构的</strong>第一层次</strong>，而grid又可以分为很多线程块（<code>block</code>），一个线程块里面包含很多线程，这是<strong>第二层次</strong>。</p><p><img src="/2021/11/27/CUDA-2-start/1.png" alt="1"></p><ul><li><ol><li><strong><code>Thread</code></strong>：线程，并行的基本单位；</li></ol></li><li><ol start="2"><li><strong><code>Thread Block</code></strong>：线程块，互相合作的线程组，线程块有如下几个特点：<ol><li>允许彼此同步；</li><li>可以通过共享内存快速交换数据；</li><li>可以以1维、2维或3维组织（一般为3维）；</li><li>每一个<code>block</code>和每个<code>thread</code>都有自己的ID（<code>blockIdx</code>和<code>threadIdx</code>），我们通过相应的索引找到相应的线程块和线程。</li></ol></li></ol></li><li><ol start="3"><li><strong><code>Grid</code></strong>：一组线程块<ol><li>可以以1维、2维或3维组织（一般为2维）；</li><li>共享全局内存；</li><li><code>grid</code>和<code>block</code>都是定义为<code>dim3</code>类型的变量，<code>dim3</code>可以看成是包含三个无符号整数<code>(x, y, z)</code>成员的结构体变量，在定义时，缺省值初始化为1；</li><li><code>dim3</code>仅为host端可见，其对应的device端类型为<code>uint3</code>。</li></ol></li></ol></li><li><ol start="4"><li><strong><code>Warp</code></strong>：GPU执行程序时调度和运行的单位（是<code>SM</code>的基本执行单元），目前cuda的warp的大小为32；同在一个warp的线程，以不同数据资源执行相同的指令，这就是所谓 <code>SIMT</code>（<code>Single Instruction Multiple Threads</code>，单指令多线程）。</li></ol></li><li><ol start="5"><li><strong><code>Kernel</code></strong>：在GPU上执行的核心程序，这个kernel函数是运行在某个Grid上的。<ol><li><code>One kernel &lt;==&gt; One Grid</code></li></ol></li></ol></li></ul><h2 id="流处理器（硬件角度）">流处理器（硬件角度）</h2><ul><li><ol><li><code>SP（streaming processor）</code>：也称<code>CUDA core</code>。最基本的处理单元，具体的指令和任务都是在SP上处理的。一个SP可以执行一个thread；</li></ol></li><li><ol start="2"><li><code>SM（streaming multiprocessor）</code>：也叫GPU大核，由多个SP加上其他资源（如：<code>warp scheduler</code>，<code>register</code>，<code>shared memory</code>等）组成。block在SM上执行。<ol><li>SM可以看做GPU的心脏（对比CPU核心），<code>register</code>和<code>shared memory</code>是SM的稀缺资源。CUDA将这些资源分配给所有驻留在SM中的threads。因此，这些有限的资源就使每个SM中<code>active warps</code>有非常严格的限制，也就限制了并行能力；</li><li>每个SM包含的SP数量依据GPU架构而不同，Fermi架构GF100是32个，GF10X是48个，Kepler架构都是192个，Maxwell架构都是128个；</li><li>SM上并不是所有的thread能够在同一时刻执行。Nvidia把32个threads组成一个warp，warp是调度和运行的基本单元。warp中所有threads并行的执行相同的指令。一个warp需要占用一个SM运行，多个warps需要轮流进入SM。由SM的硬件warp scheduler负责调度。目前每个warp包含32个threads（Nvidia保留修改数量的权利）。所以，一个GPU上resident thread最多只有 <code>SM * warp</code>个。</li><li>block一旦被分配好SM，该block就会一直驻留在该SM中，直到执行结束。一个SM可以同时拥有多个blocks，但需要序列执行。</li></ol></li></ol></li></ul><h2 id="对应关系-硬件结构">对应关系&amp;硬件结构</h2><p><img src="/2021/11/27/CUDA-2-start/2.png" alt="2"></p><p><img src="/2021/11/27/CUDA-2-start/3.png" alt="3"></p><h2 id="内存模型">内存模型</h2><p>CUDA中的内存模型分为以下几个层次：</p><ul><li><ol><li>每个线程都有自己的registers（寄存器）；</li></ol></li><li><ol start="2"><li>每个线程都有自己的local memory（局部内存）；</li></ol></li><li><ol start="3"><li>每个线程块内都有自己的shared memory（共享内存），线程块内的所有线程共享这段内存资源</li></ol></li><li><ol start="4"><li>每个grid都有自己的global memory（全局内存），不同线程块的线程都可使用</li></ol></li><li><ol start="5"><li>每个grid都有自己的constant memory（常量内存）和texture memory（纹理内存），不同线程块的线程都可使用。</li></ol></li></ul><blockquote><p>线程访问这几类存储器的速度是register &gt; local memory &gt;shared memory &gt; global memory</p></blockquote><p><img src="/2021/11/27/CUDA-2-start/4.png" alt="4"></p><h2 id="编程模型">编程模型</h2><h3 id="我们怎么写一个能在GPU跑的程序或函数呢？">我们怎么写一个能在GPU跑的程序或函数呢？</h3><table><thead><tr><th></th><th>Executed on the:</th><th>Only callable from the:</th></tr></thead><tbody><tr><td><code>__device__ float DeviceFunc()</code></td><td>device</td><td>device</td></tr><tr><td><code>__global__ void KernelFunc()</code></td><td>device</td><td>host</td></tr><tr><td><code>__host__ float HostFunc()</code></td><td>host</td><td>host</td></tr></tbody></table><p>如上表所示，我们用<code>__global__</code>定义一个kernel函数，就是CPU上调用，GPU上执行，注意<code>__global__</code>函数的返回值必须设置为<code>void</code>。</p><h3 id="CPU和GPU间的数据传输怎么写？">CPU和GPU间的数据传输怎么写？</h3><ul><li><ol><li><code>cudaMalloc()</code>：在设备端分配global memory</li></ol></li><li><ol start="2"><li><code>cudaFree()</code>：释放存储空间</li></ol></li><li><ol start="3"><li><p><code>cudaMemcpy(void *dst, void *src, size_t nbytes,enum cudaMemcpyKind direction)</code>：数据传输</p><p>enum cudaMemcpyKind:传输方向</p><ol><li>cudaMemcpyHostToDevice（CPU到GPU）</li><li>cudaMemcpyDeviceToHost（GPU到CPU）</li><li>cudaMemcpyDeviceToDevice（GPU到GPU）</li></ol></li></ol></li></ul><h3 id="怎么用代码表示线程组织模型？">怎么用代码表示线程组织模型？</h3><p>用<code>dim3</code>类来表示网格和线程块的组织方式，网格grid可以表示为一维和二维格式，线程块block可以表示为一维、二维和三维的数据格式。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">dim3 <span class="title">DimGrid</span><span class="params">(<span class="number">100</span>, <span class="number">50</span>)</span></span>; <span class="comment">//5000个线程块，维度是100*50 </span></span><br><span class="line"><span class="function">dim3 <span class="title">DimBlock</span><span class="params">(<span class="number">4</span>, <span class="number">8</span>, <span class="number">8</span>)</span></span>; <span class="comment">//每个线层块内包含256个线程，线程块内的维度是4*8*8</span></span><br></pre></td></tr></table></figure><h3 id="线程索引方式速查">线程索引方式速查</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cuda_runtime.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;device_launch_parameters.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread 1D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testThread1</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = threadIdx.x;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread 2D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testThread2</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = threadIdx.x + threadIdx.y*blockDim.x;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread 3D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testThread3</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = threadIdx.x + threadIdx.y*blockDim.x + threadIdx.z*blockDim.x*blockDim.y;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block 1D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlock1</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = blockIdx.x;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block 2D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlock2</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = blockIdx.x + blockIdx.y*gridDim.x;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block 3D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlock3</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block-thread 1D-1D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlockThread1</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = threadIdx.x + blockDim.x*blockIdx.x;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block-thread 1D-2D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlockThread2</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> threadId_2D = threadIdx.x + threadIdx.y*blockDim.x;</span><br><span class="line">    <span class="keyword">int</span> i = threadId_2D+ (blockDim.x*blockDim.y)*blockIdx.x;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block-thread 1D-3D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlockThread3</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> threadId_3D = threadIdx.x + threadIdx.y*blockDim.x + threadIdx.z*blockDim.x*blockDim.y;</span><br><span class="line">    <span class="keyword">int</span> i = threadId_3D + (blockDim.x*blockDim.y*blockDim.z)*blockIdx.x;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block-thread 2D-1D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlockThread4</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> blockId_2D = blockIdx.x + blockIdx.y*gridDim.x;</span><br><span class="line">    <span class="keyword">int</span> i = threadIdx.x + blockDim.x*blockId_2D;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block-thread 3D-1D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlockThread5</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> blockId_3D = blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y;</span><br><span class="line">    <span class="keyword">int</span> i = threadIdx.x + blockDim.x*blockId_3D;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block-thread 2D-2D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlockThread6</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> threadId_2D = threadIdx.x + threadIdx.y*blockDim.x;</span><br><span class="line">    <span class="keyword">int</span> blockId_2D = blockIdx.x + blockIdx.y*gridDim.x;</span><br><span class="line">    <span class="keyword">int</span> i = threadId_2D + (blockDim.x*blockDim.y)*blockId_2D;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block-thread 2D-3D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlockThread7</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> threadId_3D = threadIdx.x + threadIdx.y*blockDim.x + threadIdx.z*blockDim.x*blockDim.y;</span><br><span class="line">    <span class="keyword">int</span> blockId_2D = blockIdx.x + blockIdx.y*gridDim.x;</span><br><span class="line">    <span class="keyword">int</span> i = threadId_3D + (blockDim.x*blockDim.y*blockDim.z)*blockId_2D;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block-thread 3D-2D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlockThread8</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> threadId_2D = threadIdx.x + threadIdx.y*blockDim.x;</span><br><span class="line">    <span class="keyword">int</span> blockId_3D = blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y;</span><br><span class="line">    <span class="keyword">int</span> i = threadId_2D + (blockDim.x*blockDim.y)*blockId_3D;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//block-thread 3D-3D</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">testBlockThread9</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> threadId_3D = threadIdx.x + threadIdx.y*blockDim.x + threadIdx.z*blockDim.x*blockDim.y;</span><br><span class="line">    <span class="keyword">int</span> blockId_3D = blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y;</span><br><span class="line">    <span class="keyword">int</span> i = threadId_3D + (blockDim.x*blockDim.y*blockDim.z)*blockId_3D;</span><br><span class="line">    c[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addWithCuda</span><span class="params">(<span class="keyword">int</span> *c, <span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *dev_a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *dev_b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *dev_c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaSetDevice</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMalloc</span>((<span class="keyword">void</span>**)&amp;dev_c, size * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">cudaMalloc</span>((<span class="keyword">void</span>**)&amp;dev_a, size * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">cudaMalloc</span>((<span class="keyword">void</span>**)&amp;dev_b, size * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(dev_a, a, size * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(dev_b, b, size * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//testThread1&lt;&lt;&lt;1, size&gt;&gt;&gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s;s.x = size/5;s.y = 5;s.z = 1;</span></span><br><span class="line">    <span class="comment">//testThread2 &lt;&lt;&lt;1,s&gt;&gt;&gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s; s.x = size / 10; s.y = 5; s.z = 2;</span></span><br><span class="line">    <span class="comment">//testThread3&lt;&lt;&lt;1, s &gt;&gt;&gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//testBlock1&lt;&lt;&lt;size,1 &gt;&gt;&gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s; s.x = size / 5; s.y = 5; s.z = 1;</span></span><br><span class="line">    <span class="comment">//testBlock2&lt;&lt;&lt;s, 1 &gt;&gt;&gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s; s.x = size / 10; s.y = 5; s.z = 2;</span></span><br><span class="line">    <span class="comment">//testBlock3&lt;&lt;&lt;s, 1 &gt;&gt;&gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//testBlockThread1&lt;&lt;&lt;size/10, 10&gt;&gt;&gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s1; s1.x = size / 100; s1.y = 1; s1.z = 1;</span></span><br><span class="line">    <span class="comment">//uint3 s2; s2.x = 10; s2.y = 10; s2.z = 1;</span></span><br><span class="line">    <span class="comment">//testBlockThread2 &lt;&lt; &lt;s1, s2 &gt;&gt; &gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s1; s1.x = size / 100; s1.y = 1; s1.z = 1;</span></span><br><span class="line">    <span class="comment">//uint3 s2; s2.x = 10; s2.y = 5; s2.z = 2;</span></span><br><span class="line">    <span class="comment">//testBlockThread3 &lt;&lt; &lt;s1, s2 &gt;&gt; &gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s1; s1.x = 10; s1.y = 10; s1.z = 1;</span></span><br><span class="line">    <span class="comment">//uint3 s2; s2.x = size / 100; s2.y = 1; s2.z = 1;</span></span><br><span class="line">    <span class="comment">//testBlockThread4 &lt;&lt; &lt;s1, s2 &gt;&gt; &gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s1; s1.x = 10; s1.y = 5; s1.z = 2;</span></span><br><span class="line">    <span class="comment">//uint3 s2; s2.x = size / 100; s2.y = 1; s2.z = 1;</span></span><br><span class="line">    <span class="comment">//testBlockThread5 &lt;&lt; &lt;s1, s2 &gt;&gt; &gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s1; s1.x = size / 100; s1.y = 10; s1.z = 1;</span></span><br><span class="line">    <span class="comment">//uint3 s2; s2.x = 5; s2.y = 2; s2.z = 1;</span></span><br><span class="line">    <span class="comment">//testBlockThread6 &lt;&lt; &lt;s1, s2 &gt;&gt; &gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s1; s1.x = size / 100; s1.y = 5; s1.z = 1;</span></span><br><span class="line">    <span class="comment">//uint3 s2; s2.x = 5; s2.y = 2; s2.z = 2;</span></span><br><span class="line">    <span class="comment">//testBlockThread7 &lt;&lt; &lt;s1, s2 &gt;&gt; &gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uint3 s1; s1.x = 5; s1.y = 2; s1.z = 2;</span></span><br><span class="line">    <span class="comment">//uint3 s2; s2.x = size / 100; s2.y = 5; s2.z = 1;</span></span><br><span class="line">    <span class="comment">//testBlockThread8 &lt;&lt;&lt;s1, s2 &gt;&gt;&gt;(dev_c, dev_a, dev_b);</span></span><br><span class="line"></span><br><span class="line">    uint3 s1; s1.x = <span class="number">5</span>; s1.y = <span class="number">2</span>; s1.z = <span class="number">2</span>;</span><br><span class="line">    uint3 s2; s2.x = size / <span class="number">200</span>; s2.y = <span class="number">5</span>; s2.z = <span class="number">2</span>;</span><br><span class="line">    testBlockThread9&lt;&lt;&lt;s1, s2 &gt;&gt;&gt;(dev_c, dev_a, dev_b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(c, dev_c, size*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaFree</span>(dev_a);</span><br><span class="line">    <span class="built_in">cudaFree</span>(dev_b);</span><br><span class="line">    <span class="built_in">cudaFree</span>(dev_c);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaGetLastError</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span> *b = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span> *c = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span> *cc = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">        b[i] = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">        c[i] = b[i] - a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">addWithCuda</span>(cc, a, b, n);</span><br><span class="line"></span><br><span class="line">    FILE *fp = <span class="built_in">fopen</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d %d\n&quot;</span>, c[i], cc[i]);</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[i] != cc[i])</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no pass&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaDeviceReset</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line">    <span class="keyword">delete</span>[] b;</span><br><span class="line">    <span class="keyword">delete</span>[] c;</span><br><span class="line">    <span class="keyword">delete</span>[] cc;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>参考</h1><ul><li><p><a href="https://www.cnblogs.com/skyfsm/p/9673960.html">https://www.cnblogs.com/skyfsm/p/9673960.html</a></p></li><li><p><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html">https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/53773183?from_voters_page=true">https://zhuanlan.zhihu.com/p/53773183?from_voters_page=true</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CUDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
            <tag> 计算机体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA基础 [1]：CPU GPU TPU NPU</title>
      <link href="/2021/11/27/CUDA-1-xPU/"/>
      <url>/2021/11/27/CUDA-1-xPU/</url>
      
        <content type="html"><![CDATA[<h1>CPU（Central Processing Unit）中央处理器</h1><p>CPU的结构主要包括<strong>运算器</strong>（<code>ALU, Arithmetic and Logic Unit</code>）、<strong>控制单元</strong>（<code>CU, Control Unit</code>）、<strong>寄存器</strong>（<code>Register</code>）、<strong>高速缓存器</strong>（<code>Cache</code>）和它们之间通讯的数据、控制及状态的<strong>总线</strong>。</p><p><img src="/2021/11/27/CUDA-1-xPU/1.png" alt="1"></p><h1>GPU（Graphics Processing Unit）图形处理器</h1><p>也是由三个部分组成：计算单元、控制单元和存储单元。</p><p><img src="/2021/11/27/CUDA-1-xPU/2.png" alt="2"></p><p>CPU精于控制和复杂运算，而GPU精于简单且重复的运算：比如矩阵运算。</p><ul><li>CPU：擅长流程控制和逻辑处理，不规则数据结构，不可预测存储结构，单线程程序，分支密集型算法</li><li>GPU：擅长数据并行计算，规则数据结构，可预测存储模式</li></ul><p>CPU是顺序执行运算，而GPU是可以大量并发的执行运算。</p><p>虽然GPU是为了图像处理而生的，但在结构上并没有专门为图像服务的部件，只是对CPU的结构进行了优化与调整，所以GPU不仅可以用在图像领域，它还被用来科学计算、密码破解、数值分析，海量数据处理（排序，Map-Reduce等），金融分析等需要大规模并行计算的领域。</p><p>但GPU无法单独工作，必须由CPU进行控制调用才能工作。CPU可单独作用，处理复杂的逻辑运算和不同的数据类型，但当需要大量的处理类型统一的数据时，则可调用GPU进行并行计算。</p><p>关于GPU架构的详细介绍可以看<a href="http://haifux.org/lectures/267/Introduction-to-GPUs.pdf">这里</a>。</p><h1>TPU（Tensor Processing Unit）张量处理单元</h1><p>深度学习算法的专用芯片</p><p>TPU的高性能还来源于对于低运算精度的容忍。研究结果表明，低精度运算带来的深度学习算法准确率损失很小，但是在硬件实现上却可以带来巨大的便利，包括功耗更低、速度更快、占芯片面积更小的运算单元、更小的内存带宽需求等。TPU采用了8比特的低精度运算。</p><h1>NPU（Neural Network Processing Unit）神经网络处理器</h1><p>NPU的工作原理是在电路层模拟人类神经元和突触，并且用深度学习指令集直接处理大规模的神经元和突触，一条指令完成一组神经元的处理。相比CPU和GPU，NPU通过突触权重实现存储和计算一体化，从而提高运行效率。</p>]]></content>
      
      
      <categories>
          
          <category> CUDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
            <tag> 计算机体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [8]：MNN中的ConvolutionTiled实现</title>
      <link href="/2021/11/22/AI-Algorithm-8-ConvTiledInMnn/"/>
      <url>/2021/11/22/AI-Algorithm-8-ConvTiledInMnn/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>一般卷积，主要针对CPU后端，基于/source/backend/cpu/compute/ConvolutionTiledExecutor.cpp源码展开。</p><blockquote><p>以下面的数据输入为例，由于<code>kernelX != kernelY</code>，因此<code>Strassen</code>和<code>Winograd</code>均不适用。</p><p>input: <code>1 x 8 x 224 x 224</code>，<code>C4 Pack</code>格式为: <code>1 x 2 x 224 x 224 (x 4)</code></p><p>weight: <code>16 x 8 x 3 x 5</code></p><p>output: <code>1 x 16 x 222 x 220</code>，<code>C4 Pack</code>格式为: <code>1 x 4 x 222 x 220 (x 4)</code></p><p>没有特殊说明，代码版本均为MNN release_1.1.7版本，release_1.2.3版本已经将ConvolutionTiledExecutor的部分实现融合到了DenseConvolutionTiledExecutor.cpp中</p></blockquote><h1>权重重排</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _initWeight(<span class="keyword">float</span> *dest, <span class="keyword">const</span> <span class="keyword">float</span> *source, <span class="keyword">float</span>* cache, <span class="keyword">int</span> depth, <span class="keyword">int</span> outputCount, <span class="keyword">int</span> kernelSize, <span class="keyword">const</span> CoreFunctions* function) &#123;</span><br><span class="line">    <span class="comment">// Swap k, ic</span></span><br><span class="line">    <span class="keyword">int</span> dims[<span class="number">4</span>] = &#123;</span><br><span class="line">        depth,</span><br><span class="line">        kernelSize,</span><br><span class="line">        kernelSize,</span><br><span class="line">        depth</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> o=<span class="number">0</span>; o&lt;outputCount; ++o) &#123;</span><br><span class="line">        <span class="keyword">auto</span> dO = cache + o * depth * kernelSize;</span><br><span class="line">        <span class="keyword">auto</span> sO = source + o * depth * kernelSize;</span><br><span class="line">        <span class="built_in">MNNTranspose32Bit</span>((<span class="keyword">int32_t</span>*)dO, (<span class="keyword">const</span> <span class="keyword">int32_t</span>*)sO, &amp;dims[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (function-&gt;bytes &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// Lowp</span></span><br><span class="line">        function-&gt;<span class="built_in">MNNFp32ToLowp</span>((<span class="keyword">float</span>*)cache, (<span class="keyword">int16_t</span>*)cache, outputCount * kernelSize * depth);</span><br><span class="line">    &#125;</span><br><span class="line">    function-&gt;<span class="built_in">MNNPackForMatMul_B</span>(dest, cache, outputCount, kernelSize * depth, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>权重重排分两个步骤：</p><ul><li><ol><li><code>MNNTranspose32Bit</code>：逐个卷积核遍历，执行转置操作，转置后尺寸为<code>16 x 15 x 8</code>。</li></ol></li></ul><p><img src="/2021/11/22/AI-Algorithm-8-ConvTiledInMnn/1.png" alt="1"></p><ul><li><ol start="2"><li><code>MNNPackForMatMul_B</code>：对转置后的卷积核进行<code>C4 Pack</code>， <code>16 x 8 x 3 x 5</code> 重排为 <code>4 x 15 x 8 (x 4)</code>。</li></ol></li></ul><p><img src="/2021/11/22/AI-Algorithm-8-ConvTiledInMnn/2.png" alt="2"></p><h1>OnResize</h1><h2 id="数据分块">数据分块</h2><p>假设<code>ePack= 24</code>，对于输出而言，单个FeatureMap的24个输出数据作为一个<code>tile</code>，映射回输入FeatureMap中，按照卷积的运算流程，实际需要的输入数据量为<code>ePack * IC * kernelX * kernelY</code> 。每个<code>tile</code>是独立的，分块后可以进行多线程并行计算。</p><p>下图是单个通道的输入和输出FeatureMap计算中数据依赖关系：</p><p><img src="/2021/11/22/AI-Algorithm-8-ConvTiledInMnn/3.png" alt="3"></p><p>为了获得完整对应到一个tile的输入数据，要对输入数据进行重排，这个在后面展开。</p><blockquote><p>对于跨两行的<code>tile</code>，MNN将其分为两部分处理，比如示例中第一行最后一个<code>tile</code>分为(4 + 20)，这一部分处理没有使用指令集load和save，见<code>_AVX_MNNPackC4ForMatMul_A</code>()中else部分代码，这或许是一个可优化的点。</p></blockquote><h2 id="buffer分配">buffer分配</h2><p>有上图可知，要计算24个<code>C4 Pack</code>的输出数据，参与<code>MatMul + Add</code> 的输入数据量为<code>ePack * IC * kernelX * kernelY</code>。这一部分内存对每一个tile而言是可以复用，因此可以事先分配好。源码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">mTempBufferTranspose.<span class="built_in">buffer</span>().type = halide_type_of&lt;<span class="keyword">uint8_t</span>&gt;();</span><br><span class="line">mTempBufferTranspose.<span class="built_in">buffer</span>().dimensions = <span class="number">2</span>;</span><br><span class="line">mTempBufferTranspose.<span class="built_in">buffer</span>().dim[<span class="number">0</span>].extent = threadNumber;</span><br><span class="line">mTempBufferTranspose.<span class="built_in">buffer</span>().dim[<span class="number">1</span>].extent = <span class="built_in">UP_DIV</span>(L, lP) * lP * CONVOLUTION_TILED_NUMBER * bytes;</span><br><span class="line">TensorUtils::<span class="built_in">setLinearLayout</span>(&amp;mTempBufferTranspose);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">bool</span> success = <span class="built_in">backend</span>()-&gt;<span class="built_in">onAcquireBuffer</span>(&amp;mTempBufferTranspose, Backend::DYNAMIC);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> gemmBuffer = mTempBufferTranspose.host&lt;<span class="keyword">uint8_t</span>&gt;() + mTempBufferTranspose.<span class="built_in">stride</span>(<span class="number">0</span>) * tId;</span><br></pre></td></tr></table></figure><p>以约定尺寸为例，对于单线程，数据元素长度为1（uint8）的情况，<code>gemmBuffer</code>的尺寸为<code>1 x (15 x 8 x 24) x 4</code> Bytes。其中1代表线程数，24代表一个<code>tile</code>的大小，4代表<code>C4 Pack</code>，15代表卷积核尺寸<code>3 x 5</code>，8代表输入通道数，<code>15 x 8</code>个数值需要累加到一起作为单个卷积核的卷积输出。</p><p>另外一个临时buffer <code>tempPtr</code>用来保存15个权重坐标的位置指针及一些位置参数，方便后面重排时加载数据。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> tempPtr = bufferAlloc-&gt;<span class="built_in">alloc</span>(kernelSize * maxLine * threadNumber * (<span class="number">4</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int32_t</span>) + <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>*)));</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> srcPtr = (<span class="keyword">float</span> <span class="keyword">const</span>**)((<span class="keyword">uint8_t</span>*)tempPtr.first + tempPtr.second + tId * kernelSize * maxLine * (<span class="number">4</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int32_t</span>) + <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>*)));</span><br><span class="line"><span class="keyword">auto</span> el = (<span class="keyword">int32_t</span>*)(srcPtr + kernelSize * maxLine);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (end &gt; sta) &#123;</span><br><span class="line">    <span class="keyword">auto</span> lOffset = lKYOffset + (kx * ic);</span><br><span class="line">    <span class="keyword">auto</span> srcKx = srcKy + ((oxBegin + sta) * strideX + dilateX * kx - padX) * bytes * unit;</span><br><span class="line">    srcPtr[number] = (<span class="keyword">const</span> <span class="keyword">float</span>*)srcKx;</span><br><span class="line">    el[<span class="number">4</span> * number + <span class="number">0</span>] = end - sta;</span><br><span class="line">    el[<span class="number">4</span> * number + <span class="number">1</span>] = ic;</span><br><span class="line">    el[<span class="number">4</span> * number + <span class="number">2</span>] = eStart + sta;</span><br><span class="line">    el[<span class="number">4</span> * number + <span class="number">3</span>] = lOffset;</span><br><span class="line">    number++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入重排">输入重排</h2><p>将单个tile的输入重排后存入gemmBuffer中，供后续MatMul使用。重排实现代码详见<code>_AVX_MNNPackC4ForMatMul_A</code>。这部分的原理与<a href="https://no5-aaron-wu.github.io/2021/11/16/AI-Algorithm-5-WinogradInMnn/">Winograd</a>和<a href="https://no5-aaron-wu.github.io/2021/11/18/AI-Algorithm-7-StrassenInMnn/">Strassen</a>中使用的输入变换是一样的。这里不再展开。重排后数据内存排布如下图：</p><p><img src="/2021/11/22/AI-Algorithm-8-ConvTiledInMnn/4.png" alt="4"></p><h2 id="MatMul-Add">MatMul+Add</h2><p>权重和输入根据上面重排后，乘加运算只需按行做MatMul，最后逐行累加即可。示意图如下：</p><p><img src="/2021/11/22/AI-Algorithm-8-ConvTiledInMnn/5.png" alt="5"></p><ul><li><ol><li>输入图中的每一行（一个通道的24个值）对应权重图中的一个<code>C4 Pack</code>，一行中的每个元素都跟<code>C4 pack</code>中的4个值相乘，得到24个<code>C4 Pack</code>。</li></ol></li><li><ol start="2"><li>8个通道，15个卷积权重全部循环完得到<code>15 x 8 x 24 (x 4)</code>的乘法输出；</li></ol></li><li><ol start="3"><li>所有行累加得到4个卷积核相对于1个输出<code>tile</code>的最终输出<code>24 (x 4)</code>;</li></ol></li><li><ol start="4"><li>外层再循环遍历完所有的卷积核，便可得到1个<code>tile</code>都卷积输出<code>4 x 24 (x 4)</code>。</li></ol></li></ul><p>实现代码详见<code>_AVX_MNNPackedMatMulFMA</code>以及<code>_AVX_MNNPackedMatMul_Main</code>，原理与<a href="https://no5-aaron-wu.github.io/2021/11/16/AI-Algorithm-5-WinogradInMnn/">Winograd</a>和<a href="https://no5-aaron-wu.github.io/2021/11/18/AI-Algorithm-7-StrassenInMnn/">Strassen</a>中的乘加操作一样。不再展开。</p><h2 id="后处理">后处理</h2><p><code>AVX2GemmPostTreat</code>原理与<a href="https://no5-aaron-wu.github.io/2021/11/16/AI-Algorithm-5-WinogradInMnn/">Winograd</a>和<a href="https://no5-aaron-wu.github.io/2021/11/18/AI-Algorithm-7-StrassenInMnn/">Strassen</a>中的后处理操作一样。不再展开。</p><h1>onExecute</h1><p>执行时调用onResize中的回调函数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ErrorCode <span class="title">ConvolutionTiledExecutorBasic::onExecute</span><span class="params">(<span class="keyword">const</span> std::vector&lt;Tensor*&gt;&amp; inputs,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                   <span class="keyword">const</span> std::vector&lt;Tensor*&gt;&amp; outputs)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">MNN_CONCURRENCY_BEGIN</span>(tId, mFunction.first) &#123;</span><br><span class="line">        mFunction.<span class="built_in">second</span>((<span class="keyword">int</span>)tId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MNN_CONCURRENCY_END</span>();</span><br><span class="line">    <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>致谢</h1><p>文章主体框架参考自<a href="https://github.com/yizhaoyanbo">东哥</a>的MNN源码解读的内部分享，加上了自己的一些看法。有幸被看到的话，希望能给点个赞~~</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> MNN </tag>
            
            <tag> convolution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [7]：MNN中的Strassen实现</title>
      <link href="/2021/11/18/AI-Algorithm-7-StrassenInMnn/"/>
      <url>/2021/11/18/AI-Algorithm-7-StrassenInMnn/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>主要针对CPU后端，基于<mnnrootdir>/source/backend/cpu/compute/Convolution1x1Strassen.cpp源码展开。</mnnrootdir></p><blockquote><p>以输入大小：<code>1 x 8 x 224 x 224</code>（<code>C4 Pack</code>为<code>1 x 2 x 224 x 224 (x 4)</code>），权重大小: <code>16 x 8 x 1 x 1</code>(MNN中将其变换为<code>1 x 4 x 8 (x 4)</code>，即对输出通道（卷积核个数）进行<code>C4 Pack</code>), 输出<code>1 x 16 x 224 x 224</code>（<code>C4 Pack</code>为<code>1 x 4 x 224 x 224 (x 4)</code>）为例进行辅助说明。</p><p>没有特殊说明，代码版本均为MNN release_1.2.3版本</p></blockquote><h1>适用条件</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> fastWay = common-&gt;<span class="built_in">kernelY</span>() == <span class="number">1</span> &amp;&amp; common-&gt;<span class="built_in">kernelX</span>() == <span class="number">1</span></span><br><span class="line">        &amp;&amp; output-&gt;<span class="built_in">width</span>() == input-&gt;<span class="built_in">width</span>() &amp;&amp; output-&gt;<span class="built_in">height</span>() == input-&gt;<span class="built_in">height</span>()</span><br><span class="line">        &amp;&amp; common-&gt;<span class="built_in">strideX</span>() == <span class="number">1</span> &amp;&amp; common-&gt;<span class="built_in">strideY</span>() == <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (fastWay) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Convolution1x1Strassen</span>(common, backend, originWeight, originWeightSize, bias, biasSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见只针对<code>kernelX = kernelY = strideX = strideY = 1</code>的卷积操作。</p><h1>权重重排</h1><p>初始权重为<code>NCHW</code>排布：<code>16 x 8 x 1 x1</code>，按<code>NC/4HW4</code>重排后为 <code>1x 4 x 8 (x 4)</code>。即针对卷积核个数进行<code>C4 Pack</code>，示意图如下：</p><p><img src="/2021/11/18/AI-Algorithm-7-StrassenInMnn/1.png" alt="1"></p><p>执行代码段如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">core-&gt;<span class="built_in">MNNPackForMatMul_B</span>(mResource-&gt;mWeight-&gt;host&lt;<span class="keyword">float</span>&gt;(), originWeight, outputCount, mSrcCount, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h1>onResize</h1><p>Strassen的所有步骤实现不在<code>onExecute</code>里，<code>onExecute</code>中只通过<code>mFunctions</code>中的函数指针调用<code>onResize</code>中的实现（将计算步骤拆解成若干个lambda函数，放到<code>mFunctions</code>中）。</p><p>MNN多线程加速在这里有不同的选择，当featureMap尺寸很大时，根据featureMap进行划分，每个线程处理一块，否则根据输出通道划分，每个线程处理一个（<code>C4</code>）通道：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (matrixSizeE &gt; CONVOLUTION_TILED_NUMBER * <span class="number">8</span> * numberThread &amp;&amp; matrixSizeE &gt; ocC4) &#123;</span><br><span class="line">    <span class="comment">// Divide in plane, in this case the divide equal numberThread</span></span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Divide in ocC4</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时按照单线程进行说明。创建<code>StrassenMatMulComputer</code>类对象，通过<code>onEncode</code>接口进入<code>StrassenMatMulComputer</code>实现类：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">unit.mStracssenComputor.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">StrassenMatrixComputor</span>(<span class="built_in">backend</span>(), <span class="literal">false</span>, maxDepth));</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> code = unit.mStracssenComputor-&gt;<span class="built_in">onEncode</span>(mTempInputVector, mTempOutputVector, postParameters, ic, oc);</span><br></pre></td></tr></table></figure><p>注意这里<code>StrassenMatMulComputer</code>类构造函数的第二个参数为false，即<code>mSupportMultiThread=false</code>，表示再往下的操作不会再进行线程划分，因为上面已经做过了。</p><p><code>onEncode</code>会调用<code>_generateMatMul</code>，其中包含Strassen分块的主要实现。</p><h2 id="generateMatMul">_generateMatMul</h2><p>Strassen算法本身包含矩阵分块的递归计算，因此<code>_generateMatMul</code>是个递归函数。</p><p>那么先看递归的终止条件，即何时结束分块操作，进行普通的卷积运算。终止条件有两个：</p><ul><li><ol><li>嵌套深度超过设定的最大深度时，或者<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>矩阵不能再继续分块时：</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (currentDepth &gt;= mMaxDepth || eSub == <span class="number">0</span> || hSub == <span class="number">0</span> || l % (<span class="number">2</span> * core-&gt;pack) != <span class="number">0</span> || l % (<span class="number">2</span> * lP) || l % (<span class="number">2</span> * packHUnit) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _generateBasicMatMul(e, l, h, AT, BT, CT, COT, postParameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>读写内存的次数大于普通卷积实现时：</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (saveCost &lt;= <span class="number">0.0f</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _generateBasicMatMul(e, l, h, AT, BT, CT, COT, postParameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归部分代码的运算顺序和内存buffer使用情况与<a href="https://no5-aaron-wu.github.io/2021/11/18/AI-Algorithm-6-Strassen/">上一篇</a>介绍的改进版本Strassen算法是一致的，通过将分块操作分解成若干个lambda函数，压入<code>mFunctions</code>向量，在onExecute时执行。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Strassen Construct</span></span><br><span class="line"><span class="keyword">auto</span> bn = <span class="built_in">backend</span>();</span><br><span class="line"><span class="keyword">auto</span> allocator = <span class="keyword">static_cast</span>&lt;CPUBackend*&gt;(<span class="built_in">backend</span>())-&gt;<span class="built_in">getBufferAllocator</span>();</span><br><span class="line">currentDepth += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> maxlH = std::<span class="built_in">max</span>(lSub, hSub);</span><br><span class="line"><span class="function">AutoMemory <span class="title">YAddr</span><span class="params">(hSub * lSub * core-&gt;bytes, allocator)</span></span>;</span><br><span class="line"><span class="function">AutoMemory <span class="title">XAddr</span><span class="params">(maxlH * eSub * core-&gt;bytes, allocator)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == XAddr.<span class="built_in">get</span>().first || <span class="literal">nullptr</span> == YAddr.<span class="built_in">get</span>().first) &#123;</span><br><span class="line">    <span class="keyword">return</span> OUT_OF_MEMORY;</span><br><span class="line">&#125;</span><br><span class="line">MatrixInfo Y;</span><br><span class="line">Y.stackIndex = (<span class="keyword">int</span>)mStack.<span class="built_in">size</span>();</span><br><span class="line">mStack.<span class="built_in">emplace_back</span>((<span class="keyword">uint8_t</span>*)YAddr.<span class="built_in">get</span>().first + YAddr.<span class="built_in">get</span>().second);</span><br><span class="line">Y.offsetBytes = <span class="number">0</span>;</span><br><span class="line">Y.lineStrideBytes = lSub * core-&gt;bytes * hP;</span><br><span class="line">MatrixInfo X;</span><br><span class="line">X.stackIndex = (<span class="keyword">int</span>)mStack.<span class="built_in">size</span>();</span><br><span class="line">X.offsetBytes = <span class="number">0</span>;</span><br><span class="line">X.lineStrideBytes = eSub * core-&gt;bytes * core-&gt;pack;</span><br><span class="line">mStack.<span class="built_in">emplace_back</span>((<span class="keyword">uint8_t</span>*)XAddr.<span class="built_in">get</span>().first + XAddr.<span class="built_in">get</span>().second);</span><br><span class="line"></span><br><span class="line">MatrixInfo CX;</span><br><span class="line">CX.stackIndex = X.stackIndex;</span><br><span class="line">CX.offsetBytes = <span class="number">0</span>;</span><br><span class="line">CX.lineStrideBytes = eSub * core-&gt;bytes * core-&gt;pack;</span><br><span class="line"></span><br><span class="line">MatrixInfo a11 = AT;</span><br><span class="line">MatrixInfo a12 = AT;</span><br><span class="line">a12.offsetBytes = AT.offsetBytes + AT.lineStrideBytes * lSubUnit;</span><br><span class="line">MatrixInfo a21 = AT;</span><br><span class="line">a21.offsetBytes = AT.offsetBytes + eSub * core-&gt;pack * core-&gt;bytes;</span><br><span class="line">MatrixInfo a22 = AT;</span><br><span class="line">a22.offsetBytes = AT.offsetBytes + eSub * core-&gt;pack * core-&gt;bytes + AT.lineStrideBytes * lSubUnit;</span><br><span class="line"></span><br><span class="line">MatrixInfo b11 = BT;</span><br><span class="line">MatrixInfo b12 = BT;</span><br><span class="line">b12.offsetBytes = BT.offsetBytes + BT.lineStrideBytes * (hSub / hP);</span><br><span class="line">MatrixInfo b21 = BT;</span><br><span class="line">b21.offsetBytes = BT.offsetBytes + lSub * hP * core-&gt;bytes;</span><br><span class="line">MatrixInfo b22 = BT;</span><br><span class="line">b22.offsetBytes = BT.offsetBytes + BT.lineStrideBytes * (hSub / hP) + lSub * hP * core-&gt;bytes;</span><br><span class="line"></span><br><span class="line">MatrixInfo c11 = CT;</span><br><span class="line">MatrixInfo c12 = CT;</span><br><span class="line">c12.offsetBytes = CT.offsetBytes + CT.lineStrideBytes * (hSub / core-&gt;pack);</span><br><span class="line">MatrixInfo c21 = CT;</span><br><span class="line">c21.offsetBytes = CT.offsetBytes + eSub * core-&gt;pack * core-&gt;bytes;</span><br><span class="line">MatrixInfo c22 = CT;</span><br><span class="line">c22.offsetBytes = CT.offsetBytes + eSub * core-&gt;pack * core-&gt;bytes + CT.lineStrideBytes * (hSub / core-&gt;pack);</span><br><span class="line"></span><br><span class="line">MatrixInfo Empty;</span><br><span class="line">Empty.stackIndex = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// S3=A11-A21, T3=B22-B12, P7=S3*T3</span></span><br><span class="line">    <span class="keyword">auto</span> f = [a11, a21, b22, b12, X, Y, eSub, lSub, hSub, numberThread, core, hP, <span class="keyword">this</span>, bWidth, aHeight, bHeight](<span class="keyword">int</span> tId) &#123;</span><br><span class="line">        <span class="keyword">auto</span> xAddr = mStack[X.stackIndex] + X.offsetBytes;</span><br><span class="line">        <span class="keyword">auto</span> yAddr = mStack[Y.stackIndex] + Y.offsetBytes;</span><br><span class="line">        <span class="keyword">auto</span> a11Ptr = mStack[a11.stackIndex] + a11.offsetBytes;</span><br><span class="line">        <span class="keyword">auto</span> a21Ptr = mStack[a21.stackIndex] + a21.offsetBytes;</span><br><span class="line">        <span class="built_in">MNNMATRIX_SUB_MULTITHREAD</span>(xAddr, a11Ptr, a21Ptr, eSub, X.lineStrideBytes, a11.lineStrideBytes, a21.lineStrideBytes, aHeight, core);</span><br><span class="line">        <span class="built_in">MNNMATRIX_SUB_MULTITHREAD</span>(yAddr, mStack[b22.stackIndex] + b22.offsetBytes, mStack[b12.stackIndex] + b12.offsetBytes, bWidth, Y.lineStrideBytes, b22.lineStrideBytes, b12.lineStrideBytes, bHeight, core);</span><br><span class="line">    &#125;;</span><br><span class="line">    mFunctions.<span class="built_in">emplace_back</span>(std::<span class="built_in">make_pair</span>(f, numberThread));</span><br><span class="line">    <span class="keyword">auto</span> code = _generateMatMul(eSub, lSub, hSub, X, Y, c21, Empty, currentDepth, &#123;&#125;);</span><br><span class="line">    <span class="keyword">if</span> (code != NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// S1=A21+A22, T1=B12-B11, P5=S1T1</span></span><br><span class="line">    <span class="keyword">auto</span> f = [a22, a21, b11, b12, X, Y, eSub, lSub, hSub, numberThread, hP, core, <span class="keyword">this</span>, bWidth, aHeight, bHeight](<span class="keyword">int</span> tId) &#123;</span><br><span class="line">        <span class="built_in">MNNMATRIX_ADD_MULTITHREAD</span>(mStack[X.stackIndex] + X.offsetBytes, mStack[a21.stackIndex] + a21.offsetBytes, mStack[a22.stackIndex] + a22.offsetBytes , eSub, X.lineStrideBytes, a21.lineStrideBytes, a22.lineStrideBytes, aHeight, core);</span><br><span class="line">        <span class="built_in">MNNMATRIX_SUB_MULTITHREAD</span>(mStack[Y.stackIndex] + Y.offsetBytes, mStack[b12.stackIndex] + b12.offsetBytes, mStack[b11.stackIndex] + b11.offsetBytes, bWidth, Y.lineStrideBytes, b12.lineStrideBytes, b11.lineStrideBytes, bHeight, core);</span><br><span class="line">    &#125;;</span><br><span class="line">    mFunctions.<span class="built_in">emplace_back</span>(std::<span class="built_in">make_pair</span>(f, numberThread));</span><br><span class="line">    <span class="keyword">auto</span> code = _generateMatMul(eSub, lSub, hSub, X, Y, c22, Empty, currentDepth, &#123;&#125;);</span><br><span class="line">    <span class="keyword">if</span> (code != NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// S2=S1-A11, T2=B22-T1, P6=S2T2</span></span><br><span class="line">    <span class="keyword">auto</span> f = [a11, b22, X, Y, eSub, lSub, hSub, numberThread, hP, core, <span class="keyword">this</span>, bWidth, aHeight, bHeight](<span class="keyword">int</span> tId) &#123;</span><br><span class="line">        <span class="keyword">auto</span> xAddr = mStack[X.stackIndex] + X.offsetBytes;</span><br><span class="line">        <span class="keyword">auto</span> yAddr = mStack[Y.stackIndex] + Y.offsetBytes;</span><br><span class="line">        <span class="built_in">MNNMATRIX_SUB_MULTITHREAD</span>(xAddr, xAddr, mStack[a11.stackIndex] + a11.offsetBytes, eSub, X.lineStrideBytes, X.lineStrideBytes, a11.lineStrideBytes, aHeight, core);</span><br><span class="line">        <span class="built_in">MNNMATRIX_SUB_MULTITHREAD</span>(yAddr, mStack[b22.stackIndex] + b22.offsetBytes, yAddr, bWidth, Y.lineStrideBytes, b22.lineStrideBytes, Y.lineStrideBytes, bHeight, core);</span><br><span class="line">    &#125;;</span><br><span class="line">    mFunctions.<span class="built_in">emplace_back</span>(std::<span class="built_in">make_pair</span>(f, numberThread));</span><br><span class="line">    <span class="keyword">auto</span> code = _generateMatMul(eSub, lSub, hSub, X, Y, c12, Empty, currentDepth, &#123;&#125;);</span><br><span class="line">    <span class="keyword">if</span> (code != NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// S4=A12-S2, P3=S4*B22, P1=A11*B11</span></span><br><span class="line">    <span class="keyword">auto</span> f = [a12, X, eSub, aHeight, numberThread, core, <span class="keyword">this</span>](<span class="keyword">int</span> tId) &#123;</span><br><span class="line">        <span class="keyword">auto</span> xAddr = mStack[X.stackIndex] + X.offsetBytes;</span><br><span class="line">        <span class="built_in">MNNMATRIX_SUB_MULTITHREAD</span>(xAddr, mStack[a12.stackIndex] + a12.offsetBytes, xAddr, eSub, X.lineStrideBytes, a12.lineStrideBytes, X.lineStrideBytes, aHeight, core);</span><br><span class="line">    &#125;;</span><br><span class="line">    mFunctions.<span class="built_in">emplace_back</span>(std::<span class="built_in">make_pair</span>(f, numberThread));</span><br><span class="line">    <span class="keyword">auto</span> code = _generateMatMul(eSub, lSub, hSub, X, b22, c11, Empty, currentDepth, &#123;&#125;);</span><br><span class="line">    <span class="keyword">if</span> (code != NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    code = _generateMatMul(eSub, lSub, hSub, a11, b11, CX, Empty, currentDepth, &#123;&#125;);</span><br><span class="line">    <span class="keyword">if</span> (code != NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// U2=P1+P6, U3=U2+P7, U4=U2+P5, U7=U3+P5</span></span><br><span class="line">    <span class="comment">// U5=U4+P3, T4=T2-B21, P4=A22*T4</span></span><br><span class="line">    <span class="keyword">auto</span> f = [c11, c12, c21, c22, b21, X, Y, eSub, bWidth, cHeight, bHeight, numberThread, core, <span class="keyword">this</span>](<span class="keyword">int</span> tId) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = tId; y &lt; cHeight; y+=numberThread) &#123;</span><br><span class="line">            core-&gt;<span class="built_in">MNNStrassenMergeCFunction</span>((<span class="keyword">float</span>*)(mStack[c11.stackIndex] + c11.offsetBytes + y * c11.lineStrideBytes), (<span class="keyword">float</span>*)(mStack[c12.stackIndex] + c12.offsetBytes + y * c12.lineStrideBytes), (<span class="keyword">float</span>*)(mStack[c21.stackIndex] + c21.offsetBytes + y * c21.lineStrideBytes), (<span class="keyword">float</span>*)(mStack[c22.stackIndex] + c22.offsetBytes + y * c22.lineStrideBytes), (<span class="keyword">float</span>*)(mStack[X.stackIndex] + X.offsetBytes + y * X.lineStrideBytes), <span class="number">0</span>, eSub, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> yAddr = mStack[Y.stackIndex] + Y.offsetBytes;</span><br><span class="line">        <span class="built_in">MNNMATRIX_SUB_MULTITHREAD</span>(yAddr, yAddr, mStack[b21.stackIndex] + b21.offsetBytes, bWidth, Y.lineStrideBytes, Y.lineStrideBytes, b21.lineStrideBytes, bHeight, core);</span><br><span class="line">    &#125;;</span><br><span class="line">    mFunctions.<span class="built_in">emplace_back</span>(std::<span class="built_in">make_pair</span>(f, numberThread));</span><br><span class="line">    <span class="keyword">auto</span> code = _generateMatMul(eSub, lSub, hSub, a22, Y, c11, Empty, currentDepth, &#123;&#125;);</span><br><span class="line">    <span class="keyword">if</span> (code != NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// U6=U3-P4, P2=A12*B21, U1=P1+P2</span></span><br><span class="line">    <span class="keyword">auto</span> f0 = [c11, c21, eSub, cHeight, numberThread, core, <span class="keyword">this</span>](<span class="keyword">int</span> tId) &#123;</span><br><span class="line">        <span class="keyword">auto</span> cw = eSub;</span><br><span class="line">        <span class="keyword">auto</span> c21Addr = mStack[c21.stackIndex] + c21.offsetBytes;</span><br><span class="line">        <span class="built_in">MNNMATRIX_SUB_MULTITHREAD</span>(c21Addr, c21Addr, mStack[c11.stackIndex] + c11.offsetBytes, cw, c21.lineStrideBytes, c21.lineStrideBytes, c11.lineStrideBytes, cHeight, core);</span><br><span class="line">    &#125;;</span><br><span class="line">    mFunctions.<span class="built_in">emplace_back</span>(std::<span class="built_in">make_pair</span>(f0, numberThread));</span><br><span class="line">    <span class="keyword">auto</span> code = _generateMatMul(eSub, lSub, hSub, a12, b21, c11, Empty, currentDepth, &#123;&#125;);</span><br><span class="line">    <span class="keyword">if</span> (code != NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> f1 = [c11, X, eSub, cHeight, numberThread, core, <span class="keyword">this</span>](<span class="keyword">int</span> tId) &#123;</span><br><span class="line">        <span class="keyword">auto</span> cw = eSub;</span><br><span class="line">        <span class="keyword">auto</span> c11Ptr = mStack[c11.stackIndex] + c11.offsetBytes;</span><br><span class="line">        <span class="keyword">auto</span> xAddr = mStack[X.stackIndex] + X.offsetBytes;</span><br><span class="line">        <span class="built_in">MNNMATRIX_ADD_MULTITHREAD</span>(c11Ptr, c11Ptr, xAddr, cw, c11.lineStrideBytes, c11.lineStrideBytes, X.lineStrideBytes, cHeight, core);</span><br><span class="line">    &#125;;</span><br><span class="line">    mFunctions.<span class="built_in">emplace_back</span>(std::<span class="built_in">make_pair</span>(f1, numberThread));</span><br><span class="line">... <span class="comment">// post </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面着重看下<code>1 x 1</code>卷积的矩阵乘法和分块逻辑：</p><h3 id="普通的1-×-1卷积的矩阵乘法（C-AB）：">普通的<code>1 × 1</code>卷积的矩阵乘法（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">C=AB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>）：</h3><p><img src="/2021/11/18/AI-Algorithm-7-StrassenInMnn/2.png" alt="2"></p><p><em>蓝色虚线框代表一次卷积乘加运算</em></p><h3 id="MNNC4-Pack的1-×-1卷积的矩阵乘法：">MNN<code>C4 Pack</code>的<code>1 × 1</code>卷积的矩阵乘法：</h3><p><img src="/2021/11/18/AI-Algorithm-7-StrassenInMnn/3.png" alt="3"></p><ul><li><p>上图中每个方块代表一个<code>C4 Pack</code>，输入按输入通道pack，卷积核按卷积核个数pack，输出按输出通道pack;</p></li><li><p>输入<code>2 x 224 x 224 (x 4)</code>可以看作普通矩阵乘法中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>的转置（<code>2 x 50176 (x 4)</code>），卷积核<code>4 x 8 (x4)</code>可以看作普通矩阵乘法中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>的转置，输出<code>4 x 224 x 224 (x 4)</code>可以看作普通矩阵乘法中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>的转置（<code>4 x 50176 (x 4)</code>）。</p></li><li><p>如果当前矩阵不再进行分块，则一次卷积乘加运算对应为红色虚线框中的元素，直观可以理解为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>C</mi><mi>T</mi></msup><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mo>=</mo><msup><mi>B</mi><mi>T</mi></msup><msup><mi>A</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">C^T=(AB)^T=B^TA^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，实际的MNN执行中，会先对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>矩阵进行重排（<code>MNNPackC4ForMatMul_A</code>），具体下文再谈。</p></li></ul><h3 id="Strassen矩阵分块：">Strassen矩阵分块：</h3><p><img src="/2021/11/18/AI-Algorithm-7-StrassenInMnn/4.png" alt="4"></p><p>在转置形式下进行分块运算，各子块的矩阵乘法递归调用<code>_generateMatMul</code>直到满足递归终止条件后，切换到普通矩阵乘法。</p><h2 id="generateBasicMatMul">_generateBasicMatMul</h2><p><code>_generateBasicMatMul</code>函数中会调用<code>_generateTrivalMatMul</code>执行普通<code>1 x 1</code>卷积操作，核心代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">mFunctions.<span class="built_in">emplace_back</span>(</span><br><span class="line">    std::<span class="built_in">make_pair</span>([cStride, l, h, xCount, AT, BT, CT, COT, tileHostOrigin, unitNumber, bExtraStride, numberThread, eReal, eP, active, <span class="keyword">this</span>](<span class="keyword">int</span> tId) &#123;</span><br><span class="line">        <span class="keyword">auto</span> core = <span class="keyword">static_cast</span>&lt;CPUBackend*&gt;(<span class="built_in">backend</span>())-&gt;<span class="built_in">functions</span>();</span><br><span class="line">        <span class="keyword">size_t</span> parameters[<span class="number">6</span>];</span><br><span class="line">        parameters[<span class="number">0</span>] = xCount * core-&gt;bytes;</span><br><span class="line">        parameters[<span class="number">1</span>] = l;</span><br><span class="line">        parameters[<span class="number">2</span>] = h;</span><br><span class="line">        parameters[<span class="number">3</span>] = cStride;</span><br><span class="line">        parameters[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">        parameters[<span class="number">5</span>] = bExtraStride;</span><br><span class="line">        <span class="keyword">auto</span> tileHost = tileHostOrigin + eP * parameters[<span class="number">1</span>] * tId * core-&gt;bytes;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">float</span>* postParametersPtr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (!active.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            postParametersPtr = active.<span class="built_in">data</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> aHost = mStack[AT.stackIndex] + AT.offsetBytes;</span><br><span class="line">        <span class="keyword">auto</span> bHost = mStack[BT.stackIndex] + BT.offsetBytes;</span><br><span class="line">        <span class="keyword">auto</span> cHost = mStack[CT.stackIndex] + CT.offsetBytes;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">uint8_t</span>* biasPtr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">-1</span> != COT.stackIndex) &#123;</span><br><span class="line">            biasPtr = mStack[COT.stackIndex] + COT.offsetBytes;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> packUnit = core-&gt;bytes * core-&gt;pack;</span><br><span class="line">        <span class="keyword">int32_t</span> info[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int32_t</span> stride[<span class="number">4</span>];</span><br><span class="line">        stride[<span class="number">0</span>] = eP;</span><br><span class="line">        stride[<span class="number">1</span>] = parameters[<span class="number">1</span>];</span><br><span class="line">        stride[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        stride[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        info[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        info[<span class="number">1</span>] = eReal;</span><br><span class="line">        info[<span class="number">2</span>] = eP;</span><br><span class="line">        info[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = tId; i &lt; unitNumber; i+=numberThread) &#123;</span><br><span class="line">            <span class="keyword">int</span> xStart    = i * eP;</span><br><span class="line">            <span class="keyword">auto</span> aStart   = aHost + xStart * packUnit;</span><br><span class="line">            core-&gt;<span class="built_in">MNNPackC4ForMatMul_A</span>((<span class="keyword">float</span>*)(tileHost), (<span class="keyword">const</span> <span class="keyword">float</span>**)(&amp;aStart), info, stride);</span><br><span class="line">            core-&gt;<span class="built_in">MNNPackedMatMul</span>((<span class="keyword">float</span>*)(cHost + xStart * packUnit), (<span class="keyword">float</span>*)tileHost, (<span class="keyword">float</span>*)bHost, parameters, postParametersPtr, (<span class="keyword">const</span> <span class="keyword">float</span>*)biasPtr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tId != numberThread <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (xCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            stride[<span class="number">0</span>] = xCount;</span><br><span class="line">            stride[<span class="number">1</span>] = parameters[<span class="number">1</span>];</span><br><span class="line">            info[<span class="number">2</span>] = xCount;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> xStart    = unitNumber * eP;</span><br><span class="line">            <span class="keyword">auto</span> aStart   = aHost + xStart * packUnit;</span><br><span class="line">            <span class="comment">// Copy</span></span><br><span class="line">            core-&gt;<span class="built_in">MNNPackC4ForMatMul_A</span>((<span class="keyword">float</span>*)(tileHost), (<span class="keyword">const</span> <span class="keyword">float</span>**)(&amp;aStart), info, stride);</span><br><span class="line">            core-&gt;<span class="built_in">MNNPackedMatMulRemain</span>((<span class="keyword">float</span>*)(cHost + xStart * packUnit), (<span class="keyword">float</span>*)tileHost, (<span class="keyword">float</span>*)bHost, xCount, parameters, postParametersPtr, (<span class="keyword">const</span> <span class="keyword">float</span>*)biasPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, numberThread));</span><br></pre></td></tr></table></figure><p>其中<code>unitNumber</code>为当前线程需要处理多少个<code>unit</code>，假设<code>eP = 24</code>，代表每个<code>unit</code>处理24个<code>C4 Pack</code>，假设<code>numberThread=4</code>，则<code>unitNumber = (224 x 224) / 4 / eP = 522</code>。即一个线程循环中对522个<code>unit</code>进行处理，不能整除的部分单独处理即可。</p><blockquote><p>但是由于之前提到的<code>mSupportMultiThread=false</code>，<code>numberThread</code>实际上是恒为1。并不会在这一层级进行多线程划分。</p></blockquote><p>对于单个unit的乘加操作，主要在于<code>MNNPackC4ForMatMul_A</code>和<code>MNNPackedMatMul</code>两个函数调用，如果看过<a href="https://no5-aaron-wu.github.io/2021/11/16/AI-Algorithm-5-WinogradInMnn/">这篇文章</a>的话，其实这里跟<code>Winograd</code>的单个<code>tile</code>的乘加操作其实是复用相同的函数。可以跳转去看，这里不再贴上代码。</p><h3 id="MNNPackC4ForMatMul-A函数重排A矩阵"><code>MNNPackC4ForMatMul_A</code>函数重排<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>矩阵</h3><p><img src="/2021/11/18/AI-Algorithm-7-StrassenInMnn/5.png" alt="5"></p><p>将单个C4通道的24个<code>C4 Pack</code>数据执行通道分离，属于同一个输入通道的24个值排在一起。两个C4通道（8个输入通道）处理完的示意图如下（<code>24 x 8</code>）：</p><p><img src="/2021/11/18/AI-Algorithm-7-StrassenInMnn/6.png" alt="6"></p><h3 id="MNNPackedMatMul-矩阵乘加">MNNPackedMatMul 矩阵乘加</h3><p>为了解释起来更简单，从上面权重图中<strong>拿1个<code>8 x C4 Pack</code>（即：4个卷积核）来</strong>，至于所有的4个<code>8 x C4 Pack</code>（即：16个卷积核）卷积核循环4次处理即可。取出来的<code>Mul+Add</code>运算图如下：</p><p><img src="/2021/11/18/AI-Algorithm-7-StrassenInMnn/7.png" alt="7"></p><p>上图中的计算流程归纳一下：</p><ul><li><ol><li><code>MUL</code>操作时，以上图中两个黑色框为计算单元。输入的黑色框中每次取一个值出来，与权重第一行黑色框中4个值依次相乘，并将结果pack到一起，直到24个值全部计算完成，输出一行<code>24 (x 4)</code>。</li></ol></li><li><ol start="2"><li>输入更新到下一个通道24个值，权重也下移一行，重复8次上述运算。得到<code>8 x 24 (x 4)</code>。</li></ol></li><li><ol start="3"><li>将8行数据对应位置累加(即：同一个卷积核的不同通道累加)，得到24个点一个<code>C4 Pack</code>的卷积结果：<code>24 (x 4)</code>。</li></ol></li><li><ol start="4"><li>卷积核有16个，即：4个<code>8 x C4 Pack</code>，循环4次，将所有卷积核处理完，得到24个点所有卷积核的卷积结果：<code>24 (x 4)</code></li></ol></li></ul><p>至此，就完成了一组<code>unit</code>的卷积操作，得到输出<code>4 x 24 (x 4)</code>。处理完所有的<code>unit</code>之后，就完成<code>1 x 1</code>的卷积操作。</p><h1>post后处理</h1><h2 id="普通卷积的后处理">普通卷积的后处理</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _AVX_MNNPackedMatMulFMA(<span class="keyword">float</span>* C, <span class="keyword">const</span> <span class="keyword">float</span>* A, <span class="keyword">const</span> <span class="keyword">float</span>* B, <span class="keyword">const</span> <span class="keyword">size_t</span>* parameter,</span><br><span class="line">                             <span class="keyword">const</span> <span class="keyword">float</span>* postParameters, <span class="keyword">const</span> <span class="keyword">float</span>* bias) &#123;</span><br><span class="line">    <span class="keyword">auto</span> h       = parameter[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">auto</span> cStride = parameter[<span class="number">3</span>] / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MNN_X86_USE_ASM</span></span><br><span class="line">    <span class="keyword">if</span> (postParameters == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        _AVX_MNNGemmFloatUnitMainFMA(C, A, B, parameter);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _AVX_MNNGemmFloatUnitMainFMA_Fused(C, A, B, parameter, postParameters, bias);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> hC4          = <span class="built_in">UP_DIV</span>(h, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">auto</span> hC8          = hC4 / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">auto</span> hR           = hC4 % <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (hR &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> zero = _mm_set1_ps(<span class="number">0.0f</span>);</span><br><span class="line">        <span class="comment">// Set Last H4 = 0</span></span><br><span class="line">        <span class="keyword">auto</span> dst = C + hC8 * cStride;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; MNN_UNIT_E; ++x) &#123;</span><br><span class="line">            _mm_storeu_ps(dst + <span class="number">8</span> * x + <span class="number">4</span>, zero);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    _AVX_MNNPackedMatMul_Main(C, A, B, parameter);</span><br><span class="line">    <span class="built_in">AVX2GemmPostTreat</span>(C, MNN_UNIT_E, parameter, postParameters, bias);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>MNNPackedMatMul</code>后，调用GemmPostTreat进行后处理。</p><h2 id="递归过程中的后处理">递归过程中的后处理</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!postParameters.<span class="built_in">empty</span>() &amp;&amp; COT.stackIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == numberThread) &#123;</span><br><span class="line">        <span class="keyword">auto</span> postFunction = [c11, COT, eSub, cHeight, numberThread, postParameters, core, <span class="keyword">this</span>](<span class="keyword">int</span> tId) &#123;</span><br><span class="line">            <span class="keyword">auto</span> biasPtr = (<span class="keyword">const</span> <span class="keyword">float</span>*)(mStack[COT.stackIndex] + COT.offsetBytes);</span><br><span class="line">            <span class="keyword">auto</span> width = eSub * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">auto</span> height = cHeight * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">auto</span> c11Ptr = mStack[c11.stackIndex] + c11.offsetBytes;</span><br><span class="line">            core-&gt;<span class="built_in">MNNAxByClampBroadcastUnit</span>((<span class="keyword">float</span>*)c11Ptr, (<span class="keyword">float</span>*)c11Ptr, biasPtr, width, c11.lineStrideBytes / core-&gt;bytes, c11.lineStrideBytes / core-&gt;bytes, height, postParameters.<span class="built_in">data</span>());</span><br><span class="line">        &#125;;</span><br><span class="line">        mFunctions.<span class="built_in">emplace_back</span>(std::<span class="built_in">make_pair</span>(postFunction, numberThread));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">auto</span> postFunction = [c11, COT, eSub, cHeight, numberThread, postParameters, core, <span class="keyword">this</span>](<span class="keyword">int</span> tId) &#123;</span><br><span class="line">            <span class="keyword">auto</span> width = eSub * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">auto</span> height = cHeight * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">auto</span> c11Ptr = mStack[c11.stackIndex] + c11.offsetBytes;</span><br><span class="line">            <span class="keyword">auto</span> biasPtr = mStack[COT.stackIndex] + COT.offsetBytes;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = tId; y &lt; height; y+=numberThread) &#123;</span><br><span class="line">                core-&gt;<span class="built_in">MNNAxByClampBroadcastUnit</span>((<span class="keyword">float</span>*)(c11Ptr + y * c11.lineStrideBytes), (<span class="keyword">float</span>*)(c11Ptr + y * c11.lineStrideBytes), (<span class="keyword">const</span> <span class="keyword">float</span>*)(biasPtr + y * core-&gt;bytes * core-&gt;pack), width, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, postParameters.<span class="built_in">data</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        mFunctions.<span class="built_in">emplace_back</span>(std::<span class="built_in">make_pair</span>(postFunction, numberThread));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于递归过程构建中子矩阵的乘法调用<code>_generateMatMul</code>时传入的<code>COT</code>和<code>postParameters</code>均为空，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> code = _generateMatMul(eSub, lSub, hSub, X, Y, c21, Empty, currentDepth, &#123;&#125;);</span><br></pre></td></tr></table></figure><p>故实际上，除了递归顶层外，其他递归层次（包括普通卷积层）均不会执行后处理操作。当然，如果普通卷积就是顶层（即没有递归过程），那后处理由普通卷积负责完成。</p><h1>onExecute</h1><p>通过<code>mFunctions</code>队列依次执行<code>onResize</code>中构建的Strassen递归操作。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StrassenMatrixComputor::onExecute</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span>* AT, <span class="keyword">const</span> <span class="keyword">uint8_t</span>* BT, <span class="keyword">const</span> <span class="keyword">uint8_t</span>* COT, <span class="keyword">uint8_t</span>* CT)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> != AT) &#123;</span><br><span class="line">        mStack[<span class="number">0</span>] = (<span class="keyword">uint8_t</span>*)AT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> != BT) &#123;</span><br><span class="line">        mStack[<span class="number">1</span>] = (<span class="keyword">uint8_t</span>*)BT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> != CT) &#123;</span><br><span class="line">        mStack[<span class="number">2</span>] = (<span class="keyword">uint8_t</span>*)CT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> != COT) &#123;</span><br><span class="line">        mStack[<span class="number">3</span>] = (<span class="keyword">uint8_t</span>*)COT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// All is done in onResize, just execute it</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; f : mFunctions) &#123;</span><br><span class="line">        <span class="built_in">MNN_CONCURRENCY_BEGIN</span>(tId, f.second) &#123;</span><br><span class="line">            f.<span class="built_in">first</span>(tId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">MNN_CONCURRENCY_END</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>困惑</h1><blockquote><p>实际上，在上述尺寸条件下，MNN并不会执行Strassen递归操作，而是直接执行普通卷积。因为Strassen虽然处理的数据规模越大，乘加计算上越有优势，但是在递归过程中访存操作比普通矩阵乘法要多的多，因此为了防止因为访存而引起可能的负优化，MNN每次递归都会对比两者的访存次数，选择访存次数更少的方法计算（即上面的终止条件2）。</p></blockquote><p>MNN源码中cost之差是这样算的：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> AComputeCost = <span class="number">4</span> * ((<span class="keyword">float</span>)eSub * lSub);</span><br><span class="line"><span class="keyword">float</span> BComputeCost = <span class="number">4</span> * (<span class="keyword">float</span>)lSub * bHSub * hP;</span><br><span class="line"><span class="keyword">float</span> CComputeCost = <span class="number">7</span> * (<span class="keyword">float</span>)eSub * hSub;</span><br><span class="line"><span class="keyword">float</span> saveMatMulCost = (e / eP) * (aUnit * eP * hSub / core-&gt;pack + lSubUnit * eP * aUnit + lSub * bHSub * hP);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> penalty = core-&gt;penalty;<span class="comment">//<span class="doctag">FIXME:</span> Find beter way to set it</span></span><br><span class="line"><span class="keyword">float</span> saveCost = saveMatMulCost - (AComputeCost + BComputeCost + CComputeCost) * penalty;</span><br><span class="line"><span class="keyword">if</span> (saveCost &lt;= <span class="number">0.0f</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _generateBasicMatMul(e, l, h, AT, BT, CT, COT, postParameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>化简一下其实为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>s</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>M</mi><mi>a</mi><mi>t</mi><mi>M</mi><mi>u</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mi>e</mi><mrow><mi>e</mi><mi>p</mi></mrow></mfrac><mo stretchy="false">(</mo><mfrac><mrow><mi>e</mi><mi>p</mi></mrow><mn>2</mn></mfrac><mo>∗</mo><mi>i</mi><mi>c</mi><mo>+</mo><mfrac><mrow><mi>e</mi><mi>p</mi></mrow><mn>2</mn></mfrac><mo>∗</mo><mi>o</mi><mi>c</mi><mo>+</mo><mfrac><mrow><mi>i</mi><mi>c</mi><mo>∗</mo><mi>o</mi><mi>c</mi></mrow><mn>4</mn></mfrac><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>A</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>e</mi><mo>∗</mo><mi>i</mi><mi>c</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>B</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>i</mi><mi>c</mi><mo>∗</mo><mi>o</mi><mi>c</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>C</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mn>7</mn><mo>∗</mo><mi>e</mi><mo>∗</mo><mi>o</mi><mi>c</mi></mrow><mn>4</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>s</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>s</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>M</mi><mi>a</mi><mi>t</mi><mi>M</mi><mi>u</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>−</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>+</mo><mi>B</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>+</mo><mi>C</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>p</mi><mi>e</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>t</mi><mi>y</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}saveMatMulCost&amp;=\frac{e}{ep}(\frac{ep}{2}*ic+\frac{ep}{2}*oc+\frac{ic*oc}{4}) \\AComputeCost&amp;=e*ic \\BComputeCost&amp;=ic*oc \\CComputeCost&amp;=\frac{7*e*oc}{4} \\saveCost&amp;=saveMatMulCost-\\&amp;(AComputeCost+BComputeCost+CComputeCost)*penalty \\\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.8244em;vertical-align:-5.1622em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.6622em;"><span style="top:-7.6622em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10903em;">tM</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.07153em;">lC</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span></span></span><span style="top:-5.6418em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span></span></span><span style="top:-4.1418em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span></span></span><span style="top:-2.1603em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">CC</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span></span></span><span style="top:-0.3343em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span></span></span><span style="top:1.1657em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.1622em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.6622em;"><span style="top:-7.6622em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">oc</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">oc</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span><span style="top:-5.6418em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span></span></span><span style="top:-4.1418em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">oc</span></span></span><span style="top:-2.1603em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">oc</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-0.3343em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10903em;">tM</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.07153em;">lC</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mord">−</span></span></span><span style="top:1.1657em;"><span class="pstrut" style="height:3.3365em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">CC</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mord mathnormal">na</span><span class="mord mathnormal">lt</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.1622em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>但是不是对于其具体含义还是很困惑，已在github上提了<a href="https://github.com/alibaba/MNN/issues/1760">issue</a>，等大佬回复。</p><p>按照上述cost计算方法，在固定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>=</mo><mn>64</mn><mo>×</mo><mn>64</mn><mo separator="true">,</mo><mi>e</mi><mi>p</mi><mo>=</mo><mn>24</mn><mo separator="true">,</mo><mi>p</mi><mi>e</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>t</mi><mi>y</mi><mo>=</mo><mn>1.5</mn></mrow><annotation encoding="application/x-tex">e=64×64, ep=24,penalty=1.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">64</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">64</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">24</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mord mathnormal">na</span><span class="mord mathnormal">lt</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.5</span></span></span></span>的情况下，遍历<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>c</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>512</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>o</mi><mi>c</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>512</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ic\in[2,512],oc\in[2,512]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">512</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">oc</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">512</span><span class="mclose">]</span></span></span></span>，实测下来会用到Strassen的都是ic和oc大于256的情况。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestStrassenCost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> e = <span class="number">64</span> * <span class="number">64</span>, ep = <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">float</span> penalty = <span class="number">1.5</span>;</span><br><span class="line">    <span class="function">std::ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;strassen_cost.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ic = <span class="number">2</span>; ic &lt;= <span class="number">512</span>; ic += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> oc = <span class="number">2</span>; oc &lt;= <span class="number">512</span>; oc += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> origin_cost = e / ep * (ep / <span class="number">2</span> * oc + ep / <span class="number">2</span> * ic + ic * oc / <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">int</span> strassen_cost = e * ic + ic * oc + (<span class="number">7</span> * e * oc) / <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span> (origin_cost - strassen_cost * penalty &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                fout &lt;&lt; <span class="string">&quot;use strassen, ic:&quot;</span> &lt;&lt; ic &lt;&lt; <span class="string">&quot;, oc: &quot;</span> &lt;&lt; oc &lt;&lt; <span class="string">&quot;, rate: &quot;</span> &lt;&lt; origin_cost / (strassen_cost * penalty) &lt;&lt; std::endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>致谢</h1><p>文章主体框架参考自<a href="https://github.com/yizhaoyanbo">东哥</a>的MNN源码解读的内部分享，加上了自己的一些看法。有幸被看到的话，希望能给点个赞~~</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> MNN </tag>
            
            <tag> Strassen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [6]：Strassen算法原理</title>
      <link href="/2021/11/18/AI-Algorithm-6-Strassen/"/>
      <url>/2021/11/18/AI-Algorithm-6-Strassen/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>Strassen最早于1968年由Volker Srassen发表于论文《<a href="http://bioinfo.ict.ac.cn/~dbu/AlgorithmCourses/Lectures/Lec5-Matrix-Multiplication-Strassen1969.pdf">Gaussian Elimination is not Optimal</a>》，将矩阵乘法的算法复杂度首次从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mn>8</mn><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">O(n^3),where\space log_2(8)=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">h</span><span class="mord mathnormal">ere</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>降低到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant="normal">.</mi><mn>807</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mn>7</mn><mo stretchy="false">)</mo><mo>≈</mo><mn>2.807</mn></mrow><annotation encoding="application/x-tex">O(n^2.807),where\space log_2(7)≈2.807</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">.807</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">h</span><span class="mord mathnormal">ere</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">7</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2.807</span></span></span></span>。后来有不同的方法基于此算法进行改进。</p><p>MNN <code>Strassenconv1x1</code>采用的是2008年发表的这边文章中的算法《<a href="https://lig-membres.imag.fr/pernet/Publications/fp05-dumas.pdf">Memory efficient scheduling of Strassen-Winograd’s matrix multiplication algorithm</a>》，主要针对memory访问上进行优化。</p><h1>原理</h1><h2 id="普通矩阵乘">普通矩阵乘</h2><p>以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">C=AB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>为例，假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>均为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n × n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>矩阵，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>中每个元素需要通过以下方式计算：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>c</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mstyle scriptlevel="0" displaystyle="true"><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><msub><mi>b</mi><mrow><mi>k</mi><mi>j</mi></mrow></msub></mstyle></mrow><annotation encoding="application/x-tex">c_{ij}=\displaystyle\sum_{k=1}^na_{ik}b_{kj}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">ik</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">kj</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>即每个元素计算需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>次乘法，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>次加法，C共有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>个元素，故一共需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">n^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>次乘法和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n^2(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>次加法，故算法复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><h2 id="分治法">分治法</h2><p>Strassen算法基于分治的思想，因此我们首先考虑一个简单的分治策略。</p><p>假设矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>和矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>都是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>n</mi><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n×n,(n=2^k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的方阵，求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">C=AB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>，则每个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n×n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>的矩阵都可以分割为四个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n/2) ×( n/2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/2</span><span class="mclose">)</span></span></span></span>的矩阵：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>12</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>22</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mi>B</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>B</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>B</mi><mn>12</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>B</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>B</mi><mn>22</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mi>C</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>C</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>C</mi><mn>12</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>C</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>C</mi><mn>22</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">A=\begin{bmatrix}A_{11} &amp; A_{12} \\A_{21} &amp; A_{22}\end{bmatrix} \spaceB=\begin{bmatrix}B_{11} &amp; B_{12} \\B_{21} &amp; B_{22}\end{bmatrix} \spaceC=\begin{bmatrix}C_{11} &amp; C_{12} \\C_{21} &amp; C_{22}\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>于是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">C=AB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>可以改写为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>C</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>C</mi><mn>12</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>C</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>C</mi><mn>22</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>12</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>22</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>B</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>B</mi><mn>12</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>B</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>B</mi><mn>22</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}C_{11} &amp; C_{12} \\C_{21} &amp; C_{22}\end{bmatrix}=\begin{bmatrix}A_{11} &amp; A_{12} \\A_{21} &amp; A_{22}\end{bmatrix}\begin{bmatrix}B_{11} &amp; B_{12} \\B_{21} &amp; B_{22}\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>展开有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mn>11</mn></msub><mo>=</mo><msub><mi>A</mi><mn>11</mn></msub><msub><mi>B</mi><mn>11</mn></msub><mo>+</mo><msub><mi>A</mi><mn>12</mn></msub><msub><mi>B</mi><mn>21</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>12</mn></msub><mo>=</mo><msub><mi>A</mi><mn>11</mn></msub><msub><mi>B</mi><mn>12</mn></msub><mo>+</mo><msub><mi>A</mi><mn>12</mn></msub><msub><mi>B</mi><mn>22</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>21</mn></msub><mo>=</mo><msub><mi>A</mi><mn>21</mn></msub><msub><mi>B</mi><mn>11</mn></msub><mo>+</mo><msub><mi>A</mi><mn>22</mn></msub><msub><mi>B</mi><mn>21</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>22</mn></msub><mo>=</mo><msub><mi>A</mi><mn>21</mn></msub><msub><mi>B</mi><mn>12</mn></msub><mo>+</mo><msub><mi>A</mi><mn>22</mn></msub><msub><mi>B</mi><mn>22</mn></msub></mrow><annotation encoding="application/x-tex">C_{11} = A_{11}B_{11}+A_{12}B_{21} \\C_{12} = A_{11}B_{12}+A_{12}B_{22} \\C_{21} = A_{21}B_{11}+A_{22}B_{21} \\C_{22} = A_{21}B_{12}+A_{22}B_{22}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>每个等式需要两次矩阵乘法和一次矩阵加法。若用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>表示两个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n×n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>矩阵之间的乘法，则有如下递归式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>8</mn><mi>T</mi><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>+</mo><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=8T(\frac{n}{2})+\varTheta(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中：</p><ul><li><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn><mi>T</mi><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">8T(\frac{n}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>表示8次子矩阵乘法，子矩阵规模为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n/2) ×( n/2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/2</span><span class="mclose">)</span></span></span></span>；</li></ol></li><li><ol start="2"><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varTheta(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>表示4次子矩阵加法以及合并<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>矩阵的时间复杂度。</li></ol></li></ul><p>根据<a href="https://zhuanlan.zhihu.com/p/267890781">递归式求解</a>，得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mrow><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mn>2</mn><mn>8</mn></msubsup></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=\varTheta(n^{log_2^8})=\varTheta(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2369em;vertical-align:-0.25em;"></span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，与普通矩阵乘的时间复杂度相同。分治法并不能起到加速的效果。</p><h2 id="原始版本Strassen">原始版本Strassen</h2><p>分治法包含了8次矩阵相乘和4次矩阵相加，相比矩阵加法，矩阵乘法是非常慢的。这8次矩阵相乘正是瓶颈的来源。于是我们想到能不能减少矩阵相乘的次数，哪怕代价是更多的矩阵相加。Strassen正是利用了这一点。</p><ul><li><ol><li>同样还是每个矩阵分成4份，然后创建如下10个中间矩阵（10次矩阵加法<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mo>×</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>×</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">10×\frac{n}{2}×\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varTheta(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>）：</li></ol></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>=</mo><msub><mi>B</mi><mn>12</mn></msub><mo>−</mo><msub><mi>B</mi><mn>22</mn></msub><mspace linebreak="newline"></mspace><msub><mi>S</mi><mn>2</mn></msub><mo>=</mo><msub><mi>A</mi><mn>11</mn></msub><mo>+</mo><msub><mi>A</mi><mn>12</mn></msub><mspace linebreak="newline"></mspace><msub><mi>S</mi><mn>3</mn></msub><mo>=</mo><msub><mi>A</mi><mn>21</mn></msub><mo>+</mo><msub><mi>A</mi><mn>22</mn></msub><mspace linebreak="newline"></mspace><msub><mi>S</mi><mn>4</mn></msub><mo>=</mo><msub><mi>B</mi><mn>21</mn></msub><mo>−</mo><msub><mi>B</mi><mn>11</mn></msub><mspace linebreak="newline"></mspace><msub><mi>S</mi><mn>5</mn></msub><mo>=</mo><msub><mi>A</mi><mn>11</mn></msub><mo>+</mo><msub><mi>A</mi><mn>22</mn></msub><mspace linebreak="newline"></mspace><msub><mi>S</mi><mn>6</mn></msub><mo>=</mo><msub><mi>B</mi><mn>11</mn></msub><mo>+</mo><msub><mi>B</mi><mn>22</mn></msub><mspace linebreak="newline"></mspace><msub><mi>S</mi><mn>7</mn></msub><mo>=</mo><msub><mi>A</mi><mn>12</mn></msub><mo>−</mo><msub><mi>A</mi><mn>22</mn></msub><mspace linebreak="newline"></mspace><msub><mi>S</mi><mn>8</mn></msub><mo>=</mo><msub><mi>B</mi><mn>21</mn></msub><mo>+</mo><msub><mi>B</mi><mn>22</mn></msub><mspace linebreak="newline"></mspace><msub><mi>S</mi><mn>9</mn></msub><mo>=</mo><msub><mi>A</mi><mn>11</mn></msub><mo>−</mo><msub><mi>A</mi><mn>21</mn></msub><mspace linebreak="newline"></mspace><msub><mi>S</mi><mn>10</mn></msub><mo>=</mo><msub><mi>B</mi><mn>11</mn></msub><mo>+</mo><msub><mi>B</mi><mn>12</mn></msub></mrow><annotation encoding="application/x-tex">S_1=B_{12}-B_{22} \\S_2=A_{11}+A_{12} \\S_3=A_{21}+A_{22} \\S_4=B_{21}-B_{11} \\S_5=A_{11}+A_{22} \\S_6=B_{11}+B_{22} \\S_7=A_{12}-A_{22} \\S_8=B_{21}+B_{22} \\S_9=A_{11}-A_{21} \\S_{10}=B_{11}+B_{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><ul><li><ol start="2"><li>而后是执行7次矩阵乘法（时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7</mn><mi>T</mi><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>=</mo><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mrow><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mn>2</mn><mn>7</mn></msubsup></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2.807</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">7T(\frac{n}{2})=\varTheta(n^{log_2^7})=\varTheta(n^{2.807})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord">7</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2369em;vertical-align:-0.25em;"></span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2.807</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>）：</li></ol></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo>=</mo><msub><mi>A</mi><mn>11</mn></msub><msub><mi>S</mi><mn>1</mn></msub><mspace linebreak="newline"></mspace><msub><mi>P</mi><mn>2</mn></msub><mo>=</mo><msub><mi>S</mi><mn>2</mn></msub><msub><mi>B</mi><mn>22</mn></msub><mspace linebreak="newline"></mspace><msub><mi>P</mi><mn>3</mn></msub><mo>=</mo><msub><mi>S</mi><mn>3</mn></msub><msub><mi>B</mi><mn>11</mn></msub><mspace linebreak="newline"></mspace><msub><mi>P</mi><mn>4</mn></msub><mo>=</mo><msub><mi>A</mi><mn>22</mn></msub><msub><mi>S</mi><mn>4</mn></msub><mspace linebreak="newline"></mspace><msub><mi>p</mi><mn>5</mn></msub><mo>=</mo><msub><mi>S</mi><mn>5</mn></msub><msub><mi>S</mi><mn>6</mn></msub><mspace linebreak="newline"></mspace><msub><mi>P</mi><mn>6</mn></msub><mo>=</mo><msub><mi>S</mi><mn>7</mn></msub><msub><mi>S</mi><mn>8</mn></msub><mspace linebreak="newline"></mspace><msub><mi>P</mi><mn>7</mn></msub><mo>=</mo><msub><mi>S</mi><mn>9</mn></msub><msub><mi>S</mi><mn>10</mn></msub></mrow><annotation encoding="application/x-tex">P_1=A_{11}S_1 \\P_2=S_2B_{22} \\P_3=S_3B_{11} \\P_4=A_{22}S_4 \\p_5=S_5S_6 \\P_6=S_7S_8 \\P_7=S_9S_{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><ul><li><ol start="3"><li>最后通过这7个矩阵计算得到C矩阵（8次矩阵加法<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn><mo>×</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>×</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">8×\frac{n}{2}×\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varTheta(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>）：</li></ol></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mn>11</mn></msub><mo>=</mo><msub><mi>P</mi><mn>5</mn></msub><mo>+</mo><msub><mi>P</mi><mn>4</mn></msub><mo>−</mo><msub><mi>P</mi><mn>2</mn></msub><mo>+</mo><msub><mi>P</mi><mn>6</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>12</mn></msub><mo>=</mo><msub><mi>P</mi><mn>1</mn></msub><mo>+</mo><msub><mi>P</mi><mn>2</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>21</mn></msub><mo>=</mo><msub><mi>P</mi><mn>3</mn></msub><mo>+</mo><msub><mi>P</mi><mn>4</mn></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>22</mn></msub><mo>=</mo><msub><mi>P</mi><mn>5</mn></msub><mo>+</mo><msub><mi>P</mi><mn>1</mn></msub><mo>−</mo><msub><mi>P</mi><mn>3</mn></msub><mo>−</mo><msub><mi>P</mi><mn>7</mn></msub></mrow><annotation encoding="application/x-tex">C_{11}=P_5+P_4-P_2+P_6 \\C_{12}=P_1+P_2 \\C_{21}=P_3+P_4 \\C_{22}=P_5+P_1-P_3-P_7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>综合可得如下递归式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>Θ</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>7</mn><mi>T</mi><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">T(n)=\begin{cases}   \varTheta(1) &amp;\text{if } n=1 \\   7T(\frac{n}{2})\varTheta(n^2) &amp;\text{if } n&gt;1\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">7</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>进而总的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mrow><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mn>2</mn><mn>7</mn></msubsup></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><mi>Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2.807</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=\varTheta(n^{log_2^7})=\varTheta(n^{2.807})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2369em;vertical-align:-0.25em;"></span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathit">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2.807</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h2 id="改进版本Strassen">改进版本Strassen</h2><ul><li><ol><li>8次矩阵加法：</li></ol></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>S</mi><mn>1</mn></msub><mo>=</mo><msub><mi>A</mi><mn>21</mn></msub><mo>+</mo><msub><mi>A</mi><mn>22</mn></msub><mspace width="1em"><msub><mi>T</mi><mn>1</mn></msub><mo>=</mo><msub><mi>B</mi><mn>12</mn></msub><mo>−</mo><msub><mi>B</mi><mn>11</mn></msub></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>S</mi><mn>2</mn></msub><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub><mo>−</mo><msub><mi>A</mi><mn>11</mn></msub><mspace width="1em"><mspace width="0.5em"><msub><mi>T</mi><mn>2</mn></msub><mo>=</mo><msub><mi>B</mi><mn>22</mn></msub><mo>−</mo><msub><mi>T</mi><mn>1</mn></msub></mspace></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>S</mi><mn>3</mn></msub><mo>=</mo><msub><mi>A</mi><mn>11</mn></msub><mo>−</mo><msub><mi>A</mi><mn>21</mn></msub><mspace width="1em"><msub><mi>T</mi><mn>3</mn></msub><mo>=</mo><msub><mi>B</mi><mn>22</mn></msub><mo>−</mo><msub><mi>B</mi><mn>12</mn></msub></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>S</mi><mn>4</mn></msub><mo>=</mo><msub><mi>A</mi><mn>12</mn></msub><mo>−</mo><msub><mi>S</mi><mn>2</mn></msub><mspace width="1em"><mspace width="0.5em"><msub><mi>T</mi><mn>4</mn></msub><mo>=</mo><msub><mi>T</mi><mn>2</mn></msub><mo>−</mo><msub><mi>B</mi><mn>21</mn></msub></mspace></mspace></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp; S_1=A_{21}+A_{22} \quad T_1=B_{12}-B_{11} \\&amp; S_2=S_1-A_{11} \quad\enspace T_2=B_{22}-T_1 \\&amp; S_3=A_{11}-A_{21} \quad T_3=B_{22}-B_{12} \\&amp; S_4=A_{12}-S_2 \quad\enspace T_4=T_2-B_{21}\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.75em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-0.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.5em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.5em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><ol start="2"><li>7次矩阵乘法：</li></ol></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left right" columnspacing="0em 1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>P</mi><mn>1</mn></msub><mo>=</mo><msub><mi>A</mi><mn>11</mn></msub><msub><mi>B</mi><mn>11</mn></msub><mspace width="1em"></mspace></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>P</mi><mn>5</mn></msub><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub><msub><mi>T</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>P</mi><mn>2</mn></msub><mo>=</mo><msub><mi>A</mi><mn>12</mn></msub><msub><mi>B</mi><mn>21</mn></msub><mspace width="1em"></mspace></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>P</mi><mn>6</mn></msub><mo>=</mo><msub><mi>S</mi><mn>2</mn></msub><msub><mi>T</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>P</mi><mn>3</mn></msub><mo>=</mo><msub><mi>S</mi><mn>4</mn></msub><msub><mi>B</mi><mn>22</mn></msub><mspace width="1em"></mspace></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>P</mi><mn>7</mn></msub><mo>=</mo><msub><mi>S</mi><mn>3</mn></msub><msub><mi>T</mi><mn>3</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>P</mi><mn>4</mn></msub><mo>=</mo><msub><mi>A</mi><mn>22</mn></msub><msub><mi>T</mi><mn>4</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp; P_1=A_{11}B_{11} \quad &amp; P_5=S_1T_1 \\&amp; P_2=A_{12}B_{21} \quad &amp; P_6=S_2T_2 \\&amp; P_3=S_4B_{22} \quad &amp; P_7=S_3T_3 \\&amp; P_4=A_{22}T_4\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.75em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-0.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><ol start="3"><li>7次矩阵加法：</li></ol></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>U</mi><mn>1</mn></msub><mo>=</mo><msub><mi>P</mi><mn>1</mn></msub><mo>+</mo><msub><mi>P</mi><mn>2</mn></msub><mspace width="1em"><msub><mi>U</mi><mn>5</mn></msub><mo>=</mo><msub><mi>U</mi><mn>4</mn></msub><mo>+</mo><msub><mi>P</mi><mn>3</mn></msub></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>U</mi><mn>2</mn></msub><mo>=</mo><msub><mi>P</mi><mn>1</mn></msub><mo>+</mo><msub><mi>P</mi><mn>6</mn></msub><mspace width="1em"><msub><mi>U</mi><mn>6</mn></msub><mo>=</mo><msub><mi>U</mi><mn>3</mn></msub><mo>−</mo><msub><mi>P</mi><mn>4</mn></msub></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>U</mi><mn>3</mn></msub><mo>=</mo><msub><mi>U</mi><mn>2</mn></msub><mo>+</mo><msub><mi>P</mi><mn>7</mn></msub><mspace width="1em"><msub><mi>U</mi><mn>7</mn></msub><mo>=</mo><msub><mi>U</mi><mn>3</mn></msub><mo>+</mo><msub><mi>P</mi><mn>5</mn></msub></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>U</mi><mn>4</mn></msub><mo>=</mo><msub><mi>U</mi><mn>2</mn></msub><mo>+</mo><msub><mi>P</mi><mn>5</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp;U_1=P_1+P_2 \quad U_5=U_4+P_3 \\&amp;U_2=P_1+P_6 \quad U_6=U_3-P_4 \\&amp;U_3=U_2+P_7 \quad U_7=U_3+P_5 \\&amp;U_4=U_2+P_5\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.75em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-0.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><ol start="4"><li>最终结果：</li></ol></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>U</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>U</mi><mn>5</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>U</mi><mn>6</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>U</mi><mn>7</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">C=\begin{bmatrix}U_1 &amp; U_5 \\U_6 &amp; U_7\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>改进版本的<code>Strassen</code>相比原始版本矩阵加法次数由18次降低到15次。同时该算法同时分析各中间矩阵块之间的依赖关系，充分考虑到了计算中的内存复用，每次递归只需要动态分配两块临时内存<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">X_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">X_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>即可，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>11</mn></msub></mrow><annotation encoding="application/x-tex">C_{11}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>12</mn></msub></mrow><annotation encoding="application/x-tex">C_{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>21</mn></msub></mrow><annotation encoding="application/x-tex">C_{21}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>22</mn></msub></mrow><annotation encoding="application/x-tex">C_{22}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>都可以在计算中复用。</p><p>计算流程图如下：</p><img src="/2021/11/18/AI-Algorithm-6-Strassen/1.png" alt="1" style="zoom:67%;"><p>计算流程表如下：</p><img src="/2021/11/18/AI-Algorithm-6-Strassen/2.png" alt="2" style="zoom:50%;"><h1>总结</h1><p><code>Strassen</code>优化原理是减少矩阵乘法，额外增加的是更多矩阵加法，矩阵乘法的时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，而矩阵加法的复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。总体上乘加运算次数是减少的，来达到加速目的。</p><p>下图展示了普通矩阵乘法和<code>Strassen</code>算法的性能差异，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>越大，<code>Strassen</code>算法节约的时间越多。</p><img src="/2021/11/18/AI-Algorithm-6-Strassen/3.jpg" alt="3" style="zoom:150%;"><p>实际使用中，考虑到每次递归计算分块矩阵的访存问题，会与普通矩阵乘法的做一个cost比较，满足一定条件下切换到普通矩阵乘法，终止递归。</p><h1>参考</h1><ul><li><ol><li><a href="https://zhuanlan.zhihu.com/p/268392799">矩阵乘法Strassen算法</a></li></ol></li></ul><h1>致谢</h1><p>文章主体框架参考自<a href="https://github.com/yizhaoyanbo">东哥</a>的MNN源码解读的内部分享，加上了自己的一些看法。有幸被看到的话，希望能给点个赞~~</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Strassen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [5]：MNN中的Winograd实现</title>
      <link href="/2021/11/16/AI-Algorithm-5-WinogradInMnn/"/>
      <url>/2021/11/16/AI-Algorithm-5-WinogradInMnn/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>主要针对CPU后端，基于<mnnrootdir>/source/backend/cpu/compute/ConvolutionWinograd.cpp源码展开。</mnnrootdir></p><p>部分章节以输入大小：<code>1 x 8 x 224 x 224</code>，权重大小: <code>16 x 8 x 3 x 3</code>, 输出<code>1 x 16 x 222 x 222</code> 为例进行辅助说明。</p><p>MNN卷积相关运算统一使用CAFFE_C4格式，即MNN自创的NC4HW4格式，具体排布介绍：<a href="https://no5-aaron-wu.github.io/2021/11/14/AI-Algorithm-2-NC4HW4/">NC4HW4数据排布</a></p><h1>Winograd适用条件</h1><p><code>canUseWinograd</code>函数，具体代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ConvolutionWinograd::canUseWinograd</span><span class="params">(<span class="keyword">const</span> Convolution2DCommon *common)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (common-&gt;<span class="built_in">kernelY</span>() != common-&gt;<span class="built_in">kernelX</span>() || common-&gt;<span class="built_in">kernelY</span>() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (common-&gt;<span class="built_in">dilateX</span>() != <span class="number">1</span> || common-&gt;<span class="built_in">dilateY</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (common-&gt;<span class="built_in">strideX</span>() != <span class="number">1</span> || common-&gt;<span class="built_in">strideY</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结出来就是:</p><ul><li><ol><li>必须是<code>kernelX = kernelY</code>的卷积核，并且卷积核尺寸大于<code>1x1</code>。<code>1x1</code>的卷积核MNN使用的是<strong>Convolution1x1Strassen</strong>实现，暂且按下不表。</li></ol></li><li><ol start="2"><li>不适用于<code>dilateConv</code>。</li></ol></li><li><ol start="3"><li>不适用于<code>stride != 1</code>的conv。</li></ol></li></ul><h1>选取最佳的Unit</h1><p><code>bestWinogradUnit</code>函数，具体代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ConvolutionWinograd::bestWinogradUnit</span><span class="params">(<span class="keyword">const</span> Convolution2DCommon *common, <span class="keyword">const</span> Tensor *inputTensor,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          <span class="keyword">const</span> Tensor *outputTensor, <span class="keyword">int</span> threadNumber, Backend* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> core = <span class="keyword">static_cast</span>&lt;CPUBackend*&gt;(b)-&gt;<span class="built_in">functions</span>();</span><br><span class="line">    <span class="keyword">int</span> ow      = outputTensor-&gt;<span class="built_in">width</span>();</span><br><span class="line">    <span class="keyword">int</span> oh      = outputTensor-&gt;<span class="built_in">height</span>();</span><br><span class="line">    <span class="keyword">int</span> oc      = outputTensor-&gt;<span class="built_in">channel</span>();</span><br><span class="line">    <span class="keyword">int</span> ePack, hPack, lPack;</span><br><span class="line">    core-&gt;<span class="built_in">MNNGetMatMulPackMode</span>(&amp;ePack, &amp;lPack, &amp;hPack);</span><br><span class="line">    <span class="keyword">int</span> unit2   = <span class="built_in">UP_DIV</span>(ow * oh, ePack * threadNumber);</span><br><span class="line">    <span class="keyword">int</span> maxUnit = (<span class="keyword">int</span>)::<span class="built_in">sqrtf</span>((<span class="keyword">float</span>)unit2);</span><br><span class="line">    maxUnit     = std::<span class="built_in">min</span>(maxUnit, CONVOLUTION_WINOGRAD_MAX_UNIT);</span><br><span class="line">    maxUnit     = std::<span class="built_in">max</span>(maxUnit, CONVOLUTION_WINOGRAD_MIN_UNIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ic           = inputTensor-&gt;<span class="built_in">channel</span>();</span><br><span class="line">    <span class="keyword">auto</span> kernelSize  = common-&gt;<span class="built_in">kernelY</span>();</span><br><span class="line">    <span class="keyword">int</span> unit         = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> maxRate    = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">float</span> originCost = (<span class="keyword">float</span>)ow * oh * (<span class="keyword">float</span>)ic * oc * kernelSize * kernelSize;</span><br><span class="line">    std::set&lt;<span class="keyword">int</span>&gt; supportSu&#123;<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = CONVOLUTION_WINOGRAD_MIN_UNIT; u &lt;= maxUnit; ++u) &#123;</span><br><span class="line">        <span class="keyword">auto</span> sui = u + kernelSize - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">auto</span> su = (<span class="keyword">float</span>)sui;</span><br><span class="line">        <span class="keyword">if</span> (supportSu.<span class="built_in">find</span>(sui) == supportSu.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> == core-&gt;<span class="built_in">chooseWinoDestTransform</span>((<span class="keyword">int</span>)su, u)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*Let F(6,3) be choosed when it can speed up from F(2,3) than 0.6*/</span></span><br><span class="line">        <span class="keyword">float</span> penalty = (su * su) / (<span class="keyword">float</span>)(kernelSize * kernelSize) * <span class="number">0.12f</span>;</span><br><span class="line">        <span class="keyword">float</span> winogradCost =</span><br><span class="line">            (<span class="number">2</span> * su * su * ic + su * su * ic * oc + (su + u) * u * oc) * (<span class="built_in">UP_DIV</span>(ow, u) * <span class="built_in">UP_DIV</span>(oh, u));</span><br><span class="line">        <span class="keyword">float</span> reduceRate = originCost / winogradCost - penalty;</span><br><span class="line">        <span class="comment">// MNN_PRINT(&quot;ow=%d, oh=%d, %f, %f, winograd unit:%d\n&quot;, ow, oh, winogradCost, reduceRate, u);</span></span><br><span class="line">        <span class="keyword">if</span> (reduceRate &gt; maxRate) &#123;</span><br><span class="line">            maxRate = reduceRate;</span><br><span class="line">            unit    = u;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxRate &lt; <span class="number">1.0f</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ol><li>经确认，MNN中计算Cost并不是使用<code>乘加次数</code>的度量方式，而是<code>访存量</code>的度量方式，即一次winograd计算中对内存读取的次数；</li></ol></li><li><ol start="2"><li>上述代码的大致逻辑就是遍历<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mi>n</mi><mi>i</mi><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>8</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">unit\in[2,8]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">u</span><span class="mord mathnormal">ni</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">8</span><span class="mclose">]</span></span></span></span>，计算普通卷积<code>originCost</code>和<code>winogradCost</code>的比值，寻找比值的最大值，来确定最佳unit；</li></ol></li><li><ol start="3"><li>但是在计算输出转换是<code>(su + u) * u * oc</code>，但我觉得应该是<code>(su + u) * su * oc</code>才对；</li></ol></li><li><ol start="4"><li>unit选取其实是个权衡值，在内存访问次数和乘法次数之间存在一定权衡，unit小的乘法次数少，但是内存访问次数多，反之反之;</li></ol></li><li><ol start="5"><li><code>penalty</code>是个惩罚值，具体作用可以看这个<a href="https://github.com/alibaba/MNN/issues/1340">issue</a>。</li></ol></li></ul><h1>生成变换矩阵</h1><p>通过<code>WinogradGenerater</code>类实现，主要根据<code>unit</code>和<code>kernelSize</code>大小计算三个转换矩阵:<code>G</code>，<code>A</code>，<code>B</code>，根据<strong>中国余数定理</strong>求解同余方程组，获取变换矩阵。暂且按下不表</p><h1>权重变换</h1><blockquote><p>以unit=6为例</p></blockquote><p>原始权重Tensor大小<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Red"><mn>16</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Red}16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Red;">16</span></span></span></span> × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Blue"><mn>8</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Blue}8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Blue;">8</span></span></span></span> × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Green"><mn>3</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Green}3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Green;">3</span></span></span></span> × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Green"><mn>3</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Green}3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Green;">3</span></span></span></span>，每个3×3 kernel变换后Tensor大小应为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Red"><mn>16</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Red}16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Red;">16</span></span></span></span> × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Blue"><mn>8</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Blue}8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Blue;">8</span></span></span></span> × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Green"><mn>8</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Green}8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Green;">8</span></span></span></span> × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Green"><mn>8</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Green}8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Green;">8</span></span></span></span>，经过<code>NC4HW4</code>重排后的Tensor大小 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Green"><mn>64</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Green}64</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Green;">64</span></span></span></span> × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Red"><mn>4</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Red}4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Red;">4</span></span></span></span> × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Blue"><mn>8</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Blue}8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Blue;">8</span></span></span></span> × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Blue"><mn>1</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Blue}1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Blue;">1</span></span></span></span> × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Red"><mn>4</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Red}4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Red;">4</span></span></span></span>。</p><p>重排后每个维度含义如下：</p><ul><li><ol><li>变换矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span>大小为 <code>8 x 3</code>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>G</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">G^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>为 <code>3 x 8</code>，根据变换公式，每个<code>3 x 3</code>卷积核变换后的大小为 <code>8 x 8 = 64</code>，将这64个值拆分到64个batch（<code>N</code>维度）；</li></ol></li><li><ol start="2"><li>卷积核个数16按照<code>C4</code>进行拆分，每个<code>C4 pack</code>排布到<code>W</code>维度，<code>C</code>维度为4；</li></ol></li><li><ol start="3"><li>单个卷积核通道数8排布到<code>H</code>维度；</li></ol></li></ul><p>这样做的目的是便于后面<code>MatMul</code>时，指令集可以一次性对<strong>同一个输入</strong>的<strong>4个不同卷积核</strong>的<strong>单个通道</strong>进行乘法计算。在H方向累加就可以实现<strong>同一个输入</strong>的<strong>不同卷积核</strong>的卷积结果输出。示意图如下：</p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/1.png" alt="1"></p><p>具体代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WinogradGenerater::transformWeight</span><span class="params">(<span class="keyword">const</span> Tensor* weightDest, <span class="keyword">const</span> Tensor* source, <span class="keyword">bool</span> ciFirst)</span> </span>&#123;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Tensor&gt; <span class="title">GT</span><span class="params">(Math::Matrix::create(mG-&gt;length(<span class="number">0</span>), mG-&gt;length(<span class="number">1</span>)))</span></span>;</span><br><span class="line">    Math::Matrix::<span class="built_in">transpose</span>(GT.<span class="built_in">get</span>(), mG.<span class="built_in">get</span>());</span><br><span class="line">    <span class="keyword">int</span> ci          = source-&gt;<span class="built_in">length</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> co          = source-&gt;<span class="built_in">length</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> kernelCount = source-&gt;<span class="built_in">length</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> unitCi      = weightDest-&gt;<span class="built_in">length</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> unitCo      = weightDest-&gt;<span class="built_in">length</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">auto</span> alpha      = mB-&gt;<span class="built_in">length</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ci % unitCi != <span class="number">0</span> || co % unitCo != <span class="number">0</span>) &#123;</span><br><span class="line">        ::<span class="built_in">memset</span>(weightDest-&gt;host&lt;<span class="keyword">float</span>&gt;(), <span class="number">0</span>, weightDest-&gt;<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Tensor&gt; <span class="title">M</span><span class="params">(Math::Matrix::create(kernelCount, alpha))</span></span>;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Tensor&gt; <span class="title">K</span><span class="params">(Math::Matrix::createShape(kernelCount, kernelCount))</span></span>;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Tensor&gt; <span class="title">K_Transform</span><span class="params">(Math::Matrix::create(alpha, alpha))</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> weightPtr      = source-&gt;host&lt;<span class="keyword">float</span>&gt;();</span><br><span class="line">    <span class="keyword">auto</span> KTransformData = K_Transform-&gt;host&lt;<span class="keyword">float</span>&gt;();</span><br><span class="line">    <span class="keyword">int</span> lCi = unitCo;</span><br><span class="line">    <span class="keyword">int</span> lCo = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ciFirst) &#123;</span><br><span class="line">        lCi = <span class="number">1</span>;</span><br><span class="line">        lCo = unitCi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> oz = <span class="number">0</span>; oz &lt; co; ++oz) &#123;</span><br><span class="line">        <span class="keyword">auto</span> srcOz = weightPtr + oz * ci * kernelCount * kernelCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ozC4 = oz / unitCo;</span><br><span class="line">        <span class="keyword">int</span> mx   = oz % unitCo;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> dstOz = weightDest-&gt;host&lt;<span class="keyword">float</span>&gt;() + weightDest-&gt;<span class="built_in">stride</span>(<span class="number">1</span>) * ozC4 + mx * lCo;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">0</span>; sz &lt; ci; ++sz) &#123;</span><br><span class="line">            <span class="keyword">int</span> szC4         = sz / unitCi;</span><br><span class="line">            <span class="keyword">int</span> my           = sz % unitCi;</span><br><span class="line">            <span class="keyword">auto</span> srcSz       = srcOz + kernelCount * kernelCount * sz;</span><br><span class="line">            K-&gt;<span class="built_in">buffer</span>().host = (<span class="keyword">uint8_t</span>*)srcSz;</span><br><span class="line">            <span class="comment">// M = G * K</span></span><br><span class="line">            Math::Matrix::<span class="built_in">multi</span>(M.<span class="built_in">get</span>(), mG.<span class="built_in">get</span>(), K.<span class="built_in">get</span>());</span><br><span class="line">            <span class="comment">// K_Transform = M*GT</span></span><br><span class="line">            Math::Matrix::<span class="built_in">multi</span>(K_Transform.<span class="built_in">get</span>(), M.<span class="built_in">get</span>(), GT.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> dstSz = dstOz + szC4 * weightDest-&gt;<span class="built_in">stride</span>(<span class="number">2</span>) + my * lCi;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; alpha * alpha; ++i) &#123;</span><br><span class="line">                *(dstSz + i * weightDest-&gt;<span class="built_in">stride</span>(<span class="number">0</span>)) = KTransformData[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>分块处理</h1><h2 id="常用术语">常用术语</h2><ul><li><ol><li><code>unit</code>：Winograd输出FeatureMap的分块大小。</li></ol></li></ul><blockquote><p>假设卷积输出的Tensor大小为: <code>1 x 16 x 222 x 222</code>，<code>kernel size = 3</code>，<code>unit = 6</code>，则输出按照<code>6 x 6</code>大小分块输出，输入中就使用<code>8 x 8</code>大小分块。简单说就是利用输入的<code>8 x 8</code>块计算输出的<code>6 x 6</code>块。那么<code>222 x 222</code> 就可以分为 <code>37 x 37</code>个块大小。</p></blockquote><ul><li><ol start="2"><li><code>epack</code>：分组单位，固定值，对于不同的后端设置为不同的值。获取方式如下：</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ePack, lPack, hPack;</span><br><span class="line">core-&gt;<span class="built_in">MNNGetMatMulPackMode</span>(&amp;ePack, &amp;lPack, &amp;hPack);</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li><code>tile</code>： 按照uint进行分块后，再对所有块进行分组的个数。</li></ol></li></ul><blockquote><p>如上面<code>37 x 37</code>个块，如果<code>epack = 24</code>，则<code>tile =（37 x 37 + 24 - 1）/ 24 = 58</code>。保证所有块都能处理到，因此采用向上取整。</p></blockquote><h2 id="分块原理">分块原理</h2><p>分块原理如下图所示：</p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/2.png" alt="2"></p><p>分块流程确定后，实操过程并不是把所有输入<code>tile</code>都处理完，才执行后面的乘加及输出变换，这样的内存开销太大了，不可取。<br>MNN采用的是以<code>tile</code>为单位进行处理，每个<code>tile</code>进行输入变换、乘加、输出变换。将结果逐个写入到输出Tensor中。另外，由于<code>tile</code>之间是完全独立的，也方便使用多线程处理。</p><p><code>1 x 2 x 224 x 224 x 4</code>的输入，按照<code>tile</code>划分后变形为(NCHW): <code>1x 2 x 58</code> <code>x</code> <strong><code>tile</code></strong>，这其中的2实际是输入通道8经过<code>C4 Pack</code>后的值，在卷积过程中是要一起累加到输出结果的。因此实际计算的时候，按照一次处理tile的两个通道进行计算。一共循环处理58次。</p><h1>buffer分配</h1><blockquote><p>延续前面例子的尺寸情况</p></blockquote><p>具体代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">mTempBuffer.<span class="built_in">reset</span>(Tensor::createDevice&lt;<span class="keyword">uint8_t</span>&gt;(&#123;threadNumber, ePack, ic4 + oc4, pack * alpha2, bytes&#125;));</span><br><span class="line">mTransformMidBuffer.<span class="built_in">reset</span>(Tensor::createDevice&lt;<span class="keyword">uint8_t</span>&gt;(&#123;threadNumber, (<span class="number">1</span> + ic4 * ePack), alpha2, pack, bytes&#125;)); <span class="comment">// 1 means original small buffer of alpha2 * pack.</span></span><br><span class="line">mGemmMidBuffer.<span class="built_in">reset</span>(Tensor::createDevice&lt;<span class="keyword">uint8_t</span>&gt;(&#123;threadNumber, alpha, ePack * <span class="built_in">UP_DIV</span>(srcCount, pack) * pack, bytes&#125;));</span><br></pre></td></tr></table></figure><p>参数的具体含义如下：</p><ul><li><ol><li><code>ePack = 24</code>表示一个<code>tile</code>有24个块。</li></ol></li><li><ol start="2"><li><code>ic4 = 2</code>，<code>oc4 = 4</code>，分别代表<code>CAFFE_C4</code>格式下的输入，输出通道数。</li></ol></li><li><ol start="3"><li><code>pack = 4</code>表示4个通道为一组pack到一起。</li></ol></li><li><ol start="4"><li><code>alpha2 = 8 x 8 = 64</code>，表示单个输入块的数据个数。</li></ol></li><li><ol start="5"><li><code>bytes=4</code>，处理float类型，4个字节。</li></ol></li></ul><p>3个buffer的情况如下：</p><ul><li><ol><li><code>mTempBuffer</code>：单线程为例，分配的大小为 <code>1 x 24 x (2 + 4) x (4 x 64) x 4</code>bytes。其中，<ul><li><code>1 x 24 x 2 x (4 x 64) x 4</code>bytes用于存储输入变换后的数据。</li><li><code>1 x 24 x 4 x (4 x 64) x 4</code>bytes用于存储输出变换后的数据。</li></ul></li></ol></li><li><ol start="2"><li><code>mTransformMidBuffer</code>：单线程为例，分配的大小为 <code>1 x 2 x 64 x 4 x 4</code>bytes，用于存储单个输入块的两个通道变换后的数据。</li></ol></li><li><ol start="3"><li><code>mGemmMidBuffer</code>：单线程为例，分配的大小为<code>1 x (24 x 8) x 4</code>bytes，单个乘加模块需要的输入数据，即：<code>24 x 8</code>个float，至于这<code>24 x 8</code>是以怎样的形式取得，下文有阐述。</li></ol></li></ul><p>通俗来说就是针对每个输出通道，一次处理24个输入的8通道数据。乘加后得到24个输出。循环64次，得到单个输出通道中一个<code>tile</code>的所有输出（未做输出变换前）： <code>24 x 8 x 8</code>。</p><h1>输入变换</h1><p>由上面一节可知，一次处理2个通道的tile，即: <code>2 x 24 x 8 x 8 x4</code>的float数据量。</p><p>2个通道的块处理的核心代码部分见这里，外面会循环24次：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; ic_4; ++z) &#123;</span><br><span class="line">    <span class="keyword">auto</span> srcZ = srcStart + z * sourceZStep * bytes;</span><br><span class="line">    <span class="comment">// Transform</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; srcUnit; ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> srcFloatPtr = (<span class="keyword">const</span> <span class="keyword">float</span>*)(srcZ + i * iw * pack * bytes);</span><br><span class="line">        <span class="keyword">auto</span> dstFloatPtr = (<span class="keyword">float</span>*)(midBuffer1 + i * pack * bytes);</span><br><span class="line">        <span class="built_in">mSourceTransform</span>(srcFloatPtr, dstFloatPtr, pack, pack * srcUnit);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> dstZ = dst_x + z * dstZStep * bytes;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; srcUnit; ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> srcFloatPtr = (<span class="keyword">const</span> <span class="keyword">float</span>*)(midBuffer1 + i * srcUnit * pack * bytes);</span><br><span class="line">        <span class="keyword">auto</span> dstFloatPtr = (<span class="keyword">float</span>*)(dstZ + i * unitStep * bytes);</span><br><span class="line">        <span class="built_in">mSourceTransform</span>(srcFloatPtr, dstFloatPtr, pack,</span><br><span class="line">                         unitStep * srcUnit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mSourceTransform</code>函数基于<code>unit</code>而有不同的实现，这里贴出<code>8 x 8</code>的实现：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOAD8                                     \</span></span><br><span class="line"><span class="meta">    Vec4 s0 = Vec4::load(srcBlock + 0 * srcStep); \</span></span><br><span class="line"><span class="meta">    Vec4 s1 = Vec4::load(srcBlock + 1 * srcStep); \</span></span><br><span class="line"><span class="meta">    Vec4 s2 = Vec4::load(srcBlock + 2 * srcStep); \</span></span><br><span class="line"><span class="meta">    Vec4 s3 = Vec4::load(srcBlock + 3 * srcStep); \</span></span><br><span class="line"><span class="meta">    Vec4 s4 = Vec4::load(srcBlock + 4 * srcStep); \</span></span><br><span class="line"><span class="meta">    Vec4 s5 = Vec4::load(srcBlock + 5 * srcStep); \</span></span><br><span class="line"><span class="meta">    Vec4 s6 = Vec4::load(srcBlock + 6 * srcStep); \</span></span><br><span class="line"><span class="meta">    Vec4 s7 = Vec4::load(srcBlock + 7 * srcStep);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _sourceTransformUnit8x8(<span class="keyword">const</span> <span class="keyword">float</span>* srcBlock, <span class="keyword">float</span>* dstStart, <span class="keyword">size_t</span> srcStep, <span class="keyword">size_t</span> dstStep) &#123;</span><br><span class="line">    LOAD8;</span><br><span class="line">    Vec4 m0 = s0 * <span class="number">36.f</span> - s2 * <span class="number">49.f</span> + s4 * <span class="number">14.f</span> - s6;</span><br><span class="line">    Vec4 m1 = (s1 + s2) * <span class="number">36.f</span> - (s3 + s4) * <span class="number">13.f</span> + (s5 + s6);</span><br><span class="line">    Vec4 m2 = (s2 - s1) * <span class="number">36.f</span> + (s3 - s4) * <span class="number">13.f</span> + (s6 - s5);</span><br><span class="line">    Vec4 m3 = s1 * <span class="number">18.f</span> + s2 * <span class="number">9.f</span> - s3 * <span class="number">20.f</span> - s4 * <span class="number">10.f</span> + s5 * <span class="number">2.f</span> + s6;</span><br><span class="line">    Vec4 m4 = s2 * <span class="number">9.f</span> - s1 * <span class="number">18.f</span> + s3 * <span class="number">20.f</span> - s4 * <span class="number">10.f</span> - s5 * <span class="number">2.f</span> + s6;</span><br><span class="line">    Vec4 m5 = s1 * <span class="number">12.f</span> + s2 * <span class="number">4.f</span> - s3 * <span class="number">15.f</span> - s4 * <span class="number">5.f</span> + s5 * <span class="number">3.f</span> + s6;</span><br><span class="line">    Vec4 m6 = s2 * <span class="number">4.f</span> - s1 * <span class="number">12.f</span> + s3 * <span class="number">15.f</span> - s4 * <span class="number">5.f</span> - s5 * <span class="number">3.f</span> + s6;</span><br><span class="line">    Vec4 m7 = s3 * <span class="number">49.f</span> - s1 * <span class="number">36.f</span> - s5 * <span class="number">14.f</span> + s7;</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">0</span> * dstStep, m0);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">1</span> * dstStep, m1);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">2</span> * dstStep, m2);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">3</span> * dstStep, m3);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">4</span> * dstStep, m4);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">5</span> * dstStep, m5);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">6</span> * dstStep, m6);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">7</span> * dstStep, m7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理一行输入数据，调用了两次<code>mSouceTransform</code>，其中每次<code>mSouceTransform</code>里面做的是:</p><ul><li><ol><li><code>LOAD8</code>：指令集连续加载一个块中一行的8个<code>C4 Pack</code>的数据（可以视为一个行向量），放到8个128bit的寄存器<code>s0 - s7</code>中；</li></ol></li><li><ol start="2"><li>右乘变换矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>，得到相乘结果 <code>m0 - m7</code>；</li></ol></li><li><ol start="3"><li><code>m0-m7</code>转置（<code>+ n * dstStep</code>按列存放）后，输出到临时的<code>mTransformMidBuffer</code>中。</li></ol></li></ul><p>其实MNN对原始变换公式做了等价调整，这样调整能够便于代码复用，不用同时保留矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>及矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>B</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">B^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>B</mi><mi>T</mi></msup><mi>D</mi><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>D</mi><mi>B</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mi>B</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">B^TDB=((DB)^TB)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1413em;vertical-align:-0.25em;"></span><span class="mopen">((</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span></p><p>一行处理完毕后，循环8次，将8行数据全部处理完，即完成了<code>8x8</code>一个块的变换。然后循环2次，把一个块(block)的2个<code>C4 Pack</code>通道也处理完毕，保存到<code>mTempBuffer</code>中，保存排布是这样的：</p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/3.png" alt="3"></p><h1>MatMul + Add 乘加计算</h1><p>单个tile的输入转换完毕后，可以准备乘加计算了。MNN源码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; srcUnit2; ++i) &#123;</span><br><span class="line">    <span class="keyword">auto</span> srcTemp = (<span class="keyword">const</span> <span class="keyword">float</span>*)(_srcOrigin + i * ic_4 * pack * xC * bytes);</span><br><span class="line">    <span class="keyword">auto</span> _dstFloatPtr = (<span class="keyword">float</span>*)(_dstOrigin + i * dc_4 * pack * xC * bytes);</span><br><span class="line">    <span class="keyword">auto</span> _weightFloatPtr = (<span class="keyword">const</span> <span class="keyword">float</span>*)(weight + i * mResource-&gt;mWeight-&gt;<span class="built_in">stride</span>(<span class="number">0</span>));</span><br><span class="line">    core-&gt;<span class="built_in">MNNPackC4ForMatMul_A</span>((<span class="keyword">float</span>*)gemmBuffer, &amp;srcTemp, info, el);</span><br><span class="line">    core-&gt;<span class="built_in">MNNPackedMatMul</span>(_dstFloatPtr, (<span class="keyword">float</span>*)gemmBuffer, _weightFloatPtr, parameters.<span class="built_in">data</span>(), <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面的转换图可知，<code>tile</code>中的数据排布成64行，每行24个<code>C4 Pack</code>，一共2个通道。</p><p>首先最外层for循环<code>srcUint2 = 8 x 8 = 64</code>，即逐行遍历。每行的处理包括<code>MNNPackC4ForMatMul_A</code> 及 <code>MNNPackedMatMul</code>两个步骤：</p><h2 id="MNNPackC4ForMatMul-A">MNNPackC4ForMatMul_A</h2><blockquote><p>此处代码为MNN release_1.1.7版本（为了便于跟上述逻辑连贯），后续版本AVX加速代码有更新(AVX有256位寄存器，可以从<code>C4 Pack</code> 升到<code>C8 pack</code> )</p></blockquote><p><code>_AVX_MNNPackC4ForMatMul_A</code>函数核心代码（AVX指令集加速版本）如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAIN_COMPUTE                        \</span></span><br><span class="line"><span class="meta">    auto s00 = _mm_loadu_ps(srcX + 0 * pOffset);  \</span></span><br><span class="line"><span class="meta">    auto s01 = _mm_loadu_ps(srcX + 1 * pOffset);  \</span></span><br><span class="line"><span class="meta">    auto s02 = _mm_loadu_ps(srcX + 2 * pOffset);  \</span></span><br><span class="line"><span class="meta">    auto s03 = _mm_loadu_ps(srcX + 3 * pOffset);  \</span></span><br><span class="line"><span class="meta">    auto s10 = _mm_loadu_ps(srcX + 4 * pOffset);  \</span></span><br><span class="line"><span class="meta">    auto s11 = _mm_loadu_ps(srcX + 5 * pOffset);  \</span></span><br><span class="line"><span class="meta">    auto s12 = _mm_loadu_ps(srcX + 6 * pOffset);  \</span></span><br><span class="line"><span class="meta">    auto s13 = _mm_loadu_ps(srcX + 7 * pOffset);  \</span></span><br><span class="line"><span class="meta">    auto s20 = _mm_loadu_ps(srcX + 8 * pOffset);  \</span></span><br><span class="line"><span class="meta">    auto s21 = _mm_loadu_ps(srcX + 9 * pOffset);  \</span></span><br><span class="line"><span class="meta">    auto s22 = _mm_loadu_ps(srcX + 10 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s23 = _mm_loadu_ps(srcX + 11 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s30 = _mm_loadu_ps(srcX + 12 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s31 = _mm_loadu_ps(srcX + 13 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s32 = _mm_loadu_ps(srcX + 14 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s33 = _mm_loadu_ps(srcX + 15 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s40 = _mm_loadu_ps(srcX + 16 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s41 = _mm_loadu_ps(srcX + 17 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s42 = _mm_loadu_ps(srcX + 18 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s43 = _mm_loadu_ps(srcX + 19 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s50 = _mm_loadu_ps(srcX + 20 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s51 = _mm_loadu_ps(srcX + 21 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s52 = _mm_loadu_ps(srcX + 22 * pOffset); \</span></span><br><span class="line"><span class="meta">    auto s53 = _mm_loadu_ps(srcX + 23 * pOffset); \</span></span><br><span class="line"><span class="meta">    _MM_TRANSPOSE4_PS(s00, s01, s02, s03);  \</span></span><br><span class="line"><span class="meta">    _MM_TRANSPOSE4_PS(s10, s11, s12, s13);  \</span></span><br><span class="line"><span class="meta">    _MM_TRANSPOSE4_PS(s20, s21, s22, s23);  \</span></span><br><span class="line"><span class="meta">    _MM_TRANSPOSE4_PS(s30, s31, s32, s33);  \</span></span><br><span class="line"><span class="meta">    _MM_TRANSPOSE4_PS(s40, s41, s42, s43);  \</span></span><br><span class="line"><span class="meta">    _MM_TRANSPOSE4_PS(s50, s51, s52, s53);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STORE_TEMP(i)                               \</span></span><br><span class="line"><span class="meta">    _mm_storeu_ps(dstX + 4 * (6 * i + 0), s##0##i); \</span></span><br><span class="line"><span class="meta">    _mm_storeu_ps(dstX + 4 * (6 * i + 1), s##1##i); \</span></span><br><span class="line"><span class="meta">    _mm_storeu_ps(dstX + 4 * (6 * i + 2), s##2##i); \</span></span><br><span class="line"><span class="meta">    _mm_storeu_ps(dstX + 4 * (6 * i + 3), s##3##i); \</span></span><br><span class="line"><span class="meta">    _mm_storeu_ps(dstX + 4 * (6 * i + 4), s##4##i); \</span></span><br><span class="line"><span class="meta">    _mm_storeu_ps(dstX + 4 * (6 * i + 5), s##5##i);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; lC4; ++x) &#123;</span><br><span class="line">    <span class="keyword">auto</span> srcX = source + x * <span class="number">4</span> * eReal;</span><br><span class="line">    <span class="keyword">auto</span> dstX = dest + x * eDest * <span class="number">4</span>;</span><br><span class="line">    MAIN_COMPUTE;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">STORE_TEMP</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">STORE_TEMP</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">STORE_TEMP</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">STORE_TEMP</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用图展示如下：</p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/4.png" alt="4"></p><p>即属于同一个输入通道的24个元素排在一起，两个<code>C4 Pack</code>通道处理完就是下面这样：</p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/5.png" alt="5"></p><h2 id="MNNPackedMatMul">MNNPackedMatMul</h2><blockquote><p>同样是AVX加速版本，这里贴出的是release_1.2.3版本，与1.1.7版本相比，逻辑没有变化，只是函数名由<code>_AVX_MNNPackedMatMul_24</code>改为<code>_AVX_MNNPackedMatMul_Main</code></p></blockquote><p><code>_AVX_MNNPackedMatMul_Main</code>函数代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT_MAIN_24_4                                  \</span></span><br><span class="line"><span class="meta">    auto s0  = LOAD8(A + 0 * 24);             \</span></span><br><span class="line"><span class="meta">    auto s1  = LOAD8(A + 0 * 24 + 8);         \</span></span><br><span class="line"><span class="meta">    auto s2  = LOAD8(A + 0 * 24 + 16);        \</span></span><br><span class="line"><span class="meta">    auto w0  = BROAD_LOAD(weight + 0 * 4 + 0); \</span></span><br><span class="line"><span class="meta">    auto z0  = _mm256_mul_ps(s0, w0);                   \</span></span><br><span class="line"><span class="meta">    auto z1  = _mm256_mul_ps(s1, w0);                   \</span></span><br><span class="line"><span class="meta">    auto z2  = _mm256_mul_ps(s2, w0);                   \</span></span><br><span class="line"><span class="meta">    auto w1  = BROAD_LOAD(weight + 0 * 4 + 1); \</span></span><br><span class="line"><span class="meta">    auto z3  = _mm256_mul_ps(s0, w1);                   \</span></span><br><span class="line"><span class="meta">    auto z4  = _mm256_mul_ps(s1, w1);                   \</span></span><br><span class="line"><span class="meta">    auto z5  = _mm256_mul_ps(s2, w1);                   \</span></span><br><span class="line"><span class="meta">    auto w2  = BROAD_LOAD(weight + 0 * 4 + 2); \</span></span><br><span class="line"><span class="meta">    auto z6  = _mm256_mul_ps(s0, w2);                   \</span></span><br><span class="line"><span class="meta">    auto z7  = _mm256_mul_ps(s1, w2);                   \</span></span><br><span class="line"><span class="meta">    auto z8  = _mm256_mul_ps(s2, w2);                   \</span></span><br><span class="line"><span class="meta">    auto w3  = BROAD_LOAD(weight + 0 * 4 + 3); \</span></span><br><span class="line"><span class="meta">    auto z9  = _mm256_mul_ps(s0, w3);                   \</span></span><br><span class="line"><span class="meta">    auto z10 = _mm256_mul_ps(s1, w3);                   \</span></span><br><span class="line"><span class="meta">    auto z11 = _mm256_mul_ps(s2, w3);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMPUTE_24_4                                \</span></span><br><span class="line"><span class="meta">    s0  = LOAD8(A + sy * 24);             \</span></span><br><span class="line"><span class="meta">    s1  = LOAD8(A + sy * 24 + 8);         \</span></span><br><span class="line"><span class="meta">    s2  = LOAD8(A + sy * 24 + 16);        \</span></span><br><span class="line"><span class="meta">    w0  = BROAD_LOAD(weight + sy * 4 + 0); \</span></span><br><span class="line"><span class="meta">    z0  = MNNAVXFMA(s0, w0, z0);                    \</span></span><br><span class="line"><span class="meta">    z1  = MNNAVXFMA(s1, w0, z1);                    \</span></span><br><span class="line"><span class="meta">    z2  = MNNAVXFMA(s2, w0, z2);                    \</span></span><br><span class="line"><span class="meta">    w1  = BROAD_LOAD(weight + sy * 4 + 1); \</span></span><br><span class="line"><span class="meta">    z3  = MNNAVXFMA(s0, w1, z3);                    \</span></span><br><span class="line"><span class="meta">    z4  = MNNAVXFMA(s1, w1, z4);                    \</span></span><br><span class="line"><span class="meta">    z5  = MNNAVXFMA(s2, w1, z5);                    \</span></span><br><span class="line"><span class="meta">    w2  = BROAD_LOAD(weight + sy * 4 + 2); \</span></span><br><span class="line"><span class="meta">    z6  = MNNAVXFMA(s0, w2, z6);                    \</span></span><br><span class="line"><span class="meta">    z7  = MNNAVXFMA(s1, w2, z7);                    \</span></span><br><span class="line"><span class="meta">    z8  = MNNAVXFMA(s2, w2, z8);                    \</span></span><br><span class="line"><span class="meta">    w3  = BROAD_LOAD(weight + sy * 4 + 3); \</span></span><br><span class="line"><span class="meta">    z9  = MNNAVXFMA(s0, w3, z9);                    \</span></span><br><span class="line"><span class="meta">    z10 = MNNAVXFMA(s1, w3, z10);                   \</span></span><br><span class="line"><span class="meta">    z11 = MNNAVXFMA(s2, w3, z11);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TYPE&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _AVX_MNNPackedMatMul_Main(TYPE* C, <span class="keyword">const</span> TYPE* A, <span class="keyword">const</span> TYPE* B, <span class="keyword">const</span> <span class="keyword">size_t</span>* parameter) &#123;</span><br><span class="line">    <span class="keyword">auto</span> h            = parameter[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">auto</span> l            = parameter[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">auto</span> cStride      = parameter[<span class="number">3</span>] / <span class="built_in"><span class="keyword">sizeof</span></span>(TYPE);</span><br><span class="line">    <span class="keyword">auto</span> bExtraStride = parameter[<span class="number">5</span>] / <span class="built_in"><span class="keyword">sizeof</span></span>(TYPE);</span><br><span class="line">    <span class="keyword">auto</span> bStride      = bExtraStride + l * <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">auto</span> hC4          = <span class="built_in">UP_DIV</span>(h, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; hC4; ++y) &#123;</span><br><span class="line">        <span class="keyword">auto</span> weight = B + y * bStride;</span><br><span class="line">        <span class="keyword">auto</span> dst    = C + (y / <span class="number">2</span>) * cStride + <span class="number">4</span> * (y % <span class="number">2</span>);</span><br><span class="line">        INIT_MAIN_24_4;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sy = <span class="number">1</span>; sy &lt; l; ++sy) &#123;</span><br><span class="line">            COMPUTE_24_4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">TRANPOSE_SAVE</span>(<span class="number">0</span>, <span class="number">0</span>, z0, z3, z6, z9);</span><br><span class="line">        <span class="built_in">TRANPOSE_SAVE</span>(<span class="number">1</span>, <span class="number">0</span>, z0, z3, z6, z9);</span><br><span class="line">        <span class="built_in">TRANPOSE_SAVE</span>(<span class="number">0</span>, <span class="number">1</span>, z1, z4, z7, z10);</span><br><span class="line">        <span class="built_in">TRANPOSE_SAVE</span>(<span class="number">1</span>, <span class="number">1</span>, z1, z4, z7, z10);</span><br><span class="line">        <span class="built_in">TRANPOSE_SAVE</span>(<span class="number">0</span>, <span class="number">2</span>, z2, z5, z8, z11);</span><br><span class="line">        <span class="built_in">TRANPOSE_SAVE</span>(<span class="number">1</span>, <span class="number">2</span>, z2, z5, z8, z11);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面详细看下计算过程：</p><p>首先看下将要参与运算的数据排布形式是怎么样的，我们将上面<strong>权重变换</strong>后（取<code>8x8</code>中的一个位置，其余循环64次即可）的图 和 <strong>输入变换</strong>后（取一个<code>tile</code>中<code>64 x 24 x 2</code>中的一行，即<code>24 x 2</code> （按照<code>C4 Pack</code>展开后就是<code>24 x 8</code>），其余循环64次即可）的图放在一起：</p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/6.png" alt="6"></p><p>乘加工作就是要在上面的两个图展开。为了解释起来更简单，再从上面权重图中<strong>拿1个<code>8 x C4 Pack</code>（即：4个卷积核）来</strong>，至于所有的4个<code>8 x C4 Pack</code>（即：16个卷积核）卷积核循环4次处理即可。取出来的<code>Mul+Add</code>运算图如下：</p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/7.png" alt="7"></p><p>上图中的计算流程归纳一下：</p><ul><li><ol><li><code>MUL</code>操作时，以上图中两个黑色框为计算单元。输入的黑色框中每次取一个值出来，与权重第一行黑色框中4个值依次相乘，并将结果pack到一起，直到24个值全部计算完成，输出一行<code>24 (x 4)</code>。</li></ol></li><li><ol start="2"><li>输入更新到下一个通道24个值，权重也下移一行，重复8次上述运算。得到<code>8 x 24 (x 4)</code>。</li></ol></li><li><ol start="3"><li>将8行数据对应位置累加(即：同一个卷积核的不同通道累加)，得到24个点一个<code>C4 Pack</code>的卷积结果：<code>24 (x 4)</code>。</li></ol></li><li><ol start="4"><li>卷积核有16个，即：4个<code>C4 Pack</code>，循环4次，将所有卷积核处理完，得到24个点所有卷积核的卷积结果：<code>24 (x 4) x 4</code></li></ol></li></ul><p>至此，一个<code>tile</code>的<strong>一行</strong>数据处理完成，循环64次，就把整个<code>tile</code>的数据全部计算完成。并仍旧按照64 × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Green"><mn>24</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Green}24</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Green;">24</span></span></span></span> × (× <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Blue"><mn>4</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Blue}4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Blue;">4</span></span></span></span>) × <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Red"><mn>4</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Red}4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Red;">4</span></span></span></span>（这里把<code>C4 Pack</code>的通道数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Red"><mn>4</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Red}4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Red;">4</span></span></span></span> 放到最后，是为了便于理解其跟Pack 的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Blue"><mn>4</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Blue}4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Blue;">4</span></span></span></span>是同一维度的，虽然在数据排布上，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Red"><mn>4</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Red}4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Red;">4</span></span></span></span>应该在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="Green"><mn>24</mn></mstyle></mrow><annotation encoding="application/x-tex">\color{Green}24</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord" style="color:Green;">24</span></span></span></span>之前）的方式放入内存中。一个tile全部处理完后的排布如图：</p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/8.png" alt="8"></p><p>为了直观方便对比，我们把乘加前和乘加后的图放在一起再看一遍：</p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/3.png" alt="3"></p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/9.png" alt="9"></p><h1>输出变换</h1><p>单个<code>tile</code>的<code>MatMul + ADD</code> 计算完成后，需要根据输出变换矩阵计算得到最终的卷积输出结果。其过程仍旧和输入变换类似，核心代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; dc_4; ++z) &#123;</span><br><span class="line">    <span class="keyword">auto</span> dstZAddr = dstStart + z * dstZStep * bytes;</span><br><span class="line">    <span class="keyword">auto</span> srcZ     = srcXi + z * srcZStep * bytes;</span><br><span class="line">    <span class="comment">// Transform</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; srcUnit; ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> srcFloatPtr = (<span class="keyword">const</span> <span class="keyword">float</span>*)(srcZ + i * unitStep * bytes);</span><br><span class="line">        <span class="keyword">auto</span> dstFloatPtr = (<span class="keyword">float</span>*)(midBuffer0 + i * dstUnit * pack * bytes);</span><br><span class="line">        <span class="built_in">mDestTransform</span>(srcFloatPtr, dstFloatPtr, srcUnit * unitStep, pack);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ey; ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> srcFloatPtr = (<span class="keyword">const</span> <span class="keyword">float</span>*)(midBuffer0 + i * pack * bytes);</span><br><span class="line">        <span class="keyword">auto</span> dstFloatPtr = (<span class="keyword">float</span>*)(dstZAddr + i * pack * ow * bytes);</span><br><span class="line">        <span class="built_in">mDestTransform</span>(srcFloatPtr, dstFloatPtr, pack * dstUnit, pack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码可以看到，依旧是执行了两次<code>mDestTransform</code>函数，同输入变换一样，MNN对输出变换也做了如下的等价调整：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>A</mi><mi>T</mi></msup><mi>O</mi><mi>A</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mi>O</mi><mi>T</mi></msup><mi>A</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mi>A</mi></mrow><annotation encoding="application/x-tex">A^TOA=(O^TA)^TA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1413em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal">A</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal">A</span></span></span></span></span></p><p><code>mDestTransform</code>函数同样基于<code>unit</code>而有不同的实现，这里贴出<code>8 x 6</code>的实现：</p><blockquote><p>同样为了保持逻辑连贯性，此处采用Vec4版本实现，AVX可以使用Vec8版本实现</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _destTransformUnit8x6(<span class="keyword">const</span> <span class="keyword">float</span>* srcBlock, <span class="keyword">float</span>* dstStart, <span class="keyword">size_t</span> srcStep, <span class="keyword">size_t</span> dstStep) &#123;</span><br><span class="line">    Vec4 s0 = Vec4::<span class="built_in">load</span>(srcBlock + <span class="number">0</span> * srcStep);</span><br><span class="line">    Vec4 s1 = Vec4::<span class="built_in">load</span>(srcBlock + <span class="number">1</span> * srcStep);</span><br><span class="line">    Vec4 s2 = Vec4::<span class="built_in">load</span>(srcBlock + <span class="number">2</span> * srcStep);</span><br><span class="line">    Vec4 s3 = Vec4::<span class="built_in">load</span>(srcBlock + <span class="number">3</span> * srcStep);</span><br><span class="line">    Vec4 s4 = Vec4::<span class="built_in">load</span>(srcBlock + <span class="number">4</span> * srcStep);</span><br><span class="line">    Vec4 s5 = Vec4::<span class="built_in">load</span>(srcBlock + <span class="number">5</span> * srcStep);</span><br><span class="line">    Vec4 s6 = Vec4::<span class="built_in">load</span>(srcBlock + <span class="number">6</span> * srcStep);</span><br><span class="line">    Vec4 s7 = Vec4::<span class="built_in">load</span>(srcBlock + <span class="number">7</span> * srcStep);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> m0 = s0 + s1 + s2 + s3 + s4 + s5 + s6;</span><br><span class="line">    <span class="keyword">auto</span> m1 = (s1 - s2) + (s3 - s4) * <span class="number">2.f</span> + (s5 - s6) * <span class="number">3.f</span>;</span><br><span class="line">    <span class="keyword">auto</span> m2 = (s1 + s2) + (s3 + s4) * <span class="number">4.f</span> + (s5 + s6) * <span class="number">9.f</span>;</span><br><span class="line">    <span class="keyword">auto</span> m3 = (s1 - s2) + (s3 - s4) * <span class="number">8.f</span> + (s5 - s6) * <span class="number">27.f</span>;</span><br><span class="line">    <span class="keyword">auto</span> m4 = (s1 + s2) + (s3 + s4) * <span class="number">16.f</span> + (s5 + s6) * <span class="number">81.f</span>;</span><br><span class="line">    <span class="keyword">auto</span> m5 = (s1 - s2) + (s3 - s4) * <span class="number">32.f</span> + (s5 - s6) * <span class="number">243.f</span> + s7;</span><br><span class="line"></span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">0</span> * dstStep, m0);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">1</span> * dstStep, m1);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">2</span> * dstStep, m2);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">3</span> * dstStep, m3);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">4</span> * dstStep, m4);</span><br><span class="line">    Vec4::<span class="built_in">save</span>(dstStart + <span class="number">5</span> * dstStep, m5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的转置操作实际隐藏在<code>load</code>操作中，因为<code>srcStep=srcUnit * unitStep</code>，会导致跳行读取。</p><p>一次<code>mDestTransform</code>处理一行（8个<code>C4 Pack</code>），循环<code>srcUnit=8</code>次得到<code>8 x 6 x (x 4) </code>的中间结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>O</mi><mi>T</mi></msup><mi>A</mi></mrow><annotation encoding="application/x-tex">O^TA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal">A</span></span></span></span>，再循环<code>ey=6</code>次得到<code>6 x 6 x (x 4)</code>的最终结果。</p><p>然后循环4次，把4个通道也处理完毕。然后循环24次，把一个tile处理完毕。然后处理其他tile，58个tile全部处理完，则完整整个输入的卷积操作。</p><p><img src="/2021/11/16/AI-Algorithm-5-WinogradInMnn/9.png" alt="9.png"></p><h1>PostTransform (Bias, Relu, Relu6)</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MNN_CONCURRENCY_BEGIN</span>(tId, threadNumber) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> dy=(<span class="keyword">int</span>)tId; dy &lt; dc_4; dy += threadNumber) &#123;</span><br><span class="line">        <span class="keyword">auto</span> dataFloatPtr = (<span class="keyword">float</span>*)(dstOrigin + ow * oh * batch * dy * pack * bytes);</span><br><span class="line">        <span class="keyword">auto</span> biasFloatPtr = (<span class="keyword">const</span> <span class="keyword">float</span>*)(bias + pack * dy * bytes);</span><br><span class="line">        core-&gt;<span class="built_in">MNNAxByClampBroadcastUnit</span>(dataFloatPtr, dataFloatPtr, biasFloatPtr, ow * oh * batch, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,  mPostParameters.<span class="built_in">data</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">MNN_CONCURRENCY_END</span>();</span><br></pre></td></tr></table></figure><p><code>core-&gt;MNNAxByClampBroadcastUnit</code>的AVX实现为<code>_AVX_MNNAxByClampBroadcastUnit</code>函数，代码如下：</p><blockquote><p>这里逻辑比较简单，就不放之前版本的<code>C4 Pack</code>实现了，这里是<code>C8 Pack</code>实现</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _AVX_MNNAxByClampBroadcastUnit(<span class="keyword">float</span>* C, <span class="keyword">const</span> <span class="keyword">float</span>* A, <span class="keyword">const</span> <span class="keyword">float</span>* B, <span class="keyword">size_t</span> width, <span class="keyword">size_t</span> cStride, <span class="keyword">size_t</span> aStride, <span class="keyword">size_t</span> height, <span class="keyword">const</span> <span class="keyword">float</span>* parameters) &#123;</span><br><span class="line">    <span class="keyword">auto</span> minF = _mm256_broadcast_ss(parameters + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">auto</span> maxF = _mm256_broadcast_ss(parameters + <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; ++y) &#123;</span><br><span class="line">        <span class="keyword">auto</span> a = A + aStride * y;</span><br><span class="line">        <span class="keyword">auto</span> b = B + PACK_UNIT * y;</span><br><span class="line">        <span class="keyword">auto</span> bv = _mm256_loadu_ps(b);</span><br><span class="line">        <span class="keyword">auto</span> c = C + cStride * y;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; ++x) &#123;</span><br><span class="line">            <span class="keyword">auto</span> av = _mm256_loadu_ps(a);</span><br><span class="line">            <span class="keyword">auto</span> cv = _mm256_add_ps(av, bv);</span><br><span class="line">            cv = _mm256_min_ps(cv, maxF);</span><br><span class="line">            cv = _mm256_max_ps(cv, minF);</span><br><span class="line">            _mm256_storeu_ps(c, cv);</span><br><span class="line">            a += PACK_UNIT;</span><br><span class="line">            c += PACK_UNIT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每<code>C8 Pack</code>统一加上一组<code>bias</code>，再根据<code>minF/maxF</code>(在模型初始化时就根据是relu还是relu6来确定，放到<code>mPostParameters</code>中了)去处理激活层。</p><h1>致谢</h1><p>文章主体框架参考自<a href="https://github.com/yizhaoyanbo">东哥</a>的MNN源码解读的内部分享，加上了自己的一些看法。有幸被看到的话，希望能给点个赞~~</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> MNN </tag>
            
            <tag> Winograd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [4]：Winograd算法原理</title>
      <link href="/2021/11/16/AI-Algorithm-4-Winograd/"/>
      <url>/2021/11/16/AI-Algorithm-4-Winograd/</url>
      
        <content type="html"><![CDATA[<h1>简介</h1><p>Winograd算法起源于1980年，作者Shmuel Winograd 在文章<a href="https://epubs.siam.org/doi/abs/10.1137/0209021">《On multiplication of polynomials modulo a polynomial》</a>中提出的减少FIR滤波器计算量的一个算法。他指出，对于输出个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>，参数个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>的FIR滤波器，不需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">m×r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>次乘法计算，而只需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mo>+</mo><mi>r</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">u(F(m,r))=m+r-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">u</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>次乘法计算即可。</p><p>后来，有人发现此算法可以用来优化加速CNN网络的卷积计算<a href="https://arxiv.org/pdf/1509.09308.pdf">《Fast Algorithms for Convolutional Neural Networks》</a>，从此Winograd算法被广泛应用于各推理框架中。</p><h1>原理</h1><h2 id="1D-Winograd算法">1D Winograd算法</h2><p>1维卷积 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(2,3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span> 为例，输入信号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>d</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>d</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>d</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>d</mi><mn>3</mn></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">d=[d_0,d_1,d_2,d_3]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，卷积核<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>g</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>g</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>g</mi><mn>2</mn></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">g=[g_0,g_1,g_2]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，则卷积可以写成如下矩阵乘法形式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>3</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>g</mi><mn>0</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>g</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>g</mi><mn>2</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mn>0</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mn>1</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">F(2,3)=\begin{bmatrix}   d_0 &amp; d_1 &amp; d_2 \\   d_1 &amp; d_2 &amp; d_3\end{bmatrix} \begin{bmatrix}   g_0 \\ g_1 \\ g_2 \\\end{bmatrix} = \begin{bmatrix}   r_0 \\ r_1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.25em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.397em;"><span class="pstrut" style="height:3.155em;"></span><span style="height:0.016em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="0.016em" style="width:0.6667em" viewbox="0 0 666.67 16" preserveaspectratio="xMinYMin"><path d="M319 0 H403 V16 H319z M319 0 H403 V16 H319z"/></svg></span></span><span style="top:-4.05em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.25em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.397em;"><span class="pstrut" style="height:3.155em;"></span><span style="height:0.016em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="0.016em" style="width:0.6667em" viewbox="0 0 666.67 16" preserveaspectratio="xMinYMin"><path d="M263 0 H347 V16 H263z M263 0 H347 V16 H263z"/></svg></span></span><span style="top:-4.05em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>如果这个计算过程使用普通的矩阵乘法，一共需要 <em><strong>6 次乘法 和 4次加法</strong></em>。</p><p>但是，我们仔细观察一下，卷积运算中输入信号转换得到的矩阵不是任意矩阵，其有规律的分布着大量的重复元素，例如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">d_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">d_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。Winograd做了如下变换：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>3</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>g</mi><mn>0</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>g</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>g</mi><mn>2</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mn>1</mn></msub><mo>+</mo><msub><mi>m</mi><mn>2</mn></msub><mo>+</mo><mi>m</mi><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mn>2</mn></msub><mo>−</mo><msub><mi>m</mi><mn>3</mn></msub><mo>−</mo><msub><mi>m</mi><mn>4</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">F(2,3)=\begin{bmatrix}   d_0 &amp; d_1 &amp; d_2 \\   d_1 &amp; d_2 &amp; d_3\end{bmatrix} \begin{bmatrix}   g_0 \\ g_1 \\ g_2 \\\end{bmatrix} = \begin{bmatrix}   m_1+m_2+m3 \\ m_2-m_3-m_4\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.25em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.397em;"><span class="pstrut" style="height:3.155em;"></span><span style="height:0.016em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="0.016em" style="width:0.6667em" viewbox="0 0 666.67 16" preserveaspectratio="xMinYMin"><path d="M319 0 H403 V16 H319z M319 0 H403 V16 H319z"/></svg></span></span><span style="top:-4.05em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.25em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.397em;"><span class="pstrut" style="height:3.155em;"></span><span style="height:0.016em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="0.016em" style="width:0.6667em" viewbox="0 0 666.67 16" preserveaspectratio="xMinYMin"><path d="M263 0 H347 V16 H263z M263 0 H347 V16 H263z"/></svg></span></span><span style="top:-4.05em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span><span class="mord">3</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>其中，</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>d</mi><mn>0</mn></msub><mo>−</mo><msub><mi>d</mi><mn>2</mn></msub><mo stretchy="false">)</mo><msub><mi>g</mi><mn>0</mn></msub><mspace width="1em"><msub><mi>m</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>d</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mfrac><mrow><msub><mi>g</mi><mn>0</mn></msub><mo>+</mo><msub><mi>g</mi><mn>1</mn></msub><mo>+</mo><msub><mi>g</mi><mn>2</mn></msub></mrow><mn>2</mn></mfrac><mspace linebreak="newline"></mspace><msub><mi>m</mi><mn>4</mn></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>d</mi><mn>1</mn></msub><mo>−</mo><msub><mi>d</mi><mn>3</mn></msub><mo stretchy="false">)</mo><msub><mi>g</mi><mn>2</mn></msub><mspace width="1em"><msub><mi>m</mi><mn>3</mn></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>d</mi><mn>2</mn></msub><mo>−</mo><msub><mi>d</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mfrac><mrow><msub><mi>g</mi><mn>0</mn></msub><mo>−</mo><msub><mi>g</mi><mn>1</mn></msub><mo>+</mo><msub><mi>g</mi><mn>2</mn></msub></mrow><mn>2</mn></mfrac></mspace></mspace></mrow><annotation encoding="application/x-tex">m_1=(d_0-d_2)g_0 \quad m_2=(d_1+d_2)\frac{g_0+g_1+g_2}{2} \\m_4=(d_1-d_3)g_2 \quad m_3=(d_2-d_1)\frac{g_0-g_1+g_2}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.9463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.9463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>在CNN的推理阶段，卷积核上的元素是固定的，所以上式中和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>相关的式子可以提前在模型初始化阶段算好，整个推理阶段只用计算一次，因此可以忽略。所以这里一共需要 <em><strong>4次乘法 和 8次加法</strong></em>。</p><p>上面其实就是<em>1D的Winograd算法</em>，我们将上面的计算过程写成矩阵的形式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Y</mi><mo>=</mo><msup><mi>A</mi><mi>T</mi></msup><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><mi>g</mi><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mi>d</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Y=A^T[(Gg)\odot(B^Td)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1413em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1413em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mclose">)]</span></span></span></span></span></p><p>其中，</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊙</mo></mrow><annotation encoding="application/x-tex">\odot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">⊙</span></span></span></span>表示element-wise multiplication（Hadamard product），即对应位置相乘操作；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>表示卷积核；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>表示输入特征图；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span>表示卷积核变换矩阵，尺寸为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">(u+k-1)×k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>B</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">B^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>表示输入变换矩阵，尺寸为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(u+k-1)×(u+k-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">A^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>表示输出变换矩阵，尺寸为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>u</mi></mrow><annotation encoding="application/x-tex">(u+k-1)×u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span>；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span>表示输出尺寸，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>表示卷积核尺寸，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><mo>=</mo><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">su=(u+k-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>表示输入尺寸。<br>各矩阵具体值如下：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msup><mi>B</mi><mi>T</mi></msup><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>G</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msup><mi>A</mi><mi>T</mi></msup><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>g</mi><mo>=</mo><msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>g</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>g</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>g</mi><mn>2</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mi>T</mi></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>d</mi><mo>=</mo><msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mn>3</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mi>T</mi></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp; B^T=\begin{bmatrix}   1 &amp; 0 &amp; -1 &amp; 0 \\   0 &amp; 1 &amp; 1 &amp; 0 \\   0 &amp; -1 &amp; 1 &amp; 0 \\   0 &amp; 1 &amp; 0 &amp; -1 \end{bmatrix} \\&amp; G=\begin{bmatrix}1 &amp; 0 &amp; 0 \\\frac{1}{2} &amp; \frac{1}{2} &amp; \frac{1}{2} \\\frac{1}{2} &amp; -\frac{1}{2} &amp; \frac{1}{2} \\0 &amp; 0 &amp; 1 \\\end{bmatrix} \\ &amp; A^T = \begin{bmatrix}   1 &amp; 1 &amp; 1 &amp; 0 \\   0 &amp; 1 &amp; -1 &amp; -1 \\\end{bmatrix} \\&amp; g = \begin{bmatrix}&amp; g_0 &amp; g_1 &amp; g_2\end{bmatrix}^T \\&amp; d = \begin{bmatrix}d_0 &amp; d_1 &amp; d_2 &amp; d_3\end{bmatrix}^T\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:16.3928em;vertical-align:-7.9464em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.4464em;"><span style="top:-10.4515em;"><span class="pstrut" style="height:4.6551em;"></span><span class="mord"></span></span><span style="top:-5.3463em;"><span class="pstrut" style="height:4.6551em;"></span><span class="mord"></span></span><span style="top:-1.4412em;"><span class="pstrut" style="height:4.6551em;"></span><span class="mord"></span></span><span style="top:0.89em;"><span class="pstrut" style="height:4.6551em;"></span><span class="mord"></span></span><span style="top:2.6313em;"><span class="pstrut" style="height:4.6551em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.9464em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.4464em;"><span style="top:-10.4515em;"><span class="pstrut" style="height:4.6551em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.711em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.858em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="1.216em" style="width:0.6667em" viewbox="0 0 666.67 1216" preserveaspectratio="xMinYMin"><path d="M319 0 H403 V1216 H319z M319 0 H403 V1216 H319z"/></svg></span></span><span style="top:-4.7111em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.711em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.858em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="1.216em" style="width:0.6667em" viewbox="0 0 666.67 1216" preserveaspectratio="xMinYMin"><path d="M263 0 H347 V1216 H263z M263 0 H347 V1216 H263z"/></svg></span></span><span style="top:-4.7111em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-5.3463em;"><span class="pstrut" style="height:4.6551em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.711em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.858em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="1.216em" style="width:0.6667em" viewbox="0 0 666.67 1216" preserveaspectratio="xMinYMin"><path d="M319 0 H403 V1216 H319z M319 0 H403 V1216 H319z"/></svg></span></span><span style="top:-4.7111em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6551em;"><span style="top:-4.8151em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.4049em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.2049em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1551em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6551em;"><span style="top:-4.8151em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.4049em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.2049em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1551em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6551em;"><span style="top:-4.8151em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.4049em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.2049em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1551em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.711em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.858em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="1.216em" style="width:0.6667em" viewbox="0 0 666.67 1216" preserveaspectratio="xMinYMin"><path d="M263 0 H347 V1216 H263z M263 0 H347 V1216 H263z"/></svg></span></span><span style="top:-4.7111em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-1.4412em;"><span class="pstrut" style="height:4.6551em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span><span style="top:0.89em;"><span class="pstrut" style="height:4.6551em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.85em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0812em;"><span style="top:-3.3029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span><span style="top:2.6313em;"><span class="pstrut" style="height:4.6551em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0812em;"><span style="top:-3.3029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.9464em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>B</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">B^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">A^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>三个变换矩阵的推导原理及过程可以参考：<a href="https://zhuanlan.zhihu.com/p/102351953">详解Winograd变换矩阵生成原理</a> 。当然，github有个工具<a href="https://github.com/andravin/wincnn">wincnn</a>可以直接帮我们计算。</p><h2 id="2D-Winograd算法">2D Winograd算法</h2><p>将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(2,3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>扩展到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>×</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(2×2, 3×3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>，形象的展示如下图：</p><p><img src="/2021/11/16/AI-Algorithm-4-Winograd/1.png" alt="1"></p><p>上图中最后得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mn>0</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>M</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">M_0...M_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的操作为4次矩阵加法和4次矩阵乘法，由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mn>0</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>M</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">M_0...M_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>R</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>R</mi><mn>1</mn></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">[R_0, R_1]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>为4次矩阵加法，同样<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>矩阵的转换的计算量忽略不计。</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>0...3</mn></msub></mrow><annotation encoding="application/x-tex">K_{0...3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0...3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之间的4次矩阵加法， 每次实际为4次加法（注意不要被上面扩展后的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>矩阵划分的小方块中6个元素所迷惑，其中有重复的元素），共<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn><mo>=</mo><mn>16</mn></mrow><annotation encoding="application/x-tex">4×4=16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">16</span></span></span></span>次加法；</li><li>4次矩阵乘法可以转换为4次 <em><strong>1D Winograd</strong></em> 来计算，每次 <em><strong>1D Winograd</strong></em> 计算中有4次乘法，8次加法，共<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn><mo>=</mo><mn>16</mn></mrow><annotation encoding="application/x-tex">4×4=16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">16</span></span></span></span>次乘法，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>8</mn><mo>=</mo><mn>32</mn></mrow><annotation encoding="application/x-tex">4×8=32</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">32</span></span></span></span>次加法；</li><li>最后<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mn>0</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>M</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">M_0...M_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之间的4次矩阵加法，由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>矩阵的尺寸为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2×1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，所以共<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>2</mn><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">4×2=8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span></span></span></span>次加法；<br>综上，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>×</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(2×2, 3×3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>的Winograd算法共 <em><strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="OrangeRed"><mn>16</mn><mtext>次乘法和</mtext><mn>56</mn><mtext>次加法</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{OrangeRed}16 次乘法 和 56次加法</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord" style="color:OrangeRed;">16</span><span class="mord cjk_fallback" style="color:OrangeRed;">次乘法和</span><span class="mord" style="color:OrangeRed;">56</span><span class="mord cjk_fallback" style="color:OrangeRed;">次加法</span></span></span></span></strong></em>，如果使用常规卷积运算，则需要 <em><strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="OrangeRed"><mn>36</mn><mtext>次乘法和</mtext><mn>32</mn><mtext>次加法</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{OrangeRed}36 次乘法 和 32次加法</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord" style="color:OrangeRed;">36</span><span class="mord cjk_fallback" style="color:OrangeRed;">次乘法和</span><span class="mord" style="color:OrangeRed;">32</span><span class="mord cjk_fallback" style="color:OrangeRed;">次加法</span></span></span></span></strong></em></li></ul><p>上面的计算过程写成矩阵的形式如下</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Y</mi><mo>=</mo><msup><mi>A</mi><mi>T</mi></msup><mo stretchy="false">[</mo><mo stretchy="false">[</mo><mi>G</mi><mi>g</mi><msup><mi>G</mi><mi>T</mi></msup><mo stretchy="false">]</mo><mo>⊙</mo><mo stretchy="false">[</mo><msup><mi>B</mi><mi>T</mi></msup><mi>d</mi><mi>B</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">Y = A^T[[GgG^T]\odot[B^TdB]]A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1413em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[[</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1413em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">]]</span><span class="mord mathnormal">A</span></span></span></span></span></p><h2 id="1D-到-2D的-公式推导">1D 到 2D的 公式推导</h2><blockquote><p>约定：大写字母或小写字母加上箭头均代表矩阵或向量，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">K_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>d</mi><mn>0</mn></msub><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{d_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3664em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>均表示输入矩阵的第一行，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">W_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>k</mi><mn>0</mn></msub><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{k_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3664em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>均表示卷积核的第一行</p><p>这里沿用2D Winograd推导中的字母表示，最后会转为1D Winograd推导中的字母表示</p></blockquote><p>首先对上述公式进行重排，输出为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2×2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>矩阵：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>R</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>R</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">[</mo><msub><mi>M</mi><mn>0</mn></msub><mo>+</mo><msub><mi>M</mi><mn>1</mn></msub><mo>+</mo><mi>M</mi><mn>2</mn><mo separator="true">,</mo><msub><mi>M</mi><mn>1</mn></msub><mo>−</mo><msub><mi>M</mi><mn>2</mn></msub><mo>−</mo><mi>M</mi><mn>3</mn><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mo>=</mo><mo stretchy="false">[</mo><msub><mi>M</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>M</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>M</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>M</mi><mn>3</mn></msub><mo stretchy="false">]</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>M</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>M</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>M</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>M</mi><mn>3</mn></msub><mo stretchy="false">]</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">[R_0,R_1] = [M_0+M_1+M2, M_1-M_2-M3] \\= [M_0,M_1,M_2,M_3]\begin{bmatrix}1 &amp; 0 \\1 &amp; 1 \\1 &amp; -1 \\0 &amp; -1\end{bmatrix} = [M_0,M_1,M_2,M_3]A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord">3</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8001em;vertical-align:-2.15em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.711em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.858em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="1.216em" style="width:0.6667em" viewbox="0 0 666.67 1216" preserveaspectratio="xMinYMin"><path d="M319 0 H403 V1216 H319z M319 0 H403 V1216 H319z"/></svg></span></span><span style="top:-4.7111em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.711em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.858em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="1.216em" style="width:0.6667em" viewbox="0 0 666.67 1216" preserveaspectratio="xMinYMin"><path d="M263 0 H347 V1216 H263z M263 0 H347 V1216 H263z"/></svg></span></span><span style="top:-4.7111em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord mathnormal">A</span></span></span></span></span></p><p>结合上面计算代入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">M_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>得下式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">[</mo><msub><mi>R</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>R</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo>=</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">[</mo><msup><mi>A</mi><mi>T</mi></msup><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><msub><mi>W</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">(</mo><msub><mi>K</mi><mn>0</mn></msub><mo>−</mo><msub><mi>K</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo separator="true">,</mo><msup><mi>A</mi><mi>T</mi></msup><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><mfrac><mrow><msub><mi>W</mi><mn>0</mn></msub><mo>+</mo><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>W</mi><mn>2</mn></msub></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">(</mo><msub><mi>K</mi><mn>1</mn></msub><mo>+</mo><msub><mi>K</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msup><mi>A</mi><mi>T</mi></msup><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><mfrac><mrow><msub><mi>W</mi><mn>0</mn></msub><mo>−</mo><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>W</mi><mn>2</mn></msub></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">(</mo><msub><mi>K</mi><mn>2</mn></msub><mo>−</mo><msub><mi>K</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo separator="true">,</mo><msup><mi>A</mi><mi>T</mi></msup><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><msub><mi>W</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">(</mo><msub><mi>K</mi><mn>1</mn></msub><mo>−</mo><msub><mi>K</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">]</mo><mi>A</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>A</mi><mi>T</mi></msup><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">[</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><msub><mi>W</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">(</mo><msub><mi>K</mi><mn>0</mn></msub><mo>−</mo><msub><mi>K</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><mfrac><mrow><msub><mi>W</mi><mn>0</mn></msub><mo>+</mo><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>W</mi><mn>2</mn></msub></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">(</mo><msub><mi>K</mi><mn>1</mn></msub><mo>+</mo><msub><mi>K</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><mfrac><mrow><msub><mi>W</mi><mn>0</mn></msub><mo>−</mo><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>W</mi><mn>2</mn></msub></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">(</mo><msub><mi>K</mi><mn>2</mn></msub><mo>−</mo><msub><mi>K</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><msub><mi>W</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">(</mo><msub><mi>K</mi><mn>1</mn></msub><mo>−</mo><msub><mi>K</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">]</mo><mi>A</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp; [R_0,R_1] = \\ &amp; \bigg[A^T[(GW_0)\odot(B^T(K_0-K_2))],A^T[(G\frac{W_0+W_1+W_2}{2})\odot(B^T(K_1+K_2))],\\&amp; A^T[(G\frac{W_0-W_1+W_2}{2})\odot(B^T(K_2-K_1))],A^T[(GW_2)\odot(B^T(K_1-K_3))]\bigg]A \\&amp; = A^T\bigg[[(GW_0)\odot(B^T(K_0-K_2))],[(G\frac{W_0+W_1+W_2}{2})\odot(B^T(K_1+K_2))],\\&amp; [(G\frac{W_0-W_1+W_2}{2})\odot(B^T(K_2-K_1))],[(GW_2)\odot(B^T(K_1-K_3))]\bigg]A \\\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:12.3001em;vertical-align:-5.9001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.4001em;"><span style="top:-9.0101em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-6.9001em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-4.2em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-1.5em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:1.2em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.9001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.4001em;"><span style="top:-9.0101em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span></span></span><span style="top:-6.9001em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))]</span><span class="mpunct">,</span></span></span><span style="top:-4.2em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))]</span><span class="mord"><span class="delimsizing size3">]</span></span><span class="mord mathnormal">A</span></span></span><span style="top:-1.5em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="delimsizing size3">[</span></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))]</span><span class="mpunct">,</span></span></span><span style="top:1.2em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))]</span><span class="mord"><span class="delimsizing size3">]</span></span><span class="mord mathnormal">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.9001em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>由于hadamard product（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊙</mo></mrow><annotation encoding="application/x-tex">\odot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">⊙</span></span></span></span>）和concat（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span></span></span></span>）操作可以交换而不影响结果，因此：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">[</mo><msub><mi>R</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>R</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo>=</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msup><mi>A</mi><mi>T</mi></msup><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">[</mo><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">[</mo><msub><mi>W</mi><mn>0</mn></msub><mo separator="true">,</mo><mfrac><mrow><msub><mi>W</mi><mn>0</mn></msub><mo>+</mo><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>W</mi><mn>2</mn></msub></mrow><mn>2</mn></mfrac><mo separator="true">,</mo><mfrac><mrow><msub><mi>W</mi><mn>0</mn></msub><mo>−</mo><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>W</mi><mn>2</mn></msub></mrow><mn>2</mn></mfrac><mo separator="true">,</mo><msub><mi>W</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">[</mo><msub><mi>K</mi><mn>0</mn></msub><mo>−</mo><msub><mi>K</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>K</mi><mn>1</mn></msub><mo>+</mo><msub><mi>K</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>K</mi><mn>2</mn></msub><mo>−</mo><msub><mi>K</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>K</mi><mn>1</mn></msub><mo>−</mo><msub><mi>K</mi><mn>3</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">]</mo><mi>A</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>A</mi><mi>T</mi></msup><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">[</mo><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">[</mo><msub><mi>W</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>W</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>W</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">[</mo><msub><mi>K</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>K</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>K</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>K</mi><mn>3</mn></msub><mo stretchy="false">]</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo stretchy="false">)</mo><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">]</mo><mi>A</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>A</mi><mi>T</mi></msup><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">[</mo><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">[</mo><mover accent="true"><msub><mi>k</mi><mn>0</mn></msub><mo stretchy="true">→</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi>k</mi><mn>1</mn></msub><mo stretchy="true">→</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi>k</mi><mn>2</mn></msub><mo stretchy="true">→</mo></mover><mo stretchy="false">]</mo><msup><mi>G</mi><mi>T</mi></msup><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mo stretchy="false">[</mo><mover accent="true"><msub><mi>d</mi><mn>0</mn></msub><mo stretchy="true">→</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi>d</mi><mn>1</mn></msub><mo stretchy="true">→</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi>d</mi><mn>2</mn></msub><mo stretchy="true">→</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi>d</mi><mn>3</mn></msub><mo stretchy="true">→</mo></mover><mo stretchy="false">]</mo><mi>B</mi><mo stretchy="false">)</mo><mo fence="false" stretchy="true" minsize="2.4em" maxsize="2.4em">]</mo><mi>A</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>A</mi><mi>T</mi></msup><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><mi>K</mi><msup><mi>G</mi><mi>T</mi></msup><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mi>D</mi><mi>B</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mi>A</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp; [R_0,R_1] = \\ &amp; A^T\bigg[(G[W_0, \frac{W_0+W_1+W_2}{2}, \frac{W_0-W_1+W_2}{2}, W_2])\odot(B^T[K_0-K_2, K_1+K_2, K_2-K_1, K_1-K_3])\bigg]A \\&amp; =A^T\bigg[(G[W_0,W_1,W_2]\begin{bmatrix}1 &amp; \frac{1}{2} &amp; \frac{1}{2} &amp; 0 \\0 &amp; \frac{1}{2} &amp; -\frac{1}{2} &amp; 0 \\0 &amp; \frac{1}{2} &amp; \frac{1}{2} &amp; 1\end{bmatrix}) \odot(B^T[K_0,K_1,K_2,K_3]\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; 0 \\0 &amp; 1 &amp; -1 &amp; 1 \\-1 &amp; 1 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; 0 &amp; -1\end{bmatrix}) \bigg]A \\&amp; = A^T\bigg[(G[\overrightarrow{k_0},\overrightarrow{k_1},\overrightarrow{k_2}]G^T)\odot(B^T[\overrightarrow{d_0},\overrightarrow{d_1},\overrightarrow{d_2},\overrightarrow{d_3}]B) \bigg]A \\&amp; = A^T[(GKG^T)\odot(B^TDB)]A\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:13.5515em;vertical-align:-6.5257em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.0257em;"><span style="top:-10.8358em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"></span></span><span style="top:-8.7258em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"></span></span><span style="top:-4.8257em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"></span></span><span style="top:-0.9257em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"></span></span><span style="top:1.2157em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.5257em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.0257em;"><span style="top:-10.8358em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"><span class="mord"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span></span></span><span style="top:-8.7258em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="delimsizing size3">[</span></span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">])</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">])</span><span class="mord"><span class="delimsizing size3">]</span></span><span class="mord mathnormal">A</span></span></span><span style="top:-4.8257em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="delimsizing size3">[</span></span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.25em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.397em;"><span class="pstrut" style="height:3.155em;"></span><span style="height:0.016em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="0.016em" style="width:0.6667em" viewbox="0 0 666.67 16" preserveaspectratio="xMinYMin"><path d="M319 0 H403 V16 H319z M319 0 H403 V16 H319z"/></svg></span></span><span style="top:-4.05em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0577em;"><span style="top:-4.2126em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0074em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8023em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5577em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0577em;"><span style="top:-4.2126em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.0074em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.8023em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5577em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0577em;"><span style="top:-4.2126em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.0074em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.8023em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5577em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0577em;"><span style="top:-4.2126em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0074em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8023em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5577em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.25em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.397em;"><span class="pstrut" style="height:3.155em;"></span><span style="height:0.016em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="0.016em" style="width:0.6667em" viewbox="0 0 666.67 16" preserveaspectratio="xMinYMin"><path d="M263 0 H347 V16 H263z M263 0 H347 V16 H263z"/></svg></span></span><span style="top:-4.05em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.711em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.858em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="1.216em" style="width:0.6667em" viewbox="0 0 666.67 1216" preserveaspectratio="xMinYMin"><path d="M319 0 H403 V1216 H319z M319 0 H403 V1216 H319z"/></svg></span></span><span style="top:-4.7111em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.711em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.858em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="1.216em" style="width:0.6667em" viewbox="0 0 666.67 1216" preserveaspectratio="xMinYMin"><path d="M263 0 H347 V1216 H263z M263 0 H347 V1216 H263z"/></svg></span></span><span style="top:-4.7111em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="delimsizing size3">]</span></span><span class="mord mathnormal">A</span></span></span><span style="top:-0.9257em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="delimsizing size3">[</span></span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mclose">]</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mord"><span class="delimsizing size3">]</span></span><span class="mord mathnormal">A</span></span></span><span style="top:1.2157em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)]</span><span class="mord mathnormal">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.5257em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="工程应用角度看">工程应用角度看</h2><p>Winograd算法可以分为4个步骤：</p><ul><li><ol><li>初始化期间完成卷积核的变换<code>weightTransform</code>，即：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mi>K</mi><msup><mi>G</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">GKG^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></li></ol></li><li><ol start="2"><li>运行期间完成输入数据的变换<code>sourceTransform</code>，即：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>B</mi><mi>T</mi></msup><mi>D</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">B^TDB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></li></ol></li><li><ol start="3"><li>运行期间完成输入数据与权重的<code>MatMul</code>，即：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>G</mi><mi>K</mi><msup><mi>G</mi><mi>T</mi></msup><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mi>D</mi><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(GKG^T)\odot(B^TDB)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span></li></ol></li><li><ol start="4"><li>运行期间完成输出数据的变换<code>dstTransform</code>，即：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mi>T</mi></msup><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>G</mi><mi>K</mi><msup><mi>G</mi><mi>T</mi></msup><mo stretchy="false">)</mo><mo>⊙</mo><mo stretchy="false">(</mo><msup><mi>B</mi><mi>T</mi></msup><mi>D</mi><mi>B</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A^T[(GKG^T)\odot(B^TDB)]A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">[(</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)]</span><span class="mord mathnormal">A</span></span></span></span></li></ol></li></ul><h1>关于计算量的讨论</h1><p>关于1D Winograd， 网上最常见的解释是：相比于普通的矩阵乘法，使用Winograd算法之后乘法次数减少2次，加法次数增多4次，实际使用中，乘法指令周期比加法要长，通俗来讲Winograd就是减少乘法操作，用更快的加法操作来达到加速目的。</p><p>但是这样的解释是有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="OrangeRed"><mtext>局限性</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{OrangeRed}局限性</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:OrangeRed;">局限性</span></span></span></span>的：</p><h2 id="其他分块情况">其他分块情况</h2><ul><li>首先，上文中列举的是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(2,3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>的情况，查看变换矩阵得到，该情况下的输入、输出变换矩阵（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>）系数非0即1（-1），此种情况下确实不需要乘法。</li><li>但对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mn>4</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(4,3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>，或者<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(6,3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>等block更大情况，变换矩阵中存在很多非0和1的系数，单独的MatMul乘法计算是减少了，但是引入了额外的输入、输出变换中需要的乘法，会存在乘法次数变多的情况，这个在原始论文中也有提及。</li></ul><h2 id="CPU架构">CPU架构</h2><ul><li>其次，关于浮点乘法比浮点加法指令周期长的问题，这个在旧的CPU架构下会存在，但是目前使用的CPU架构下，浮点的乘法和加法指令周期是一样的。<br>比如X86端 Intel CPU，从第5代Broadwell架构开始，两者的延迟就没有差别了，在intel core i7 9700 CPU（Coffee lake 第9代）上测试SSE指令集的浮点乘法和加法，经过实测，两者性能确实没有差异。</li><li>SSE指令集<a href="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#expand=3416&amp;ig_expand=153,153&amp;techs=SSE">SIMD加法</a>和<a href="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#expand=3416&amp;ig_expand=153,153,4911&amp;techs=SSE&amp;text=mul">SIMD乘法</a>的对比可以点击跳转手册查看；</li><li>关于SSE指令集中所列出的两个属性<code>latency（延迟）</code>和<code>throughput（CPI）吞吐量</code>的具体含义可以看<a href="https://blog.csdn.net/Johnsonjjj/article/details/109790335">这里</a>，我的理解就是：<ul><li>latency就是完成一条指令所需要的时间，即生成结果的指令与使用该结果的指令之间的周期数，比如Broadwell架构下<code>_mm_add_ps</code>浮点加法的latency为3，则表示（在不发生RAW冒险（数据冒险的一种，写后读冒险）的情况下）最快也要3个周期，其他指令才能获得浮点加法的运算结果。</li><li>throughput吞吐量，又称CPI（cycle per instruction，每指令周期数），是发射一条指令所需要的时钟周期数，比如Broadwell架构下<code>_mm_mul_ps</code>浮点乘法的throughput为0.5，则表示一个时钟周期内可以发射2条浮点乘法指令。</li><li>比喻一下：延迟=水管中水的流速，吞吐量=水管的粗细</li></ul></li></ul><h2 id="考虑多通道输入输出">考虑多通道输入输出</h2><p>实际要考虑卷积中的输入通道数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">IC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，输出通道数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">OC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span></span></span></span>。因为输入变换只与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">IC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>有关，输出变换只与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">OC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span></span></span></span>有关。而普通滑窗卷积计算与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">IC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">OC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span></span></span></span>均相关。</p><p>完整的计算量对比：</p><ul><li><p>普通卷积：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mi>O</mi><mi>W</mi><mo>∗</mo><mi>O</mi><mi>H</mi><mo>∗</mo><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><mi>I</mi><mi>C</mi><mo>∗</mo><mi>k</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>l</mi><mi>X</mi><mo>∗</mo><mi>k</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>l</mi><mi>Y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">OriginalCost = OW*OH*OC(2*IC*kernelX*kernelY-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">ina</span><span class="mord mathnormal" style="margin-right:0.07153em;">lC</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07847em;">lX</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p></li><li><p>Winograd卷积：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>S</mi><mi>r</mi><mi>c</mi><mi>T</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mi>s</mi><mi>u</mi><mo>∗</mo><mi>M</mi><mo>∗</mo><mi>I</mi><mi>C</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>M</mi><mi>a</mi><mi>t</mi><mi>M</mi><mi>u</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mi>s</mi><mi>u</mi><mo>∗</mo><mi>s</mi><mi>u</mi><mo>∗</mo><mi>I</mi><mi>C</mi><mo>∗</mo><mi>O</mi><mi>C</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>D</mi><mi>s</mi><mi>t</mi><mi>T</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mi>s</mi><mi>u</mi><mo>+</mo><mi>u</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>N</mi><mo>∗</mo><mi>O</mi><mi>C</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>W</mi><mi>i</mi><mi>n</mi><mi>o</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>d</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mi>S</mi><mi>r</mi><mi>c</mi><mi>T</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>+</mo><mi>M</mi><mi>a</mi><mi>t</mi><mi>M</mi><mi>u</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>+</mo><mi>D</mi><mi>s</mi><mi>t</mi><mi>T</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>O</mi><mi>W</mi><mi mathvariant="normal">/</mi><mi>u</mi><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>O</mi><mi>H</mi><mi mathvariant="normal">/</mi><mi>u</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp; SrcTransformCost = 2*su*M*IC \\&amp; MatMulCost = su*su*IC*OC \\&amp; DstTransformCost = (su+u)*N*OC \\&amp; WinogradCost = (SrcTransformCost+MatMulCost+DstTransformCost)*(OW/u)*(OH/u)\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.75em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-0.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">rc</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10903em;">tM</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.07153em;">lC</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal">Ds</span><span class="mord mathnormal" style="margin-right:0.13889em;">tT</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal">Win</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">rc</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10903em;">tM</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.07153em;">lC</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">Ds</span><span class="mord mathnormal" style="margin-right:0.13889em;">tT</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord">/</span><span class="mord mathnormal">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord">/</span><span class="mord mathnormal">u</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>8</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">u\in[2,8]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">8</span><span class="mclose">]</span></span></span></span>表示<strong>单个块</strong>的输出尺寸<code>Unit</code>；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><mo>=</mo><mi>u</mi><mo>+</mo><mi>k</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>l</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">su=u+kernel-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>表示<strong>单个块</strong>的输入尺寸<code>Source Unit</code>；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>s</mi><mi>u</mi><mo>∗</mo><mi>s</mi><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M\in(0,su*su)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mclose">)</span></span></span></span>表示输入变换中一行元素的乘加次数；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>s</mi><mi>u</mi><mo>∗</mo><mi>s</mi><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N\in(0,su*su)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mclose">)</span></span></span></span>表示输出变换中一行元素的乘加次数。</li></ul></li></ul><p>考虑到转换矩阵的稀疏性（即存在0和1（-1）），因此上面的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>值与 <code>Unit</code>的选取相关且为定值。至于<code>Uint</code>如何确定，放到下一篇来讲。</p><p>根据对不同<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">IC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">OC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span></span></span></span>遍历实测，就乘加次数而言，仅当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>C</mi><mtext>或</mtext><mi>O</mi><mi>C</mi><mo>≤</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">IC或OC≤2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback">或</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>的个别情况下（实际应用中，通道&lt;=2的卷积情况非常少），Winograd在计算次数上是增加的，具体可以通过下面的代码简单验证。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UnitTest</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> unit, <span class="keyword">const</span> <span class="keyword">int</span> &amp;st, <span class="keyword">const</span> <span class="keyword">int</span> &amp;dt, <span class="keyword">const</span> <span class="keyword">int</span> &amp;ic, <span class="keyword">const</span> <span class="keyword">int</span> &amp;oc, std::ofstream &amp;fout, <span class="keyword">int</span> kernel = <span class="number">3</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> original_cost = (<span class="keyword">float</span>)(<span class="number">2</span> * ic * kernel * kernel - <span class="number">1</span>) * oc;</span><br><span class="line">    <span class="keyword">float</span> src_transform_cost = <span class="number">2</span> * (unit + kernel - <span class="number">1</span>) * st * ic;</span><br><span class="line">    <span class="keyword">float</span> matmul_cost = (unit + kernel - <span class="number">1</span>) * (unit + kernel - <span class="number">1</span>) * ic * oc;</span><br><span class="line">    <span class="keyword">float</span> dst_transform_cost = (<span class="number">2</span> * unit + kernel - <span class="number">1</span>) * dt * oc;</span><br><span class="line">    <span class="keyword">float</span> winograd_cost = (src_transform_cost + matmul_cost + dst_transform_cost) / (unit * unit);</span><br><span class="line">    <span class="keyword">float</span> rate = original_cost / winograd_cost;</span><br><span class="line">    <span class="keyword">if</span> (rate &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;uint: %d, ic: %d, oc: %d, rate: %f\n&quot;</span>, unit, ic, oc, rate);</span><br><span class="line">    &#125;</span><br><span class="line">    fout &lt;&lt; <span class="string">&quot;unit:&quot;</span> &lt;&lt; unit &lt;&lt; <span class="string">&quot;, ic:&quot;</span> &lt;&lt; ic &lt;&lt; <span class="string">&quot;, oc:&quot;</span> &lt;&lt; oc &lt;&lt; <span class="string">&quot;, rate:&quot;</span> &lt;&lt; rate &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WinogradUnitTest3x3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; u = &#123; <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;;</span><br><span class="line">    <span class="comment">// mul + add</span></span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; st = &#123; <span class="number">0</span> + <span class="number">4</span>, <span class="number">10</span> + <span class="number">16</span>, <span class="number">30</span> + <span class="number">36</span> &#125;;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; dt = &#123; <span class="number">0</span> + <span class="number">4</span>, <span class="number">2</span> + <span class="number">11</span>, <span class="number">10</span> + <span class="number">32</span> &#125;;</span><br><span class="line">    <span class="function">std::ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;unit_info.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">// unit</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; u.<span class="built_in">size</span>(); ++k) &#123;</span><br><span class="line">        <span class="comment">// input channel</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">64</span>; ++i) &#123;</span><br><span class="line">            <span class="comment">// output channel</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">64</span>; ++j) &#123;</span><br><span class="line">                <span class="built_in">UnitTest</span>(u[k], st[k], dt[k], i, j, fout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>致谢</h1><p>文章主体框架参考自<a href="https://github.com/yizhaoyanbo">东哥</a>的MNN源码解读的内部分享，加上了自己的一些看法。有幸被看到的话，希望能给点个赞~~</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Winograd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI数据集 [1]：COCO数据集</title>
      <link href="/2021/11/16/AI-Dataset-1-coco/"/>
      <url>/2021/11/16/AI-Dataset-1-coco/</url>
      
        <content type="html"><![CDATA[<h1>简介</h1><ul><li>MS COCO的全称是Microsoft Common Objects in Context，起源于微软于2014年出资标注的Microsoft COCO数据集，与ImageNet竞赛一样，被视为是计算机视觉领域最受关注和最权威的比赛之一。</li><li>COCO数据集是一个大型的、丰富的物体检测，分割和字幕数据集。这个数据集以scene understanding为目标，主要从复杂的日常场景中截取，图像中的目标通过精确的segmentation进行位置的标定。图像包括91类目标，328,000影像和2,500,000个label。目前为止有语义分割的最大数据集，提供的类别有80 类，有超过33 万张图片，其中20 万张有标注，整个数据集中个体的数目超过150 万个。</li></ul><h1>COCO API</h1><h2 id="install">install</h2><h3 id="clone">clone</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;workdir&gt;</span><br><span class="line">git <span class="built_in">clone</span> https://hub.fastgit.org/cocodataset/cocoapi.git</span><br></pre></td></tr></table></figure><h3 id="setup">setup</h3><ul><li>编译并安装到本地：</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> cocoapi/PythonAPI/</span><br><span class="line">python setup.py build_ext --inplace</span><br></pre></td></tr></table></figure><ul><li>报错如下：</li></ul><blockquote><p>cl: 命令行 error D8021 :无效的数值参数“/Wno-cpp”</p></blockquote><ul><li><a href="http://xn--setup-hr2j95q.py">打开setup.py</a>，将下面一行注释掉：</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">extra_compile_args=[<span class="string">&#x27;-Wno-cpp&#x27;</span>, <span class="string">&#x27;-Wno-unused-function&#x27;</span>, <span class="string">&#x27;-std=c99&#x27;</span>],</span><br></pre></td></tr></table></figure><ul><li>再次执行，报错如下：</li></ul><blockquote><p>c1: fatal error C1083: 无法打开源文件: “pycocotools/_mask.c”: No such file or directory</p></blockquote><ul><li>搜索得知编译依赖库：Cython</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install Cython</span><br></pre></td></tr></table></figure><ul><li>再次执行，成功，继续执行如下指令，安装库到pyhton site-packages：</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python setup.py build_ext install</span><br></pre></td></tr></table></figure><ul><li>如遇到依赖的某个库没有安装，则会默认从https://pypi.org/下载，会很慢，可以Ctrl+C中止，自己执行pip install（假设自己已经配置过国内源）<br>安装成功后，用jupyter notebook 打开 pycocoDemo.ipynb，执行第一段import库操作，没有报错则说明安装成功。</li></ul><h2 id="COCO-DataSet-Download">COCO DataSet Download</h2><h3 id="官网下载数据集没反应">官网下载数据集没反应</h3><p><img src="/2021/11/16/AI-Dataset-1-coco/1.png" alt="1"></p><ul><li>F12打开网页调试，转到Console，可以看到错误信息，意思是原链接地址是个不安全的地址，HTTP要改成HTTPS，复制链接修改后拷贝到浏览器便可成功下载（炒鸡慢）。</li><li>好像直接点击console里面的网址也可以下载？</li><li>网页下载太慢了，试了下面的方法：</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -c https://images.cocodataset.org/zips/val2017.zip --no-check-certificate</span><br></pre></td></tr></table></figure><ul><li><code>-c</code> 断点续传；</li><li><code>--no-check-certificate</code> 对非安全网址不检查验证</li><li>0.5-1M/s，也不是很快，但可以接受了（ ：</li></ul><h3 id="解压">解压</h3><ul><li>在cocoapi根目录下新建两个文件夹images和annotations，将图片和标注分别拷贝到这两个目录下，解压，图片保留<code>val2017</code>这一级子目录，注释的json文件则直接放在annotations文件夹下；</li><li>数据准备完毕，pycocoDemo.ipynb可以一路执行下去，观察API的功能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据集 </tag>
            
            <tag> coco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [3]：mAP</title>
      <link href="/2021/11/15/AI-Algorithm-3-mAP/"/>
      <url>/2021/11/15/AI-Algorithm-3-mAP/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><ul><li><p><code>AP（Average Precision，平均精度）</code>是衡量目标检测算法好坏的常用指标，在Faster R-CNN，SSD等算法中作为评估指标。</p></li><li><p><code>AP</code>等于<code>召回率（Recall）</code>值取0-1时，准确率（precision）值的平均值。</p></li></ul><h1>Precision</h1><ul><li>正确预测结果占所有预测正例的百分比</li><li>比如你预测100个图片是苹果，其中80个真的是苹果，则Precision=0.8<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Precision=\frac{TP} {TP+FP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">rec</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2757em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">TP</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">FP</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">TP</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h1>Recall</h1><ul><li>正确预测结果占所有事实正例的百分比</li><li>比如总共有100个图片是苹果，你成功预测了50个，则Recall=0.5<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>e</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Recall=\frac{TP} {TP+FN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2757em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">TP</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">FN</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">TP</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h1>IoU</h1><ul><li>参见<a href="https://no5-aaron-wu.github.io/2021/11/11/AI-Algorithm-1-mIoU/">mIoU</a>笔记</li></ul><h1>AP</h1><p>下面的例子演示AP怎么计算的</p><p><img src="/2021/11/15/AI-Algorithm-3-mAP/1.png" alt="1"></p><ul><li><ol><li>共进行10次预测，直到recall为1为止；</li></ol></li><li><ol start="2"><li>第二列表示预测是否正确，标准就是IoU≥0.5；</li></ol></li><li><ol start="3"><li>随着预测进行，recall值会一直增加，但precision会具有锯齿形状（FP下降，TP上升），如下图所示；</li></ol></li></ul><p><img src="/2021/11/15/AI-Algorithm-3-mAP/2.png" alt="2"></p><ul><li><ol start="4"><li>AP一般就定义为以上锯齿形所包含的面积 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>P</mi><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mi>p</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mtext>d</mtext><mi>r</mi></mrow><annotation encoding="application/x-tex">AP=\int_{0}^{1}p(r)\text{d}r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3648em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.009em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord text"><span class="mord">d</span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>；</li></ol></li><li><ol start="5"><li>precision 和 recall 总是在0-1之间，所以AP也是在0-1之间；</li></ol></li><li><ol start="6"><li>通常会首先对锯齿形进行平滑，将每个precision值替换为其右侧最大的precision值，从而使得曲线单调递减而不是呈现锯齿形，这样做的目的是减少因为TP出现的先后次序的差异导致的波动，如下绿线所示：</li></ol></li></ul><p><img src="/2021/11/15/AI-Algorithm-3-mAP/3.png" alt="3"></p><ul><li><ol start="7"><li>用公式表示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>p</mi></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><msub><mi>x</mi><mrow><mover accent="true"><mi>r</mi><mo stretchy="true">~</mo></mover><mo>≥</mo><mi>r</mi></mrow></msub><mrow><mi>p</mi><mo stretchy="false">(</mo><mover accent="true"><mi>r</mi><mo stretchy="true">~</mo></mover><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">p_{interp}(r)=max_{\widetilde{r}\geq{r}}{p(\widetilde{r})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3334em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6906em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span><span class="svg-align" style="width:calc(100% - 0.1111em);margin-left:0.1111em;top:-3.1306em;"><span class="pstrut" style="height:2.7em;"></span><span class="mtight" style="height:0.26em;"><svg xmlns="http://www.w3.org/2000/svg" width="100%" height="0.26em" viewbox="0 0 600 260" preserveaspectratio="none"><path d="M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z"/></svg></span></span></span></span></span></span><span class="mrel mtight">≥</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2452em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6906em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span><span class="svg-align" style="width:calc(100% - 0.1111em);margin-left:0.1111em;top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg xmlns="http://www.w3.org/2000/svg" width="100%" height="0.26em" viewbox="0 0 600 260" preserveaspectratio="none"><path d="M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z"/></svg></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></li></ol></li><li><ol start="8"><li>进一步可以用<strong>11点插值</strong>方式计算AP：</li></ol></li></ul><p><img src="/2021/11/15/AI-Algorithm-3-mAP/4.png" alt="4"></p><ul><li><ol start="9"><li>公式表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>P</mi><mo>=</mo><mfrac><mn>1</mn><mn>11</mn></mfrac><msub><mo>∑</mo><mrow><mi>r</mi><mo>∈</mo><mrow><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>0.1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">}</mo></mrow></mrow></msub><mrow><msub><mi>p</mi><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>p</mi></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">AP={\frac {1} {11}}\sum_{r\in{\{0,0.1,...,1\}}}{p_{interp}(r)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3198em;vertical-align:-0.4747em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2253em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mopen mtight">{</span><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0.1</span><span class="mpunct mtight">,</span><span class="mord mtight">...</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span><span class="mclose mtight">}</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4747em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span></span></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [2]：NC4HW4数据排布</title>
      <link href="/2021/11/14/AI-Algorithm-2-NC4HW4/"/>
      <url>/2021/11/14/AI-Algorithm-2-NC4HW4/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><ul><li>NC4HW4的数据排布其实就是和RGBA这种交织的数据排布类似</li></ul><h1>NCHW-&gt;NC4HW4</h1><ul><li>首先batch维度就是N不变</li><li>然后把每个样本所有feature map按每四个通道为一组分成C/4个组，如果通道数不能整除4则补齐到4的倍数，补上的feature map全填0</li><li>然后把每组内的4个feature map按照RGBA交织的形式重新排列一下就得到NC4HW4的数据了。</li></ul><p><img src="/2021/11/14/AI-Algorithm-2-NC4HW4/1.png" alt="1"></p><h1>优点</h1><ul><li>以卷积操作举例，此处只讨论暴力方法，不涉及im2col，gemm， winograd等方法。</li><li>对于卷积操作, 根据计算机内存排布特点，按行进行处理，处理完一个通道的数据，转入下一个通道继续按行处理。下图是一个通道内卷积的操作：</li></ul><p><img src="/2021/11/14/AI-Algorithm-2-NC4HW4/2.png" alt="2"></p><ul><li>对于一个nchw格式的Tensor来说，其在计算机中的内存排布是这样的：</li></ul><p><img src="/2021/11/14/AI-Algorithm-2-NC4HW4/3.png" alt="3"></p><ul><li>当一条指令处理一个数据时，卷积操作需要做循环乘累加，如下图所示，与kernel对应的featuremap中的数据不是连续分布的。如果feature map空间size很大的话，这样跳通道取数据，就会造成<a href="https://www.cnblogs.com/jokerjason/p/10711022.html">cache miss</a>严重影响运行性能。</li></ul><p><img src="/2021/11/14/AI-Algorithm-2-NC4HW4/4.jpg" alt="4"></p><ul><li>除此之外，当kernel size 不为4的倍数时，想使用诸如x86结构的sse指令,arm的neon指令.以及GPU的OpenGL和OpenCL等可以单指令处理4组数据的指令集时，使用nchw内存排布同样不方便：</li></ul><p><img src="/2021/11/14/AI-Algorithm-2-NC4HW4/5.jpg" alt="5"></p><ul><li>而NC/4HW4则可以解决上面的问题，4个通道合并成一个通道，通道数不足4的情况下进行补0：</li></ul><p><img src="/2021/11/14/AI-Algorithm-2-NC4HW4/6.png" alt="6"></p><p><img src="/2021/11/14/AI-Algorithm-2-NC4HW4/7.png" alt="7"></p><ul><li>经过NC4HW4重排后在内存中的排布情况如下：</li></ul><p><img src="/2021/11/14/AI-Algorithm-2-NC4HW4/8.png" alt="8"></p><ul><li>此时进行单指令处理4组数据（SIMD）操作就没有问题了</li></ul><p><img src="/2021/11/14/AI-Algorithm-2-NC4HW4/9.jpg" alt="9"></p><ul><li>注意此时如果想让输出也为NC/4HW4排布，则需要在以4组kernel为单位循环操作featuremap数据，以实现输出channel的pack。</li></ul><h1>总结</h1><h2 id="优点">优点</h2><ul><li>进行NC4HW4重排后，可以充分利用cpu指令集的特性，实现对卷积等操作进行加速。同时可以较少cache miss.</li></ul><h2 id="缺点">缺点</h2><p>对于较大的feature，如果其channel不是4的倍数，则会导致补充0过多，导致内存占用过高，同时也相应的增加些许计算量。</p><h1>参考</h1><ol><li><a href="https://www.zhihu.com/question/337513515">https://www.zhihu.com/question/337513515</a></li><li><a href="http://giantpandacv.com/project/Msnhnet/%E5%9B%BE%E8%A7%A3%E7%A5%9E%E7%A7%98%E7%9A%84NC4HW4/">http://giantpandacv.com/project/Msnhnet/图解神秘的NC4HW4/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MNN </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之类与对象 [1]: 多态</title>
      <link href="/2021/11/11/cpp-class-1/"/>
      <url>/2021/11/11/cpp-class-1/</url>
      
        <content type="html"><![CDATA[<h1>多态性</h1><ul><li>目的：不同对象在接收到相同消息时(操作/函数)做不同响应</li><li>现象：对应同样成员函数名称，执行不同函数体</li></ul><h1>多态性的实现</h1><ul><li>虚函数：使用<code>virtual</code>关键字声明成员函数</li><li>声明格式： <code>virtual 函数返回值 函数名称(参数列表);</code> (派生类重新实现时加不加virtual都行)</li><li>指向派生类的基类指针会调用对应派生类实现的虚函数</li><li>如果派生类不实现虚函数，则继承基类的虚函数实现</li><li>当类中有虚函数的时候，会维持一个虚表指针，虚表指针指向虚表中对应到该类的虚函数的函数入口地址(运行时确定)，这叫做函数的动态绑定（非虚函数是静态绑定）<ul><li><p>静态类型：对象在声明时采用的类型，在编译期既已确定；</p></li><li><p>动态类型：通常是指一个指针或引用目前所指对象的类型，是在运行期决定的；</p></li><li><p>静态绑定：绑定的是静态类型，所对应的函数或属性依赖于对象的静态类型，发生在编译期；</p></li><li><p>动态绑定：绑定的是动态类型，所对应的函数或属性依赖于对象的动态类型，发生在运行期；</p></li><li><p>对象的动态类型可以更改，但是静态类型无法更改；</p></li><li><p>要想实现多态，必须使用动态绑定；</p></li><li><p>在继承体系中只有虚函数使用的是动态绑定，其他的全部是静态绑定；</p></li><li><p>建议：绝对不要重新定义继承而来的非虚(non-virtual)函数（《Effective C++ 第三版》条款36），因为这样导致函数调用由对象声明时的静态类型确定了，而和对象本身脱离了关系，没有多态，也这将给程序留下不可预知的隐患和莫名其妙的BUG；</p></li></ul>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*virtual*/</span> <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; std::cout &lt;&lt; <span class="string">&quot;A::func()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; std::cout &lt;&lt; <span class="string">&quot;B::func()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; std::cout &lt;&lt; <span class="string">&quot;C::func()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">C* pc = <span class="keyword">new</span> <span class="built_in">C</span>(); <span class="comment">//pc的静态类型是它声明的类型C*，动态类型也是C*；</span></span><br><span class="line">B* pb = <span class="keyword">new</span> <span class="built_in">B</span>(); <span class="comment">//pb的静态类型和动态类型也都是B*；</span></span><br><span class="line">A* pa = pc;      <span class="comment">//pa的静态类型是它声明的类型A*，动态类型是pa所指向的对象pc的类型C*；</span></span><br><span class="line">pa = pb;         <span class="comment">//pa的动态类型可以更改，现在它的动态类型是B*，但其静态类型仍是声明时候的A*；</span></span><br><span class="line">C *pnull = <span class="literal">NULL</span>; <span class="comment">//pnull的静态类型是它声明的类型C*,没有动态类型，因为它指向了NULL；</span></span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pa-&gt;<span class="built_in">func</span>();      <span class="comment">//A::func() pa的静态类型永远都是A*，不管其指向的是哪个子类，都是直接调用A::func()；</span></span><br><span class="line">pc-&gt;<span class="built_in">func</span>();      <span class="comment">//C::func() pc的动、静态类型都是C*，因此调用C::func()；</span></span><br><span class="line">pnull-&gt;<span class="built_in">func</span>();   <span class="comment">//C::func() 不用奇怪为什么空指针也可以调用函数，因为这在编译期就确定了，和指针空不空没关系；</span></span><br></pre></td></tr></table></figure><ul><li>如果注释掉类C中的func函数定义，其他不变，即</li></ul>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pa-&gt;<span class="built_in">func</span>();      <span class="comment">//A::func() 理由同上；</span></span><br><span class="line">pc-&gt;<span class="built_in">func</span>();      <span class="comment">//A::func() pc在类C中找不到func的定义，因此到其基类中寻找；</span></span><br><span class="line">pnull-&gt;<span class="built_in">func</span>();   <span class="comment">//A::func() 原因也解释过了；</span></span><br></pre></td></tr></table></figure><ul><li>如果为A中的void func()函数添加virtual特性，其他不变，即</li></ul>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; std::cout &lt;&lt; <span class="string">&quot;A::func()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pa-&gt;<span class="built_in">func</span>();      <span class="comment">//B::func() 因为有了virtual虚函数特性，pa的动态类型指向B*，因此先在B中查找，找到后直接调用；</span></span><br><span class="line">pc-&gt;<span class="built_in">func</span>();      <span class="comment">//C::func() pc的动、静态类型都是C*，因此也是先在C中查找；</span></span><br><span class="line">pnull-&gt;<span class="built_in">func</span>();   <span class="comment">//空指针异常，因为是func是virtual函数，因此对func的调用只能等到运行期才能确定，然后才发现pnull是空指针；</span></span><br></pre></td></tr></table></figure><ul><li>建议：绝对不要重新定义一个继承而来的virtual函数的缺省参数值，因为缺省参数值都是静态绑定（为了执行效率），而virtual函数却是动态绑定。</li></ul>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;E::func()\t&quot;</span>&lt;&lt; i &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span> :</span> <span class="keyword">public</span> E</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;F::func()\t&quot;</span> &lt;&lt; i &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    F* pf = <span class="keyword">new</span> <span class="built_in">F</span>();</span><br><span class="line">    E* pe = pf;</span><br><span class="line">    pf-&gt;<span class="built_in">func</span>(); <span class="comment">//F::func() 1  正常，就该如此；</span></span><br><span class="line">    pe-&gt;<span class="built_in">func</span>(); <span class="comment">//F::func() 0  哇哦，这是什么情况，调用了子类的函数，却使用了基类中参数的默认值！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1>纯虚函数</h1><ul><li>充当占位函数，没有任何实现</li><li>派生类负责实现其具体功能</li><li>声明格式： <code>virtual 函数返回值 函数名称(参数列表) = 0;</code></li><li>纯虚函数的虚表指针是存在的，只不过该指针指向0地址</li></ul><h1>抽象类（纯虚类）</h1><ul><li>带有纯虚函数的类</li><li>作为类继承层次的上层</li><li>不能构造抽象类的对象，但可以存在抽象类的指针或引用</li></ul><h1>虚析构函数</h1><ul><li>保持多态性需要虚析构函数，以保证能够正确释放对象</li><li>当一个类有子类时，该类的析构函数必须是虚函数，否则可能会有资源释放不完全的情况（因为非虚函数是静态绑定的）；</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123; std::cout &lt;&lt; <span class="string">&quot;~A()!&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">B</span>()&#123; std::cout &lt;&lt; <span class="string">&quot;~B()!&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">C</span>()&#123; std::cout &lt;&lt; <span class="string">&quot;~C()!&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A* pa1 = <span class="keyword">new</span> <span class="built_in">B</span>();</span><br><span class="line">A* pa2 = <span class="keyword">new</span> <span class="built_in">C</span>();</span><br><span class="line"><span class="keyword">delete</span> pa1;</span><br><span class="line"><span class="keyword">delete</span> pa2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只会调用父类的析构函数，如果这时子类的析构函数中有关于内存释放的操作，将会造成内存泄露。</span></span><br><span class="line"><span class="comment">//~A()!</span></span><br><span class="line"><span class="comment">//~A()!</span></span><br></pre></td></tr></table></figure><ul><li>需要给父类的析构函数加上virtual</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>()&#123; std::cout &lt;&lt; <span class="string">&quot;~A()!&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出如下</span></span><br><span class="line"><span class="comment">//~B()!</span></span><br><span class="line"><span class="comment">//~A()!</span></span><br><span class="line"><span class="comment">//~C()!</span></span><br><span class="line"><span class="comment">//~A()!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI算法基础 [1]：mIoU</title>
      <link href="/2021/11/11/AI-Algorithm-1-mIoU/"/>
      <url>/2021/11/11/AI-Algorithm-1-mIoU/</url>
      
        <content type="html"><![CDATA[<h1>IoU(Intersection over Union 交并比)</h1><ul><li>就是矩形框A、B的重叠面积占A、B并集的面积比例。<br><code>IoU=Area(A∩B)/Area(A∪B)</code></li></ul><p><img src="/2021/11/11/AI-Algorithm-1-mIoU/1.png" alt="1"></p><ul><li>预测的结果往往就是四种情况：<ul><li>true positive（TP） 真正 被判定为正样本，事实上也是正样本</li><li>false positive（FP） 假正 被判定为正样本，但事实上是负样本</li><li>true negative（TN） 真负 被判定为负样本，事实上也是负样本</li><li>false negative（FN） 假负 被判定为负样本，但事实上是正样本</li></ul></li></ul><blockquote><p>第二个字母：What’s your judgement about the sample?<br>第一个字母：Is your judgement right(true) or not(false)?</p></blockquote><p><img src="/2021/11/11/AI-Algorithm-1-mIoU/2.png" alt="2"></p><p>基于以上定义：<code>IoU=TP/(FP+FN+TP)</code></p><h1>mIoU（Mean Intersection over Union）均交并比</h1><p>即对每个类别计算出的IoU求平均。</p><p><img src="/2021/11/11/AI-Algorithm-1-mIoU/3.png" alt="3"></p><p>其中，i表示真实值，j表示预测值，pij表示将i预测成j的数量，故上式等价于</p><p><img src="/2021/11/11/AI-Algorithm-1-mIoU/4.png" alt="4"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
